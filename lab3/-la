[33mcommit cda43f90d3851e79dc4691e6fe62badea0766bd7[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmain[m[33m)[m
Author: Binny5Gill <gillbinny5@gmail.com>
Date:   Tue Aug 6 16:59:47 2024 +1000

    lab5

[1mdiff --git a/IOD_Lab 5.2.ipynb b/IOD_Lab 5.2.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..71ecb6f[m
[1m--- /dev/null[m
[1m+++ b/IOD_Lab 5.2.ipynb[m	
[36m@@ -0,0 +1,785 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "jq8zRd3jTtAb"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "<div>\n",[m
[32m+[m[32m    "<img src=https://www.institutedata.com/wp-content/uploads/2019/10/iod_h_tp_primary_c.svg width=\"300\">\n",[m
[32m+[m[32m    "</div>"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "ioFn-df0TtAd"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Lab 5.2\n",[m
[32m+[m[32m    "# *The Perceptron*"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "9ZrnRfDnTtAf"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "The perceptron is the basic unit of a neural network. It learns by adjusting the weights applied to each of its inputs until the error at its output is minimised.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "The example in this lab uses the stochastic gradient descent (SGD) algorithm to optimise the weights of a perceptron applied to a 2D classification problem."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 1,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "ExecuteTime": {[m
[32m+[m[32m     "end_time": "2019-05-08T08:26:36.248424Z",[m
[32m+[m[32m     "start_time": "2019-05-08T08:26:35.663989Z"[m
[32m+[m[32m    },[m
[32m+[m[32m    "executionInfo": {[m
[32m+[m[32m     "elapsed": 5,[m
[32m+[m[32m     "status": "ok",[m
[32m+[m[32m     "timestamp": 1715215418198,[m
[32m+[m[32m     "user": {[m
[32m+[m[32m      "displayName": "Chaitanya Rao",[m
[32m+[m[32m      "userId": "16367114639785284684"[m
[32m+[m[32m     },[m
[32m+[m[32m     "user_tz": -600[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "zx6z5_xXTtAi"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "import numpy as np\n",[m
[32m+[m[32m    "from matplotlib import pyplot as plt\n",[m
[32m+[m[32m    "%matplotlib inline"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "Xr7oFCsUTtAp"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "The training dataset has 2 numeric features (X is 2D) and a binary response (y = +/-1):"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 3,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "ExecuteTime": {[m
[32m+[m[32m     "end_time": "2019-05-08T08:26:38.234462Z",[m
[32m+[m[32m     "start_time": "2019-05-08T08:26:38.227134Z"[m
[32m+[m[32m    },[m
[32m+[m[32m    "executionInfo": {[m
[32m+[m[32m     "elapsed": 4,[m
[32m+[m[32m     "status": "ok",[m
[32m+[m[32m     "timestamp": 1715215423396,[m
[32m+[m[32m     "user": {[m
[32m+[m[32m      "displayName": "Chaitanya Rao",[m
[32m+[m[32m      "userId": "16367114639785284684"[m
[32m+[m[32m     },[m
[32m+[m[32m     "user_tz": -600[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "fTGIf8aVTtAr"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "X = np.array([[-1, 3], [1, 4], [4, 5], [-1, 5], [2, 6], [5, 6]])\n",[m
[32m+[m[32m    "y = np.array([-1, -1, -1, 1, 1, 1])"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "Mq1AisHdTtAx"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Here is the training data, along with a candidate hyperplane that separates the classes:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 8,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "ExecuteTime": {[m
[32m+[m[32m     "end_time": "2019-05-08T08:26:52.008948Z",[m
[32m+[m[32m     "start_time": "2019-05-08T08:26:51.673659Z"[m
[32m+[m[32m    },[m
[32m+[m[32m    "colab": {[m
[32m+[m[32m     "base_uri": "https://localhost:8080/",[m
[32m+[m[32m     "height": 449[m
[32m+[m[32m    },[m
[32m+[m[32m    "executionInfo": {[m
[32m+[m[32m     "elapsed": 466,[m
[32m+[m[32m     "status": "ok",[m
[32m+[m[32m     "timestamp": 1715215615228,[m
[32m+[m[32m     "user": {[m
[32m+[m[32m      "displayName": "Chaitanya Rao",[m
[32m+[m[32m      "userId": "16367114639785284684"[m
[32m+[m[32m     },[m
[32m+[m[32m     "user_tz": -600[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "edayhuvQTtAz",[m
[32m+[m[32m    "outputId": "c53b4f2b-da72-4377-acb3-b8ba1c1a4b29"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "image/png": "",[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<Figure size 640x480 with 1 Axes>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "display_data"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "def plotData(X):\n",[m
[32m+[m[32m    "    for d, sample in enumerate(X):\n",[m
[32m+[m[32m    "        # Plot the negative samples\n",[m
[32m+[m[32m    "        if d < 3:\n",[m
[32m+[m[32m    "            plt.scatter(sample[0], sample[1], s = 100, marker = '_', color = 'blue')\n",[m
[32m+[m[32m    "        # Plot the positive samples\n",[m
[32m+[m[32m    "        else:\n",[m
[32m+[m[32m    "            plt.scatter(sample[0], sample[1], s = 100, marker = '+', color = 'blue')\n",[m
[32m+[m[32m    "    plt.xlabel('X0')\n",[m
[32m+[m[32m    "    plt.ylabel('X1')\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "plotData(X)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Print one possible hyperplane that separates the two classes:\n",[m
[32m+[m[32m    "plt.plot([-2, 6], [4, 5], linestyle = 'dashed');"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "C6cXLNCHTtA4"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "We need to include a bias term (-1) in the X array. This will transform the decision boundary so that the sign of the dot product of any data point with the weights vector, represented in the code below by $$⟨x[i], w⟩ = {\\rm wt}[0]\\times x_0 + {\\rm wt}[1]\\times x_1 + {\\rm wt}[2]\\times(-1),$$  will determine class membership:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 4,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "ExecuteTime": {[m
[32m+[m[32m     "end_time": "2019-05-08T08:27:12.602633Z",[m
[32m+[m[32m     "start_time": "2019-05-08T08:27:12.597240Z"[m
[32m+[m[32m    },[m
[32m+[m[32m    "executionInfo": {[m
[32m+[m[32m     "elapsed": 322,[m
[32m+[m[32m     "status": "ok",[m
[32m+[m[32m     "timestamp": 1715215643100,[m
[32m+[m[32m     "user": {[m
[32m+[m[32m      "displayName": "Chaitanya Rao",[m
[32m+[m[32m      "userId": "16367114639785284684"[m
[32m+[m[32m     },[m
[32m+[m[32m     "user_tz": -600[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "kB2nAgFCTtA5"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "X = np.array([ [-1, 3, -1], [1, 4, -1], [4, 5, -1], [-1, 5, -1], [2, 6, -1], [5, 6, -1]])"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "osAbAN8uTtA9"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Here is a simple implementation of the stochastic gradient descent algorithm for computing the weights:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 5,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "ExecuteTime": {[m
[32m+[m[32m     "end_time": "2019-05-08T08:27:19.076619Z",[m
[32m+[m[32m     "start_time": "2019-05-08T08:27:19.057921Z"[m
[32m+[m[32m    },[m
[32m+[m[32m    "executionInfo": {[m
[32m+[m[32m     "elapsed": 3,[m
[32m+[m[32m     "status": "ok",[m
[32m+[m[32m     "timestamp": 1715215644248,[m
[32m+[m[32m     "user": {[m
[32m+[m[32m      "displayName": "Chaitanya Rao",[m
[32m+[m[32m      "userId": "16367114639785284684"[m
[32m+[m[32m     },[m
[32m+[m[32m     "user_tz": -600[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "p19kSX3ATtA-"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "def calc_perceptron_weights(Xt, Yt, eta = 1, epochs = 20):\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    # Initialize the weight vector for the perceptron with zeros:\n",[m
[32m+[m[32m    "    wt = np.zeros(len(Xt[0]))\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    for t in range(epochs):\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "        # Iterate over each sample in the data set:\n",[m
[32m+[m[32m    "        for i, x in enumerate(Xt):\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "            # Test for misclassification: y * ⟨x[i], w⟩ <= 0:\n",[m
[32m+[m[32m    "            if (np.dot(Xt[i], wt) * Yt[i]) <= 0:\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "                # Update weights:\n",[m
[32m+[m[32m    "                wt = wt + eta * Xt[i] * Yt[i]\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    return wt"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "k0KLK06CTtBA"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Compute the weights using default learning rate (eta = 1) and number of epochs = 10:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 6,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "ExecuteTime": {[m
[32m+[m[32m     "end_time": "2019-05-08T08:27:21.238256Z",[m
[32m+[m[32m     "start_time": "2019-05-08T08:27:21.230609Z"[m
[32m+[m[32m    },[m
[32m+[m[32m    "colab": {[m
[32m+[m[32m     "base_uri": "https://localhost:8080/"[m
[32m+[m[32m    },[m
[32m+[m[32m    "executionInfo": {[m
[32m+[m[32m     "elapsed": 385,[m
[32m+[m[32m     "status": "ok",[m
[32m+[m[32m     "timestamp": 1715215648005,[m
[32m+[m[32m     "user": {[m
[32m+[m[32m      "displayName": "Chaitanya Rao",[m
[32m+[m[32m      "userId": "16367114639785284684"[m
[32m+[m[32m     },[m
[32m+[m[32m     "user_tz": -600[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "hhnp-r5ZTtBB",[m
[32m+[m[32m    "outputId": "42ba13b5-ac80-412b-8d82-e7e8704cdf1f"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "[2. 9. 4.]\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "w = calc_perceptron_weights(X, y, epochs = 10)\n",[m
[32m+[m[32m    "print(w)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "t-bVPkYmTtBE"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Did it work? Let's check the decision boundary (hyperplane) and try some predictions:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 8,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "ExecuteTime": {[m
[32m+[m[32m     "end_time": "2019-05-08T08:27:34.651008Z",[m
[32m+[m[32m     "start_time": "2019-05-08T08:27:34.377160Z"[m
[32m+[m[32m    },[m
[32m+[m[32m    "colab": {[m
[32m+[m[32m     "base_uri": "https://localhost:8080/",[m
[32m+[m[32m     "height": 466[m
[32m+[m[32m    },[m
[32m+[m[32m    "executionInfo": {[m
[32m+[m[32m     "elapsed": 364,[m
[32m+[m[32m     "status": "ok",[m
[32m+[m[32m     "timestamp": 1715215733435,[m
[32m+[m[32m     "user": {[m
[32m+[m[32m      "displayName": "Chaitanya Rao",[m
[32m+[m[32m      "userId": "16367114639785284684"[m
[32m+[m[32m     },[m
[32m+[m[32m     "user_tz": -600[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "r7mGWtPfTtBF",[m
[32m+[m[32m    "outputId": "0c15aed0-2b9b-4597-a60f-3a444c23a66f"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<matplotlib.collections.PathCollection at 0x7a40ec0f05b0>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 8,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "image/png": "\n",[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<Figure size 640x480 with 1 Axes>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "display_data"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "def plotHyperplane(wt):\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    xx = np.linspace(-2,6)\n",[m
[32m+[m[32m    "    yy = (-wt[0]*xx + wt[2])/wt[1]\n",[m
[32m+[m[32m    "    plt.plot(xx, yy);\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "plotData(X)\n",[m
[32m+[m[32m    "plotHyperplane(w)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Test samples:\n",[m
[32m+[m[32m    "plt.scatter(2, 4, s = 120, marker = '_', color = 'red')\n",[m
[32m+[m[32m    "plt.scatter(4, 6, s = 120, marker = '+', color = 'red')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "UP9Ce-hxTtBH"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "So far, all of the negatively labelled points are misclassified!\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Let's a look at how the model training actually proceeds. The error at each epoch is calculated using a hinge-loss function:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 9,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "ExecuteTime": {[m
[32m+[m[32m     "end_time": "2019-05-08T08:28:37.761923Z",[m
[32m+[m[32m     "start_time": "2019-05-08T08:28:37.416555Z"[m
[32m+[m[32m    },[m
[32m+[m[32m    "colab": {[m
[32m+[m[32m     "base_uri": "https://localhost:8080/",[m
[32m+[m[32m     "height": 466[m
[32m+[m[32m    },[m
[32m+[m[32m    "executionInfo": {[m
[32m+[m[32m     "elapsed": 747,[m
[32m+[m[32m     "status": "ok",[m
[32m+[m[32m     "timestamp": 1715215777270,[m
[32m+[m[32m     "user": {[m
[32m+[m[32m      "displayName": "Chaitanya Rao",[m
[32m+[m[32m      "userId": "16367114639785284684"[m
[32m+[m[32m     },[m
[32m+[m[32m     "user_tz": -600[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "Nj0rgwdWTtBI",[m
[32m+[m[32m    "outputId": "2ed2516b-1174-48f5-cb97-2a10ceecc478"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "[2. 9. 4.]\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "image/png": "\n",[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<Figure size 640x480 with 1 Axes>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "display_data"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "def perceptron_plot(Xt, Yt, eta = 1, epochs = 10):\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    wt = np.zeros(len(Xt[0]))\n",[m
[32m+[m[32m    "    errors = []\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    for t in range(epochs):\n",[m
[32m+[m[32m    "        error = 0\n",[m
[32m+[m[32m    "        for i, x in enumerate(Xt):\n",[m
[32m+[m[32m    "            if (np.dot(Xt[i], wt) * Yt[i]) <= 0:\n",[m
[32m+[m[32m    "                error += -(np.dot(Xt[i], wt) * Yt[i])\n",[m
[32m+[m[32m    "                wt += eta * Xt[i] * Yt[i]\n",[m
[32m+[m[32m    "        errors.append(error)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    plt.plot(errors);\n",[m
[32m+[m[32m    "    plt.xlabel('Epoch')\n",[m
[32m+[m[32m    "    plt.ylabel('Total Loss')\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    return wt\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "print(perceptron_plot(X, y))"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "KQHKxWwPTtBL"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "So, 10 epochs clearly wasn't enough for the SGD algorithm to converge.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Try increasing `epochs` until the error goes to zero, then replot the test data and decision boundary:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 24,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "unHdQjgETtBL"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "[-1.  7.]\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#?\n",[m
[32m+[m[32m    "def perceptron_plot(Xt, Yt, eta=1, max_epochs=1000):\n",[m
[32m+[m[32m    "    wt = np.zeros(len(Xt[0]))\n",[m
[32m+[m[32m    "    for _ in range(max_epochs):\n",[m
[32m+[m[32m    "        errors = 0\n",[m
[32m+[m[32m    "        for i, x in enumerate(Xt):\n",[m
[32m+[m[32m    "            if Yt[i] * np.dot(Xt[i], wt) <= 0:\n",[m
[32m+[m[32m    "                wt += eta * Xt[i] * Yt[i]\n",[m
[32m+[m[32m    "                errors += 1\n",[m
[32m+[m[32m    "        if errors == 0:\n",[m
[32m+[m[32m    "            break\n",[m
[32m+[m[32m    "    return wt\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "print(perceptron_plot(X, y))"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 26,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "gV9DO1-mTtBO"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#?\n",[m
[32m+[m[32m    "def plot_decision_boundary(Xt, Yt, wt):\n",[m
[32m+[m[32m    "    plt.figure(figsize=(8, 6))\n",[m
[32m+[m[32m    "    plt.scatter(Xt[Yt == 1][:, 0], Xt[Yt == 1][:, 1], color='green', marker='+', label='Positive')\n",[m
[32m+[m[32m    "    plt.scatter(Xt[Yt == -1][:, 0], Xt[Yt == -1][:, 1], color='red', marker='_', label='Negative')\n",[m
[32m+[m[32m    "    \n",[m
[32m+[m[32m    "    x_min, x_max = Xt[:, 0].min() - 1, Xt[:, 0].max() + 1\n",[m
[32m+[m[32m    "    y_min, y_max = Xt[:, 1].min() - 1, Xt[:, 1].max() + 1t\n",[m
[32m+[m[32m    "    xx, yy = np.meshgrid(np.linspace(x_min, x_max, 100), np.linspace(y_min, y_max, 100))\n",[m
[32m+[m[32m    "    Z = np.dot(np.c_[xx.ravel(), yy.ravel()], wt).reshape(xx.shape)\n",[m
[32m+[m[32m    "    plt.contourf(xx, yy, Z, levels=[-1, 0, 1], colors=['red', 'white', 'green'], alpha=0.3)\n",[m
[32m+[m[32m    "    plt.contour(xx, yy, Z, levels=[0], colors='black', linewidths=2)\n",[m
[32m+[m[32m    "    \n",[m
[32m+[m[32m    "    plt.xlabel('X0')\n",[m
[32m+[m[32m    "    plt.ylabel('X1')\n",[m
[32m+[m[32m    "    plt.legend()\n",[m
[32m+[m[32m    "    plt.title('Perceptron Decision Boundary')\n",[m
[32m+[m[32m    "    plt.grid(True)\n",[m
[32m+[m[32m    "    plt.show()\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 28,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "X = np.array([[1, 2], [2, 3], [3, 1], [4, 4], [5, 5], [6, 4]])\n",[m
[32m+[m[32m    "y = np.array([-1, -1, -1, 1, 1, 1])\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 30,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "image/png": "",[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<Figure size 800x600 with 1 Axes>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "display_data"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "weights = perceptron_train(X, y)\n",[m
[32m+[m[32m    "plot_decision_boundary(X, y, weights)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "Hp-B7PMATtBQ"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Show how to manually compute class membership for a new data point Xi = [3.5, 3.3] using just the weights determined above:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 46,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "9AqWg7UDTtBR"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "[ 3. -2.]\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#?\n",[m
[32m+[m[32m    "def perceptron_plot(Xt, Yt, eta=1, max_epochs=1000):\n",[m
[32m+[m[32m    "    \"\"\"\n",[m
[32m+[m[32m    "    Train a perceptron on the given data.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    Parameters:\n",[m
[32m+[m[32m    "    Xt (numpy array): Input features (shape: [n_samples, n_features]).\n",[m
[32m+[m[32m    "    Yt (numpy array): Target labels (shape: [n_samples]).\n",[m
[32m+[m[32m    "    eta (float): Learning rate.\n",[m
[32m+[m[32m    "    max_epochs (int): Maximum number of epochs to train.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    Returns:\n",[m
[32m+[m[32m    "    numpy array: The final weights of the perceptron.\n",[m
[32m+[m[32m    "    \"\"\"\n",[m
[32m+[m[32m    "    wt = np.zeros(Xt.shape[1])\n",[m
[32m+[m[32m    "    for _ in range(max_epochs):\n",[m
[32m+[m[32m    "        errors = 0\n",[m
[32m+[m[32m    "        for i, x in enumerate(Xt):\n",[m
[32m+[m[32m    "            if Yt[i] * np.dot(x, wt) <= 0:\n",[m
[32m+[m[32m    "                wt += eta * Xt[i] * Yt[i]\n",[m
[32m+[m[32m    "                errors += 1\n",[m
[32m+[m[32m    "        if errors == 0:\n",[m
[32m+[m[32m    "            break\n",[m
[32m+[m[32m    "    return wt\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "print(perceptron_plot(X, y))\n",[m
[32m+[m[32m    "\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 50,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Predicted class for the new point [3.5 3.3] is: 1\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "def classify(weights, x):\n",[m
[32m+[m[32m    "    \"\"\"\n",[m
[32m+[m[32m    "    Classify a new data point based on the trained weights.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    Parameters:\n",[m
[32m+[m[32m    "    weights (numpy array): The weights of the trained perceptron.\n",[m
[32m+[m[32m    "    x (numpy array): The new data point to classify.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    Returns:\n",[m
[32m+[m[32m    "    int: The predicted class label (-1 or 1).\n",[m
[32m+[m[32m    "    \"\"\"\n",[m
[32m+[m[32m    "    # Compute the weighted sum\n",[m
[32m+[m[32m    "    weighted_sum = np.dot(x, weights)\n",[m
[32m+[m[32m    "    # Return class based on the sign of the weighted sum\n",[m
[32m+[m[32m    "    return 1 if weighted_sum > 0 else -1\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Example dataset\n",[m
[32m+[m[32m    "X = np.array([[1, 2], [2, 3], [3, 1], [4, 4], [5, 5], [6, 4]])\n",[m
[32m+[m[32m    "y = np.array([-1, -1, -1, 1, 1, 1])\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Train perceptron and get weights\n",[m
[32m+[m[32m    "weights = perceptron_train(X, y)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# New data point for prediction\n",[m
[32m+[m[32m    "new_point = np.array([3.5, 3.3])\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Classify the new data point\n",[m
[32m+[m[32m    "predicted_class = classify(weights, new_point)\n",[m
[32m+[m[32m    "print(f\"Predicted class for the new point {new_point} is: {predicted_class}\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "7sz7CxOl5kxs"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "In a similar manner make sure each of the training data points is correctly classified:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 54,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "8J6Os9kSTtBT"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#?\n",[m
[32m+[m[32m    "predictions = np.array([classify(weights, x) for x in X])\n",[m
[32m+[m[32m    "accuracy = np.mean(predictions == y)\n",[m
[32m+[m[32m    "\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 56,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Data point [1 2] classified as -1, actual label is -1\n",[m
[32m+[m[32m      "Data point [2 3] classified as -1, actual label is -1\n",[m
[32m+[m[32m      "Data point [3 1] classified as 1, actual label is -1\n",[m
[32m+[m[32m      "Data point [4 4] classified as 1, actual label is 1\n",[m
[32m+[m[32m      "Data point [5 5] classified as 1, actual label is 1\n",[m
[32m+[m[32m      "Data point [6 4] classified as 1, actual label is 1\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Overall accuracy: 83.33%\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "for x, pred, actual in zip(X, predictions, y):\n",[m
[32m+[m[32m    "    print(f\"Data point {x} classified as {pred}, actual label is {actual}\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "print(f\"\\nOverall accuracy: {accuracy * 100:.2f}%\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "UnscrVD3TtBU"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## === End ==="[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "RERADKgNFq9T"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "---\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "---\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "> > > > > > > > > © 2024 Institute of Data\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "---\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "---\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "colab": {[m
[32m+[m[32m   "provenance": [][m
[32m+[m[32m  },[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Python 3 (ipykernel)",[m
[32m+[m[32m   "language": "python",[m
[32m+[m[32m   "name": "python3"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": {[m
[32m+[m[32m    "name": "ipython",[m
[32m+[m[32m    "version": 3[m
[32m+[m[32m   },[m
[32m+[m[32m   "file_extension": ".py",[m
[32m+[m[32m   "mimetype": "text/x-python",[m
[32m+[m[32m   "name": "python",[m
[32m+[m[32m   "nbconvert_exporter": "python",[m
[32m+[m[32m   "pygments_lexer": "ipython3",[m
[32m+[m[32m   "version": "3.11.7"[m
[32m+[m[32m  },[m
[32m+[m[32m  "varInspector": {[m
[32m+[m[32m   "cols": {[m
[32m+[m[32m    "lenName": 16,[m
[32m+[m[32m    "lenType": 16,[m
[32m+[m[32m    "lenVar": 40[m
[32m+[m[32m   },[m
[32m+[m[32m   "kernels_config": {[m
[32m+[m[32m    "python": {[m
[32m+[m[32m     "delete_cmd_postfix": "",[m
[32m+[m[32m     "delete_cmd_prefix": "del ",[m
[32m+[m[32m     "library": "var_list.py",[m
[32m+[m[32m     "varRefreshCmd": "print(var_dic_list())"[m
[32m+[m[32m    },[m
[32m+[m[32m    "r": {[m
[32m+[m[32m     "delete_cmd_postfix": ") ",[m
[32m+[m[32m     "delete_cmd_prefix": "rm(",[m
[32m+[m[32m     "library": "var_list.r",[m
[32m+[m[32m     "varRefreshCmd": "cat(var_dic_list()) "[m
[32m+[m[32m    }[m
[32m+[m[32m   },[m
[32m+[m[32m   "types_to_exclude": [[m
[32m+[m[32m    "module",[m
[32m+[m[32m    "function",[m
[32m+[m[32m    "builtin_function_or_method",[m
[32m+[m[32m    "instance",[m
[32m+[m[32m    "_Feature"[m
[32m+[m[32m   ],[m
[32m+[m[32m   "window_display": false[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 4[m
[32m+[m[32m}[m
[1mdiff --git a/IOD_Lab_5_1.ipynb b/IOD_Lab_5_1.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..da608df[m
[1m--- /dev/null[m
[1m+++ b/IOD_Lab_5_1.ipynb[m
[36m@@ -0,0 +1,2143 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "MV1ykjySSrEu"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "<div>\n",[m
[32m+[m[32m    "<img src=https://www.institutedata.com/wp-content/uploads/2019/10/iod_h_tp_primary_c.svg width=\"300\">\n",[m
[32m+[m[32m    "</div>"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "42orCR4NSrEw"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Lab 5.1\n",[m
[32m+[m[32m    "# *Logistic Regression*"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "z6dger9XSrEz"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Predicting Survival on the Titanic\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "The Titanic sank during her maiden voyage after colliding with an iceberg (April 15, 1912). Due to a commercial decision there were insufficient lifeboats, a fact that was partially responsible for the loss 1,502 out of 2,224 passengers and crew.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "The Titanic dataset incorporates many features of typical real-world problems: a mixture of continuous and discrete features, missing data, linear covariance, and an element of random chance. Predicting survival therefore involves many practical data science skills."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 88,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "BpW4z29ASrE1"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "import pandas as pd\n",[m
[32m+[m[32m    "import numpy as np\n",[m
[32m+[m[32m    "import matplotlib.pyplot as plt\n",[m
[32m+[m[32m    "import seaborn as sns\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "from sklearn.model_selection import train_test_split\n",[m
[32m+[m[32m    "from sklearn.linear_model import LogisticRegression\n",[m
[32m+[m[32m    "from sklearn.metrics import accuracy_score, classification_report\n",[m
[32m+[m[32m    "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "%matplotlib inline"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "BSpp7YdtSrE8"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### \n",[m
[32m+[m[32m    "1. Load Data\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Load the `titanic.csv` file into a DataFrame named \"titanic\", with index column = `PassengerId`. Display the head of the DataFrame."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 90,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "GXnrsCXeSrE-"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# ANSWER\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "df = pd.read_csv('titanic_train.csv')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "BA8iN36rSrFE"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Why would we want to set an index column based on `PassengerId`?"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "WwYgjo5JSrFG"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "ANSWER: This column is the key to training and testing our model. We use it to partition the dataset and to test the predictions of our model against known outcomes."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "8KELa83wYO5Z"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "<a name=\"datadictionary\"></a>\n",[m
[32m+[m[32m    "### 2. Data Dictionary\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "If a data dictionary is available, it is handy to include it in the notebook for reference:\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "| Variable |                                 Definition | Key                                            |\n",[m
[32m+[m[32m    "|----------|-------------------------------------------:|------------------------------------------------|\n",[m
[32m+[m[32m    "| Survival | Survival                                   | 0 = No, 1 = Yes                                |\n",[m
[32m+[m[32m    "| Pclass   | Ticket class                               | 1 = 1st, 2 = 2nd, 3 = 3rd                      |\n",[m
[32m+[m[32m    "| Sex      | Sex                                        |                                                |\n",[m
[32m+[m[32m    "| Age      | Age in years                               |                                                |\n",[m
[32m+[m[32m    "| SibSp    | # of siblings / spouses aboard the Titanic |                                                |\n",[m
[32m+[m[32m    "| Parch    | # of parents / children aboard the Titanic |                                                |\n",[m
[32m+[m[32m    "| Ticket   | Ticket number                              |                                                |\n",[m
[32m+[m[32m    "| Fare     | Passenger fare                             |                                                |\n",[m
[32m+[m[32m    "| Cabin    | Cabin number                               |                                                |\n",[m
[32m+[m[32m    "| Embarked | Port of Embarkation                        | C = Cherbourg, Q = Queenstown, S = Southampton |"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "-CM_PnS0YO5a"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 2. EDA\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Explore dataset. Find features to predict `Survived`. Get rid of null values."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 12,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "q-nj-5WrYO5b"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "<class 'pandas.core.frame.DataFrame'>\n",[m
[32m+[m[32m      "RangeIndex: 891 entries, 0 to 890\n",[m
[32m+[m[32m      "Data columns (total 12 columns):\n",[m
[32m+[m[32m      " #   Column       Non-Null Count  Dtype  \n",[m
[32m+[m[32m      "---  ------       --------------  -----  \n",[m
[32m+[m[32m      " 0   PassengerId  891 non-null    int64  \n",[m
[32m+[m[32m      " 1   Survived     891 non-null    int64  \n",[m
[32m+[m[32m      " 2   Pclass       891 non-null    int64  \n",[m
[32m+[m[32m      " 3   Name         891 non-null    object \n",[m
[32m+[m[32m      " 4   Sex          891 non-null    object \n",[m
[32m+[m[32m      " 5   Age          714 non-null    float64\n",[m
[32m+[m[32m      " 6   SibSp        891 non-null    int64  \n",[m
[32m+[m[32m      " 7   Parch        891 non-null    int64  \n",[m
[32m+[m[32m      " 8   Ticket       891 non-null    object \n",[m
[32m+[m[32m      " 9   Fare         891 non-null    float64\n",[m
[32m+[m[32m      " 10  Cabin        204 non-null    object \n",[m
[32m+[m[32m      " 11  Embarked     889 non-null    object \n",[m
[32m+[m[32m      "dtypes: float64(2), int64(5), object(5)\n",[m
[32m+[m[32m      "memory usage: 83.7+ KB\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# ANSWER\n",[m
[32m+[m[32m    "df.info()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 14,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/html": [[m
[32m+[m[32m       "<div>\n",[m
[32m+[m[32m       "<style scoped>\n",[m
[32m+[m[32m       "    .dataframe tbody tr th:only-of-type {\n",[m
[32m+[m[32m       "        vertical-align: middle;\n",[m
[32m+[m[32m       "    }\n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "    .dataframe tbody tr th {\n",[m
[32m+[m[32m       "        vertical-align: top;\n",[m
[32m+[m[32m       "    }\n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "    .dataframe thead th {\n",[m
[32m+[m[32m       "        text-align: right;\n",[m
[32m+[m[32m       "    }\n",[m
[32m+[m[32m       "</style>\n",[m
[32m+[m[32m       "<table border=\"1\" class=\"dataframe\">\n",[m
[32m+[m[32m       "  <thead>\n",[m
[32m+[m[32m       "    <tr style=\"text-align: right;\">\n",[m
[32m+[m[32m       "      <th></th>\n",[m
[32m+[m[32m       "      <th>PassengerId</th>\n",[m
[32m+[m[32m       "      <th>Survived</th>\n",[m
[32m+[m[32m       "      <th>Pclass</th>\n",[m
[32m+[m[32m       "      <th>Name</th>\n",[m
[32m+[m[32m       "      <th>Sex</th>\n",[m
[32m+[m[32m       "      <th>Age</th>\n",[m
[32m+[m[32m       "      <th>SibSp</th>\n",[m
[32m+[m[32m       "      <th>Parch</th>\n",[m
[32m+[m[32m       "      <th>Ticket</th>\n",[m
[32m+[m[32m       "      <th>Fare</th>\n",[m
[32m+[m[32m       "      <th>Cabin</th>\n",[m
[32m+[m[32m       "      <th>Embarked</th>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "  </thead>\n",[m
[32m+[m[32m       "  <tbody>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>0</th>\n",[m
[32m+[m[32m       "      <td>1</td>\n",[m
[32m+[m[32m       "      <td>0</td>\n",[m
[32m+[m[32m       "      <td>3</td>\n",[m
[32m+[m[32m       "      <td>Braund, Mr. Owen Harris</td>\n",[m
[32m+[m[32m       "      <td>male</td>\n",[m
[32m+[m[32m       "      <td>22.0</td>\n",[m
[32m+[m[32m       "      <td>1</td>\n",[m
[32m+[m[32m       "      <td>0</td>\n",[m
[32m+[m[32m       "      <td>A/5 21171</td>\n",[m
[32m+[m[32m       "      <td>7.2500</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>S</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>1</th>\n",[m
[32m+[m[32m       "      <td>2</td>\n",[m
[32m+[m[32m       "      <td>1</td>\n",[m
[32m+[m[32m       "      <td>1</td>\n",[m
[32m+[m[32m       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",[m
[32m+[m[32m       "      <td>female</td>\n",[m
[32m+[m[32m       "      <td>38.0</td>\n",[m
[32m+[m[32m       "      <td>1</td>\n",[m
[32m+[m[32m       "      <td>0</td>\n",[m
[32m+[m[32m       "      <td>PC 17599</td>\n",[m
[32m+[m[32m       "      <td>71.2833</td>\n",[m
[32m+[m[32m       "      <td>C85</td>\n",[m
[32m+[m[32m       "      <td>C</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>2</th>\n",[m
[32m+[m[32m       "      <td>3</td>\n",[m
[32m+[m[32m       "      <td>1</td>\n",[m
[32m+[m[32m       "      <td>3</td>\n",[m
[32m+[m[32m       "      <td>Heikkinen, Miss. Laina</td>\n",[m
[32m+[m[32m       "      <td>female</td>\n",[m
[32m+[m[32m       "      <td>26.0</td>\n",[m
[32m+[m[32m       "      <td>0</td>\n",[m
[32m+[m[32m       "      <td>0</td>\n",[m
[32m+[m[32m       "      <td>STON/O2. 3101282</td>\n",[m
[32m+[m[32m       "      <td>7.9250</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>S</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>3</th>\n",[m
[32m+[m[32m       "      <td>4</td>\n",[m
[32m+[m[32m       "      <td>1</td>\n",[m
[32m+[m[32m       "      <td>1</td>\n",[m
[32m+[m[32m       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",[m
[32m+[m[32m       "      <td>female</td>\n",[m
[32m+[m[32m       "      <td>35.0</td>\n",[m
[32m+[m[32m       "      <td>1</td>\n",[m
[32m+[m[32m       "      <td>0</td>\n",[m
[32m+[m[32m       "      <td>113803</td>\n",[m
[32m+[m[32m       "      <td>53.1000</td>\n",[m
[32m+[m[32m       "      <td>C123</td>\n",[m
[32m+[m[32m       "      <td>S</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>4</th>\n",[m
[32m+[m[32m       "      <td>5</td>\n",[m
[32m+[m[32m       "      <td>0</td>\n",[m
[32m+[m[32m       "      <td>3</td>\n",[m
[32m+[m[32m       "      <td>Allen, Mr. William Henry</td>\n",[m
[32m+[m[32m       "      <td>male</td>\n",[m
[32m+[m[32m       "      <td>35.0</td>\n",[m
[32m+[m[32m       "      <td>0</td>\n",[m
[32m+[m[32m       "      <td>0</td>\n",[m
[32m+[m[32m       "      <td>373450</td>\n",[m
[32m+[m[32m       "      <td>8.0500</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>S</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "  </tbody>\n",[m
[32m+[m[32m       "</table>\n",[m
[32m+[m[32m       "</div>"[m
[32m+[m[32m      ],[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "   PassengerId  Survived  Pclass  \\\n",[m
[32m+[m[32m       "0            1         0       3   \n",[m
[32m+[m[32m       "1            2         1       1   \n",[m
[32m+[m[32m       "2            3         1       3   \n",[m
[32m+[m[32m       "3            4         1       1   \n",[m
[32m+[m[32m       "4            5         0       3   \n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "                                                Name     Sex   Age  SibSp  \\\n",[m
[32m+[m[32m       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",[m
[32m+[m[32m       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",[m
[32m+[m[32m       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",[m
[32m+[m[32m       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",[m
[32m+[m[32m       "4                           Allen, Mr. William Henry    male  35.0      0   \n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "   Parch            Ticket     Fare Cabin Embarked  \n",[m
[32m+[m[32m       "0      0         A/5 21171   7.2500   NaN        S  \n",[m
[32m+[m[32m       "1      0          PC 17599  71.2833   C85        C  \n",[m
[32m+[m[32m       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",[m
[32m+[m[32m       "3      0            113803  53.1000  C123        S  \n",[m
[32m+[m[32m       "4      0            373450   8.0500   NaN        S  "[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 14,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "df.head()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 31,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/html": [[m
[32m+[m[32m       "<div>\n",[m
[32m+[m[32m       "<style scoped>\n",[m
[32m+[m[32m       "    .dataframe tbody tr th:only-of-type {\n",[m
[32m+[m[32m       "        vertical-align: middle;\n",[m
[32m+[m[32m       "    }\n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "    .dataframe tbody tr th {\n",[m
[32m+[m[32m       "        vertical-align: top;\n",[m
[32m+[m[32m       "    }\n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "    .dataframe thead th {\n",[m
[32m+[m[32m       "        text-align: right;\n",[m
[32m+[m[32m       "    }\n",[m
[32m+[m[32m       "</style>\n",[m
[32m+[m[32m       "<table border=\"1\" class=\"dataframe\">\n",[m
[32m+[m[32m       "  <thead>\n",[m
[32m+[m[32m       "    <tr style=\"text-align: right;\">\n",[m
[32m+[m[32m       "      <th></th>\n",[m
[32m+[m[32m       "      <th>PassengerId</th>\n",[m
[32m+[m[32m       "      <th>Survived</th>\n",[m
[32m+[m[32m       "      <th>Pclass</th>\n",[m
[32m+[m[32m       "      <th>Name</th>\n",[m
[32m+[m[32m       "      <th>Sex</th>\n",[m
[32m+[m[32m       "      <th>Age</th>\n",[m
[32m+[m[32m       "      <th>SibSp</th>\n",[m
[32m+[m[32m       "      <th>Parch</th>\n",[m
[32m+[m[32m       "      <th>Ticket</th>\n",[m
[32m+[m[32m       "      <th>Fare</th>\n",[m
[32m+[m[32m       "      <th>Cabin</th>\n",[m
[32m+[m[32m       "      <th>Embarked</th>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "  </thead>\n",[m
[32m+[m[32m       "  <tbody>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>count</th>\n",[m
[32m+[m[32m       "      <td>891.000000</td>\n",[m
[32m+[m[32m       "      <td>891.000000</td>\n",[m
[32m+[m[32m       "      <td>891.000000</td>\n",[m
[32m+[m[32m       "      <td>891</td>\n",[m
[32m+[m[32m       "      <td>891</td>\n",[m
[32m+[m[32m       "      <td>714.000000</td>\n",[m
[32m+[m[32m       "      <td>891.000000</td>\n",[m
[32m+[m[32m       "      <td>891.000000</td>\n",[m
[32m+[m[32m       "      <td>891</td>\n",[m
[32m+[m[32m       "      <td>891.000000</td>\n",[m
[32m+[m[32m       "      <td>204</td>\n",[m
[32m+[m[32m       "      <td>889</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>unique</th>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>891</td>\n",[m
[32m+[m[32m       "      <td>2</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>681</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>147</td>\n",[m
[32m+[m[32m       "      <td>3</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>top</th>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>Braund, Mr. Owen Harris</td>\n",[m
[32m+[m[32m       "      <td>male</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>347082</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>B96 B98</td>\n",[m
[32m+[m[32m       "      <td>S</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>freq</th>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>1</td>\n",[m
[32m+[m[32m       "      <td>577</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>7</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>4</td>\n",[m
[32m+[m[32m       "      <td>644</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>mean</th>\n",[m
[32m+[m[32m       "      <td>446.000000</td>\n",[m
[32m+[m[32m       "      <td>0.383838</td>\n",[m
[32m+[m[32m       "      <td>2.308642</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>29.699118</td>\n",[m
[32m+[m[32m       "      <td>0.523008</td>\n",[m
[32m+[m[32m       "      <td>0.381594</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>32.204208</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>std</th>\n",[m
[32m+[m[32m       "      <td>257.353842</td>\n",[m
[32m+[m[32m       "      <td>0.486592</td>\n",[m
[32m+[m[32m       "      <td>0.836071</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>14.526497</td>\n",[m
[32m+[m[32m       "      <td>1.102743</td>\n",[m
[32m+[m[32m       "      <td>0.806057</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>49.693429</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>min</th>\n",[m
[32m+[m[32m       "      <td>1.000000</td>\n",[m
[32m+[m[32m       "      <td>0.000000</td>\n",[m
[32m+[m[32m       "      <td>1.000000</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>0.420000</td>\n",[m
[32m+[m[32m       "      <td>0.000000</td>\n",[m
[32m+[m[32m       "      <td>0.000000</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>0.000000</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>25%</th>\n",[m
[32m+[m[32m       "      <td>223.500000</td>\n",[m
[32m+[m[32m       "      <td>0.000000</td>\n",[m
[32m+[m[32m       "      <td>2.000000</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>20.125000</td>\n",[m
[32m+[m[32m       "      <td>0.000000</td>\n",[m
[32m+[m[32m       "      <td>0.000000</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>7.910400</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>50%</th>\n",[m
[32m+[m[32m       "      <td>446.000000</td>\n",[m
[32m+[m[32m       "      <td>0.000000</td>\n",[m
[32m+[m[32m       "      <td>3.000000</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>28.000000</td>\n",[m
[32m+[m[32m       "      <td>0.000000</td>\n",[m
[32m+[m[32m       "      <td>0.000000</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>14.454200</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>75%</th>\n",[m
[32m+[m[32m       "      <td>668.500000</td>\n",[m
[32m+[m[32m       "      <td>1.000000</td>\n",[m
[32m+[m[32m       "      <td>3.000000</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>38.000000</td>\n",[m
[32m+[m[32m       "      <td>1.000000</td>\n",[m
[32m+[m[32m       "      <td>0.000000</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>31.000000</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>max</th>\n",[m
[32m+[m[32m       "      <td>891.000000</td>\n",[m
[32m+[m[32m       "      <td>1.000000</td>\n",[m
[32m+[m[32m       "      <td>3.000000</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>80.000000</td>\n",[m
[32m+[m[32m       "      <td>8.000000</td>\n",[m
[32m+[m[32m       "      <td>6.000000</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>512.329200</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "  </tbody>\n",[m
[32m+[m[32m       "</table>\n",[m
[32m+[m[32m       "</div>"[m
[32m+[m[32m      ],[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "        PassengerId    Survived      Pclass                     Name   Sex  \\\n",[m
[32m+[m[32m       "count    891.000000  891.000000  891.000000                      891   891   \n",[m
[32m+[m[32m       "unique          NaN         NaN         NaN                      891     2   \n",[m
[32m+[m[32m       "top             NaN         NaN         NaN  Braund, Mr. Owen Harris  male   \n",[m
[32m+[m[32m       "freq            NaN         NaN         NaN                        1   577   \n",[m
[32m+[m[32m       "mean     446.000000    0.383838    2.308642                      NaN   NaN   \n",[m
[32m+[m[32m       "std      257.353842    0.486592    0.836071                      NaN   NaN   \n",[m
[32m+[m[32m       "min        1.000000    0.000000    1.000000                      NaN   NaN   \n",[m
[32m+[m[32m       "25%      223.500000    0.000000    2.000000                      NaN   NaN   \n",[m
[32m+[m[32m       "50%      446.000000    0.000000    3.000000                      NaN   NaN   \n",[m
[32m+[m[32m       "75%      668.500000    1.000000    3.000000                      NaN   NaN   \n",[m
[32m+[m[32m       "max      891.000000    1.000000    3.000000                      NaN   NaN   \n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "               Age       SibSp       Parch  Ticket        Fare    Cabin  \\\n",[m
[32m+[m[32m       "count   714.000000  891.000000  891.000000     891  891.000000      204   \n",[m
[32m+[m[32m       "unique         NaN         NaN         NaN     681         NaN      147   \n",[m
[32m+[m[32m       "top            NaN         NaN         NaN  347082         NaN  B96 B98   \n",[m
[32m+[m[32m       "freq           NaN         NaN         NaN       7         NaN        4   \n",[m
[32m+[m[32m       "mean     29.699118    0.523008    0.381594     NaN   32.204208      NaN   \n",[m
[32m+[m[32m       "std      14.526497    1.102743    0.806057     NaN   49.693429      NaN   \n",[m
[32m+[m[32m       "min       0.420000    0.000000    0.000000     NaN    0.000000      NaN   \n",[m
[32m+[m[32m       "25%      20.125000    0.000000    0.000000     NaN    7.910400      NaN   \n",[m
[32m+[m[32m       "50%      28.000000    0.000000    0.000000     NaN   14.454200      NaN   \n",[m
[32m+[m[32m       "75%      38.000000    1.000000    0.000000     NaN   31.000000      NaN   \n",[m
[32m+[m[32m       "max      80.000000    8.000000    6.000000     NaN  512.329200      NaN   \n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "       Embarked  \n",[m
[32m+[m[32m       "count       889  \n",[m
[32m+[m[32m       "unique        3  \n",[m
[32m+[m[32m       "top           S  \n",[m
[32m+[m[32m       "freq        644  \n",[m
[32m+[m[32m       "mean        NaN  \n",[m
[32m+[m[32m       "std         NaN  \n",[m
[32m+[m[32m       "min         NaN  \n",[m
[32m+[m[32m       "25%         NaN  \n",[m
[32m+[m[32m       "50%         NaN  \n",[m
[32m+[m[32m       "75%         NaN  \n",[m
[32m+[m[32m       "max         NaN  "[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 31,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "df.describe(include='all')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 35,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "PassengerId      int64\n",[m
[32m+[m[32m      "Survived         int64\n",[m
[32m+[m[32m      "Pclass           int64\n",[m
[32m+[m[32m      "Name            object\n",[m
[32m+[m[32m      "Sex             object\n",[m
[32m+[m[32m      "Age            float64\n",[m
[32m+[m[32m      "SibSp            int64\n",[m
[32m+[m[32m      "Parch            int64\n",[m
[32m+[m[32m      "Ticket          object\n",[m
[32m+[m[32m      "Fare           float64\n",[m
[32m+[m[32m      "Cabin           object\n",[m
[32m+[m[32m      "Embarked        object\n",[m
[32m+[m[32m      "dtype: object\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "print(df.dtypes)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 37,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "PassengerId      0\n",[m
[32m+[m[32m      "Survived         0\n",[m
[32m+[m[32m      "Pclass           0\n",[m
[32m+[m[32m      "Name             0\n",[m
[32m+[m[32m      "Sex              0\n",[m
[32m+[m[32m      "Age            177\n",[m
[32m+[m[32m      "SibSp            0\n",[m
[32m+[m[32m      "Parch            0\n",[m
[32m+[m[32m      "Ticket           0\n",[m
[32m+[m[32m      "Fare             0\n",[m
[32m+[m[32m      "Cabin          687\n",[m
[32m+[m[32m      "Embarked         2\n",[m
[32m+[m[32m      "dtype: int64\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "print(df.isnull().sum())"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 39,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "df = df.drop(columns=['Cabin'])"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 41,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "PassengerId    0\n",[m
[32m+[m[32m      "Survived       0\n",[m
[32m+[m[32m      "Pclass         0\n",[m
[32m+[m[32m      "Name           0\n",[m
[32m+[m[32m      "Sex            0\n",[m
[32m+[m[32m      "Age            0\n",[m
[32m+[m[32m      "SibSp          0\n",[m
[32m+[m[32m      "Parch          0\n",[m
[32m+[m[32m      "Ticket         0\n",[m
[32m+[m[32m      "Fare           0\n",[m
[32m+[m[32m      "Embarked       0\n",[m
[32m+[m[32m      "dtype: int64\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "df['Age'] = df['Age'].fillna(df['Age'].median())\n",[m
[32m+[m[32m    "df['Embarked'] = df['Embarked'].fillna(df['Embarked'].mode()[0])\n",[m
[32m+[m[32m    "print(df.isnull().sum())"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "uxrHcNYzSrFN"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 3. Numerical Predictors Only"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "gWs3gb8KSrFP"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 3.1. Set Target and Features\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "To begin, let's try a model based on the passenger class (`Pclass`) and parents/children features (`Parch`):"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 16,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "vtE4swCPtZAi"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "df['Embarked'] = df['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 18,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "   Pclass  Parch\n",[m
[32m+[m[32m      "0       3      0\n",[m
[32m+[m[32m      "1       1      0\n",[m
[32m+[m[32m      "2       3      0\n",[m
[32m+[m[32m      "3       1      0\n",[m
[32m+[m[32m      "4       3      0\n",[m
[32m+[m[32m      "0    0\n",[m
[32m+[m[32m      "1    1\n",[m
[32m+[m[32m      "2    1\n",[m
[32m+[m[32m      "3    1\n",[m
[32m+[m[32m      "4    0\n",[m
[32m+[m[32m      "Name: Survived, dtype: int64\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "X = df[['Pclass', 'Parch']]\n",[m
[32m+[m[32m    "y = df['Survived']\n",[m
[32m+[m[32m    "print(X.head())\n",[m
[32m+[m[32m    "print(y.head())"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "_ILBoBYUYO5g"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 3.2 Split"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "kc2wfIDqSrFT"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Split the data into training and testing subsets:\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "- Use `random_state` = 1"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 20,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "CbfZLOdRSrFU"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# ANSWER\n",[m
[32m+[m[32m    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "l8p1bdc1SrFW"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 3.3. Build Model\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Prepare a model by creating an instance of the `LogisticRegression` class from the `sklearn.linear_model` library:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 26,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "nIhxqfrXSrFY"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# ANSWER\n",[m
[32m+[m[32m    "# Create Model\n",[m
[32m+[m[32m    "model = LogisticRegression()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "HJNFicg9SrFa"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Now train it on the training data subset, using the `fit` method of the model object (Nb. by default, `fit` will print the hyperparameters of the model):"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 28,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "lzefYEzfSrFb"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# ANSWER\n",[m
[32m+[m[32m    "# Fit Model\n",[m
[32m+[m[32m    "model.fit(X_train, y_train)\n",[m
[32m+[m[32m    "y_pred = model.predict(X_test)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 30,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Accuracy: 0.65\n",[m
[32m+[m[32m      "              precision    recall  f1-score   support\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "           0       0.67      0.82      0.74       106\n",[m
[32m+[m[32m      "           1       0.61      0.41      0.49        73\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "    accuracy                           0.65       179\n",[m
[32m+[m[32m      "   macro avg       0.64      0.62      0.61       179\n",[m
[32m+[m[32m      "weighted avg       0.65      0.65      0.64       179\n",[m
[32m+[m[32m      "\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "accuracy = accuracy_score(y_test, y_pred)\n",[m
[32m+[m[32m    "print(f\"Accuracy: {accuracy:.2f}\")\n",[m
[32m+[m[32m    "print(classification_report(y_test, y_pred))\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "JsfC92SgSrFd"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "The computed coefficients are an array (`coef_`) stored in the 1st element of an array:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 40,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "Kr7GMdllSrFe"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Coefficients:\n",[m
[32m+[m[32m      "[[-0.90824213  0.33432156]]\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# ANSWER\n",[m
[32m+[m[32m    "coefficients = model.coef_\n",[m
[32m+[m[32m    "print(\"Coefficients:\")\n",[m
[32m+[m[32m    "print(coefficients)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "KL7uKC8USrFh"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "The computed intercept (`intercept_`) is the 1st element of another array:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 43,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "4TudzIpjSrFi"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Intercept:\n",[m
[32m+[m[32m      "[1.40820621]\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# ANSWE\n",[m
[32m+[m[32m    "intercept = model.intercept_\n",[m
[32m+[m[32m    "print(\"Intercept:\")\n",[m
[32m+[m[32m    "print(intercept)\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "SSc0PEbjSrFk"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "We can create tuples of the predictor names and coefficients like this:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 47,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "feature_names = X.columns\n",[m
[32m+[m[32m    "coefficients = model.coef_[0]"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 49,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "DlaUpqxRSrFk"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Feature and Coefficient Set:\n",[m
[32m+[m[32m      "{('Pclass', -0.9082421341469836), ('Parch', 0.33432155514777906)}\n",[m
[32m+[m[32m      "{('Pclass', -0.9082421341469836), ('Parch', 0.33432155514777906)}\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# ANSWER\n",[m
[32m+[m[32m    "feature_coef_set = set(zip(feature_names, coefficients))\n",[m
[32m+[m[32m    "print(\"Feature and Coefficient Set:\")\n",[m
[32m+[m[32m    "print(feature_coef_set)\n",[m
[32m+[m[32m    "print(set(zip(feature_names, model.coef_[0])))"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "duCXO8aqSrFm"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "If we want formatted output, here is a neat way to list the coefficients by predictor:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 51,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "jiz-vjACSrFm"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Pclass      -0.908242\n",[m
[32m+[m[32m      "Parch       +0.334322\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "for col in zip(X_train.columns, model.coef_[0]):\n",[m
[32m+[m[32m    "    print('{:<10s}  {:+.06f}'.format(col[0], col[1]))  # Nb. increase 10 for longer names"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "65YucOmmSrFo"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "This result implies that survival declines with passenger class (i.e. 1st class is highest) but increases with the number of parents or children in a group."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "5FkRLS3oSrFp"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Let's see how well the model fit the training data. The accuracy `score` is the proportion of correct predictions:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 53,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "-Gep5OXUSrFp"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Training Accuracy: 0.69\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# ANSwer\n",[m
[32m+[m[32m    "y_train_pred = model.predict(X_train)\n",[m
[32m+[m[32m    "train_accuracy = accuracy_score(y_train, y_train_pred)\n",[m
[32m+[m[32m    "print(f\"Training Accuracy: {train_accuracy:.2f}\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "_alclvzjSrFs"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "What is the accuracy `score` for the test data?"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 84,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "2GRLpAdmSrFt"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Test Accuracy: 0.66\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# ANSWER\n",[m
[32m+[m[32m    "y_test_pred = model.predict(X_test)\n",[m
[32m+[m[32m    "test_accuracy = accuracy_score(y_test, y_test_pred)\n",[m
[32m+[m[32m    "print(f\"Test Accuracy: {test_accuracy:.2f}\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "KwgPpa5sSrFw"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "What can we say about this result?"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "7XUWZoBRSrFx"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "ANSWER\n",[m
[32m+[m[32m    "- ...\n",[m
[32m+[m[32m    "- ..."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "gBWjeIE2YO6D"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 3.4. Add `AGE` as Feature"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "Rxmg3b2wSrFy"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Let's include `Age` in the model. As we know from our EDA, this feature has many missing values. We don't want to throw away so many rows, so we will replace `NA` values with imputed values (e.g. the overall mean age):"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 92,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "df = df.drop(columns=['Cabin'])\n",[m
[32m+[m[32m    "df['Age'] = df['Age'].fillna(df['Age'].mean())  \n",[m
[32m+[m[32m    "df['Embarked'] = df['Embarked'].fillna(df['Embarked'].mode()[0]) "[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 94,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "IVfjTrF8SrFy"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# ANSWER\n",[m
[32m+[m[32m    "X = df[['Pclass', 'Parch', 'Age']]\n",[m
[32m+[m[32m    "y = df['Survived']"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 96,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "yVSXN-tfYO6J"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Test Accuracy: 0.66\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Build Model\n",[m
[32m+[m[32m    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)\n",[m
[32m+[m[32m    "model = LogisticRegression()\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Fit Model\n",[m
[32m+[m[32m    "model.fit(X_train, y_train)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Score\n",[m
[32m+[m[32m    "y_train_pred = model.predict(X_train)\n",[m
[32m+[m[32m    "test_accuracy = accuracy_score(y_test, y_test_pred)\n",[m
[32m+[m[32m    "print(f\"Test Accuracy: {test_accuracy:.2f}\")\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "v6_aYK1oSrF0"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "So, including age did little to reduce the variance in our model. Why might this be?"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "w1pzei3QSrF1"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "ANSWER\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "- ...\n",[m
[32m+[m[32m    "- ...\n",[m
[32m+[m[32m    "- ..."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "bPLvK9s2SrF1"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Let's see where the model is going wrong by showing the Confusion Matrix:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 101,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "from sklearn import metrics"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 105,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "y_pred_class = model.predict(X_test)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 107,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "rAzihOU2SrF1"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Confusion Matrix:\n",[m
[32m+[m[32m      "[[88 18]\n",[m
[32m+[m[32m      " [42 31]]\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# ANSWER\n",[m
[32m+[m[32m    "conf_matrix = metrics.confusion_matrix(y_test, y_pred_class)\n",[m
[32m+[m[32m    "print(\"Confusion Matrix:\")\n",[m
[32m+[m[32m    "print(conf_matrix)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "S-mclQOiSrF3"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Nb. Here is how `confusion_matrix` arranges its output:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 110,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "QquT0zbNSrF4",[m
[32m+[m[32m    "outputId": "bc777d64-736a-4bc3-bcef-8edaa99caafe"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "[['TN' 'FP']\n",[m
[32m+[m[32m      " ['FN' 'TP']]\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "print(np.asarray([['TN', 'FP'], ['FN', 'TP']]))"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "j9sT-8GqSrF6"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Which type of error is more prevalent?"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "E08zup6gSrF7"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "ANSWER: ..."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "tOPBQRsGSrF8"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Maybe we aren't using the right cut-off value. By default, we are predicting that `Survival` = True if the probability >= 0.5, but we could use a different threshold. The ROC curve helps us decide (as well as showing us how good our predictive model really is):"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 112,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/html": [[m
[32m+[m[32m       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=1000)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=1000)</pre></div></div></div></div></div>"[m
[32m+[m[32m      ],[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "LogisticRegression(max_iter=1000)"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 112,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "logreg = LogisticRegression(max_iter=1000)\n",[m
[32m+[m[32m    "logreg.fit(X_train, y_train)\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 114,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "mqqqTVZCSrF9"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "image/png": "",[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<Figure size 640x480 with 1 Axes>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "display_data"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Generate the prediction values for each of the test observations using predict_proba() function rather than just predict\n",[m
[32m+[m[32m    "preds = logreg.predict_proba(X_test)[:,1]\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Store the false positive rate(fpr), true positive rate (tpr) in vectors for use in the graph\n",[m
[32m+[m[32m    "fpr, tpr, _ = metrics.roc_curve(y_test, preds)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Store the Area Under the Curve (AUC) so we can annotate our graph with this metric\n",[m
[32m+[m[32m    "roc_auc = metrics.auc(fpr, tpr)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Plot the ROC Curve\n",[m
[32m+[m[32m    "plt.figure()\n",[m
[32m+[m[32m    "lw = 2\n",[m
[32m+[m[32m    "plt.plot(fpr, tpr, color='darkorange', lw = lw, label = 'ROC curve (area = %0.2f)' % roc_auc)\n",[m
[32m+[m[32m    "plt.plot([0, 1], [0, 1], color = 'navy', lw = lw, linestyle = '--')\n",[m
[32m+[m[32m    "plt.xlim([0.0, 1.0])\n",[m
[32m+[m[32m    "plt.ylim([0.0, 1.0])\n",[m
[32m+[m[32m    "plt.xlabel('False Positive Rate')\n",[m
[32m+[m[32m    "plt.ylabel('True Positive Rate')\n",[m
[32m+[m[32m    "plt.title('Receiver operating characteristic example')\n",[m
[32m+[m[32m    "plt.legend(loc = \"lower right\")\n",[m
[32m+[m[32m    "plt.show()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "WpOA8_TFSrF_"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 4. Including Categorical Predictors"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "Zp8r1ePeSrF_"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "So far, we've only used numerical features for prediction. Let's convert the character features to dummy variables so we can include them in the model:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 116,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "   PassengerId  Survived  Pclass  \\\n",[m
[32m+[m[32m      "0            1         0       3   \n",[m
[32m+[m[32m      "1            2         1       1   \n",[m
[32m+[m[32m      "2            3         1       3   \n",[m
[32m+[m[32m      "3            4         1       1   \n",[m
[32m+[m[32m      "4            5         0       3   \n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "                                                Name     Sex   Age  SibSp  \\\n",[m
[32m+[m[32m      "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",[m
[32m+[m[32m      "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",[m
[32m+[m[32m      "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",[m
[32m+[m[32m      "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",[m
[32m+[m[32m      "4                           Allen, Mr. William Henry    male  35.0      0   \n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "   Parch            Ticket     Fare Cabin Embarked  \n",[m
[32m+[m[32m      "0      0         A/5 21171   7.2500   NaN        S  \n",[m
[32m+[m[32m      "1      0          PC 17599  71.2833   C85        C  \n",[m
[32m+[m[32m      "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",[m
[32m+[m[32m      "3      0            113803  53.1000  C123        S  \n",[m
[32m+[m[32m      "4      0            373450   8.0500   NaN        S  \n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "titanic = pd.read_csv('titanic_train.csv')\n",[m
[32m+[m[32m    "print(titanic.head())"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 181,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "cbwHVP-bSrGA"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/html": [[m
[32m+[m[32m       "<div>\n",[m
[32m+[m[32m       "<style scoped>\n",[m
[32m+[m[32m       "    .dataframe tbody tr th:only-of-type {\n",[m
[32m+[m[32m       "        vertical-align: middle;\n",[m
[32m+[m[32m       "    }\n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "    .dataframe tbody tr th {\n",[m
[32m+[m[32m       "        vertical-align: top;\n",[m
[32m+[m[32m       "    }\n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "    .dataframe thead th {\n",[m
[32m+[m[32m       "        text-align: right;\n",[m
[32m+[m[32m       "    }\n",[m
[32m+[m[32m       "</style>\n",[m
[32m+[m[32m       "<table border=\"1\" class=\"dataframe\">\n",[m
[32m+[m[32m       "  <thead>\n",[m
[32m+[m[32m       "    <tr style=\"text-align: right;\">\n",[m
[32m+[m[32m       "      <th></th>\n",[m
[32m+[m[32m       "      <th>PassengerId</th>\n",[m
[32m+[m[32m       "      <th>Survived</th>\n",[m
[32m+[m[32m       "      <th>Name</th>\n",[m
[32m+[m[32m       "      <th>Age</th>\n",[m
[32m+[m[32m       "      <th>SibSp</th>\n",[m
[32m+[m[32m       "      <th>Parch</th>\n",[m
[32m+[m[32m       "      <th>Ticket</th>\n",[m
[32m+[m[32m       "      <th>Fare</th>\n",[m
[32m+[m[32m       "      <th>Cabin</th>\n",[m
[32m+[m[32m       "      <th>Sex_female</th>\n",[m
[32m+[m[32m       "      <th>Sex_male</th>\n",[m
[32m+[m[32m       "      <th>Embarked_C</th>\n",[m
[32m+[m[32m       "      <th>Embarked_Q</th>\n",[m
[32m+[m[32m       "      <th>Embarked_S</th>\n",[m
[32m+[m[32m       "      <th>Pclass_1</th>\n",[m
[32m+[m[32m       "      <th>Pclass_2</th>\n",[m
[32m+[m[32m       "      <th>Pclass_3</th>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "  </thead>\n",[m
[32m+[m[32m       "  <tbody>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>0</th>\n",[m
[32m+[m[32m       "      <td>1</td>\n",[m
[32m+[m[32m       "      <td>0</td>\n",[m
[32m+[m[32m       "      <td>Braund, Mr. Owen Harris</td>\n",[m
[32m+[m[32m       "      <td>22.0</td>\n",[m
[32m+[m[32m       "      <td>1</td>\n",[m
[32m+[m[32m       "      <td>0</td>\n",[m
[32m+[m[32m       "      <td>A/5 21171</td>\n",[m
[32m+[m[32m       "      <td>7.2500</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>False</td>\n",[m
[32m+[m[32m       "      <td>True</td>\n",[m
[32m+[m[32m       "      <td>False</td>\n",[m
[32m+[m[32m       "      <td>False</td>\n",[m
[32m+[m[32m       "      <td>True</td>\n",[m
[32m+[m[32m       "      <td>False</td>\n",[m
[32m+[m[32m       "      <td>False</td>\n",[m
[32m+[m[32m       "      <td>True</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>1</th>\n",[m
[32m+[m[32m       "      <td>2</td>\n",[m
[32m+[m[32m       "      <td>1</td>\n",[m
[32m+[m[32m       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",[m
[32m+[m[32m       "      <td>38.0</td>\n",[m
[32m+[m[32m       "      <td>1</td>\n",[m
[32m+[m[32m       "      <td>0</td>\n",[m
[32m+[m[32m       "      <td>PC 17599</td>\n",[m
[32m+[m[32m       "      <td>71.2833</td>\n",[m
[32m+[m[32m       "      <td>C85</td>\n",[m
[32m+[m[32m       "      <td>True</td>\n",[m
[32m+[m[32m       "      <td>False</td>\n",[m
[32m+[m[32m       "      <td>True</td>\n",[m
[32m+[m[32m       "      <td>False</td>\n",[m
[32m+[m[32m       "      <td>False</td>\n",[m
[32m+[m[32m       "      <td>True</td>\n",[m
[32m+[m[32m       "      <td>False</td>\n",[m
[32m+[m[32m       "      <td>False</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>2</th>\n",[m
[32m+[m[32m       "      <td>3</td>\n",[m
[32m+[m[32m       "      <td>1</td>\n",[m
[32m+[m[32m       "      <td>Heikkinen, Miss. Laina</td>\n",[m
[32m+[m[32m       "      <td>26.0</td>\n",[m
[32m+[m[32m       "      <td>0</td>\n",[m
[32m+[m[32m       "      <td>0</td>\n",[m
[32m+[m[32m       "      <td>STON/O2. 3101282</td>\n",[m
[32m+[m[32m       "      <td>7.9250</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>True</td>\n",[m
[32m+[m[32m       "      <td>False</td>\n",[m
[32m+[m[32m       "      <td>False</td>\n",[m
[32m+[m[32m       "      <td>False</td>\n",[m
[32m+[m[32m       "      <td>True</td>\n",[m
[32m+[m[32m       "      <td>False</td>\n",[m
[32m+[m[32m       "      <td>False</td>\n",[m
[32m+[m[32m       "      <td>True</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>3</th>\n",[m
[32m+[m[32m       "      <td>4</td>\n",[m
[32m+[m[32m       "      <td>1</td>\n",[m
[32m+[m[32m       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",[m
[32m+[m[32m       "      <td>35.0</td>\n",[m
[32m+[m[32m       "      <td>1</td>\n",[m
[32m+[m[32m       "      <td>0</td>\n",[m
[32m+[m[32m       "      <td>113803</td>\n",[m
[32m+[m[32m       "      <td>53.1000</td>\n",[m
[32m+[m[32m       "      <td>C123</td>\n",[m
[32m+[m[32m       "      <td>True</td>\n",[m
[32m+[m[32m       "      <td>False</td>\n",[m
[32m+[m[32m       "      <td>False</td>\n",[m
[32m+[m[32m       "      <td>False</td>\n",[m
[32m+[m[32m       "      <td>True</td>\n",[m
[32m+[m[32m       "      <td>True</td>\n",[m
[32m+[m[32m       "      <td>False</td>\n",[m
[32m+[m[32m       "      <td>False</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>4</th>\n",[m
[32m+[m[32m       "      <td>5</td>\n",[m
[32m+[m[32m       "      <td>0</td>\n",[m
[32m+[m[32m       "      <td>Allen, Mr. William Henry</td>\n",[m
[32m+[m[32m       "      <td>35.0</td>\n",[m
[32m+[m[32m       "      <td>0</td>\n",[m
[32m+[m[32m       "      <td>0</td>\n",[m
[32m+[m[32m       "      <td>373450</td>\n",[m
[32m+[m[32m       "      <td>8.0500</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "      <td>False</td>\n",[m
[32m+[m[32m       "      <td>True</td>\n",[m
[32m+[m[32m       "      <td>False</td>\n",[m
[32m+[m[32m       "      <td>False</td>\n",[m
[32m+[m[32m       "      <td>True</td>\n",[m
[32m+[m[32m       "      <td>False</td>\n",[m
[32m+[m[32m       "      <td>False</td>\n",[m
[32m+[m[32m       "      <td>True</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "  </tbody>\n",[m
[32m+[m[32m       "</table>\n",[m
[32m+[m[32m       "</div>"[m
[32m+[m[32m      ],[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "   PassengerId  Survived                                               Name  \\\n",[m
[32m+[m[32m       "0            1         0                            Braund, Mr. Owen Harris   \n",[m
[32m+[m[32m       "1            2         1  Cumings, Mrs. John Bradley (Florence Briggs Th...   \n",[m
[32m+[m[32m       "2            3         1                             Heikkinen, Miss. Laina   \n",[m
[32m+[m[32m       "3            4         1       Futrelle, Mrs. Jacques Heath (Lily May Peel)   \n",[m
[32m+[m[32m       "4            5         0                           Allen, Mr. William Henry   \n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "    Age  SibSp  Parch            Ticket     Fare Cabin  Sex_female  Sex_male  \\\n",[m
[32m+[m[32m       "0  22.0      1      0         A/5 21171   7.2500   NaN       False      True   \n",[m
[32m+[m[32m       "1  38.0      1      0          PC 17599  71.2833   C85        True     False   \n",[m
[32m+[m[32m       "2  26.0      0      0  STON/O2. 3101282   7.9250   NaN        True     False   \n",[m
[32m+[m[32m       "3  35.0      1      0            113803  53.1000  C123        True     False   \n",[m
[32m+[m[32m       "4  35.0      0      0            373450   8.0500   NaN       False      True   \n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "   Embarked_C  Embarked_Q  Embarked_S  Pclass_1  Pclass_2  Pclass_3  \n",[m
[32m+[m[32m       "0       False       False        True     False     False      True  \n",[m
[32m+[m[32m       "1        True       False       False      True     False     False  \n",[m
[32m+[m[32m       "2       False       False        True     False     False      True  \n",[m
[32m+[m[32m       "3       False       False        True      True     False     False  \n",[m
[32m+[m[32m       "4       False       False        True     False     False      True  "[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 181,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "titanic_with_dummies = pd.get_dummies(data = titanic, columns = ['Sex', 'Embarked', 'Pclass'],\n",[m
[32m+[m[32m    "                                      prefix = ['Sex', 'Embarked', 'Pclass'] )\n",[m
[32m+[m[32m    "titanic_with_dummies.head()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "v_WnnEWdSrGB"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "So, this created a column for every possible value of every categorical variable. (A more compact approach would have been to reduce the number of dummy variables by one for each feature, so that the first variable from each captures two possible states.)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "FWjijSClSrGB"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Now that we have data on sex, embarkation port, and passenger class we can try to improve our `Age` imputation by stratifying it by the means of groups within the passenger population:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 183,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "EYTqaSTySrGC"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "titanic_with_dummies['Age'] = titanic_with_dummies[[\"Age\", \"Parch\", \"Sex_male\", \"Pclass_1\", \"Pclass_2\"]].groupby([\"Parch\", \"Sex_male\", \"Pclass_1\", \"Pclass_2\"])[\"Age\"].transform(lambda x: x.fillna(x.mean()))"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "AMt6G9JYSrGE"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Now train the model using the expanded set of predictors and compute the accuracy score for the test set:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 185,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "dSX26hn-SrGE"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Accuracy Score: 0.66\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# ANSWER\n",[m
[32m+[m[32m    "# Set Feature Both Numerical, Categorical\n",[m
[32m+[m[32m    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)\n",[m
[32m+[m[32m    "logreg = LogisticRegression(max_iter=1000)\n",[m
[32m+[m[32m    "logreg.fit(X_train, y_train)\n",[m
[32m+[m[32m    "y_pred = logreg.predict(X_test)\n",[m
[32m+[m[32m    "accuracy = metrics.accuracy_score(y_test, y_pred)\n",[m
[32m+[m[32m    "print(f'Accuracy Score: {accuracy:.2f}')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "CLTPHMa2SrGF"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Plot the ROC curve for the new model:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 118,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "rqkichKQYO6l"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "image/png": "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",[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<Figure size 640x480 with 1 Axes>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "display_data"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# ANSWER\n",[m
[32m+[m[32m    "preds = logreg.predict_proba(X_test)[:, 1]\n",[m
[32m+[m[32m    "fpr, tpr, _ = metrics.roc_curve(y_test, preds)\n",[m
[32m+[m[32m    "roc_auc = metrics.auc(fpr, tpr)\n",[m
[32m+[m[32m    "plt.figure()\n",[m
[32m+[m[32m    "lw = 2\n",[m
[32m+[m[32m    "plt.plot(fpr, tpr, color='darkorange', lw=lw, label='ROC curve (area = %0.2f)' % roc_auc)\n",[m
[32m+[m[32m    "plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\n",[m
[32m+[m[32m    "plt.xlim([0.0, 1.0])\n",[m
[32m+[m[32m    "plt.ylim([0.0, 1.0])\n",[m
[32m+[m[32m    "plt.xlabel('False Positive Rate')\n",[m
[32m+[m[32m    "plt.ylabel('True Positive Rate')\n",[m
[32m+[m[32m    "plt.title('Receiver Operating Characteristic (ROC) Curve')\n",[m
[32m+[m[32m    "plt.legend(loc=\"lower right\")\n",[m
[32m+[m[32m    "plt.show()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "ZlT5P8TfSrGH"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Can we improve the model by including the remaining features?"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 174,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "from sklearn.preprocessing import StandardScaler\n",[m
[32m+[m[32m    "from sklearn.pipeline import Pipeline\n",[m
[32m+[m[32m    "from sklearn.compose import ColumnTransformer\n",[m
[32m+[m[32m    "from sklearn.preprocessing import OneHotEncoder\n",[m
[32m+[m[32m    "from sklearn.impute import SimpleImputer\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 164,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "titanic_with_dummies = pd.get_dummies(data=titanic, columns=['Sex', 'Embarked', 'Pclass'],\n",[m
[32m+[m[32m    "                                      prefix=['Sex', 'Embarked', 'Pclass'])\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 166,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "X = titanic_with_dummies.drop('Survived', axis=1)\n",[m
[32m+[m[32m    "y = titanic_with_dummies['Survived']"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 168,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "numerical_features = X.select_dtypes(include=['int64', 'float64']).columns.tolist()\n",[m
[32m+[m[32m    "categorical_features = X.select_dtypes(include=['uint8']).columns.tolist()\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 170,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "X = titanic_with_dummies.drop('Survived', axis=1)\n",[m
[32m+[m[32m    "y = titanic_with_dummies['Survived']\n",[m
[32m+[m[32m    "\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 172,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "numerical_features = X.select_dtypes(include=['int64', 'float64']).columns.tolist()\n",[m
[32m+[m[32m    "categorical_features = X.select_dtypes(include=['uint8']).columns.tolist()\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 178,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "numerical_transformer = Pipeline(steps=[\n",[m
[32m+[m[32m    "    ('imputer', SimpleImputer(strategy='mean')), \n",[m
[32m+[m[32m    "    ('scaler', StandardScaler())  \n",[m
[32m+[m[32m    "])\n",[m
[32m+[m[32m    "categorical_transformer = Pipeline(steps=[\n",[m
[32m+[m[32m    "    ('imputer', SimpleImputer(strategy='most_frequent')),  # Impute missing values with most frequent value\n",[m
[32m+[m[32m    "    ('onehot', OneHotEncoder(handle_unknown='ignore'))  # One-hot encode categorical features\n",[m
[32m+[m[32m    "])\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 180,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "preprocessor = ColumnTransformer(\n",[m
[32m+[m[32m    "    transformers=[\n",[m
[32m+[m[32m    "        ('num', numerical_transformer, numerical_features),\n",[m
[32m+[m[32m    "        ('cat', categorical_transformer, categorical_features)\n",[m
[32m+[m[32m    "    ])"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 182,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "model = Pipeline(steps=[\n",[m
[32m+[m[32m    "    ('preprocessor', preprocessor),\n",[m
[32m+[m[32m    "    ('classifier', LogisticRegression(max_iter=1000))\n",[m
[32m+[m[32m    "])"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 184,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 186,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "model.fit(X_train, y_train)\n",[m
[32m+[m[32m    "preds = model.predict_proba(X_test)[:, 1]"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 188,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Accuracy Score: 0.65\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "accuracy = metrics.accuracy_score(y_test, model.predict(X_test))\n",[m
[32m+[m[32m    "print(f'Accuracy Score: {accuracy:.2f}')\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 190,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "fpr, tpr, _ = metrics.roc_curve(y_test, preds)\n",[m
[32m+[m[32m    "roc_auc = metrics.auc(fpr, tpr)\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 192,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "image/png": "",[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<Figure size 640x480 with 1 Axes>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "display_data"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "import matplotlib.pyplot as plt\n",[m
[32m+[m[32m    "plt.figure()\n",[m
[32m+[m[32m    "lw = 2\n",[m
[32m+[m[32m    "plt.plot(fpr, tpr, color='darkorange', lw=lw, label='ROC curve (area = %0.2f)' % roc_auc)\n",[m
[32m+[m[32m    "plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\n",[m
[32m+[m[32m    "plt.xlim([0.0, 1.0])\n",[m
[32m+[m[32m    "plt.ylim([0.0, 1.0])\n",[m
[32m+[m[32m    "plt.xlabel('False Positive Rate')\n",[m
[32m+[m[32m    "plt.ylabel('True Positive Rate')\n",[m
[32m+[m[32m    "plt.title('Receiver Operating Characteristic (ROC) Curve')\n",[m
[32m+[m[32m    "plt.legend(loc=\"lower right\")\n",[m
[32m+[m[32m    "plt.show()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "NHrtlx8tSrGP"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Homework\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "1. Remove the `random_state` parameter (if you have used), so that the data partition will be different every time, and run through the final modelling process a few times. Do the results change?\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "2. Use cross-validation to assess the quality of the model when overfitting is controlled. Does the accuracy improve?\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "3. Look at the `fpr` & `tpr` vectors for the best model."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 198,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "from sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict\n",[m
[32m+[m[32m    "from sklearn.model_selection import StratifiedKFold"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 194,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 196,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/html": [[m
[32m+[m[32m       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n",[m
[32m+[m[32m       "                 ColumnTransformer(transformers=[(&#x27;num&#x27;,\n",[m
[32m+[m[32m       "                                                  Pipeline(steps=[(&#x27;imputer&#x27;,\n",[m
[32m+[m[32m       "                                                                   SimpleImputer()),\n",[m
[32m+[m[32m       "                                                                  (&#x27;scaler&#x27;,\n",[m
[32m+[m[32m       "                                                                   StandardScaler())]),\n",[m
[32m+[m[32m       "                                                  [&#x27;PassengerId&#x27;, &#x27;Age&#x27;,\n",[m
[32m+[m[32m       "                                                   &#x27;SibSp&#x27;, &#x27;Parch&#x27;, &#x27;Fare&#x27;]),\n",[m
[32m+[m[32m       "                                                 (&#x27;cat&#x27;,\n",[m
[32m+[m[32m       "                                                  Pipeline(steps=[(&#x27;imputer&#x27;,\n",[m
[32m+[m[32m       "                                                                   SimpleImputer(strategy=&#x27;most_frequent&#x27;)),\n",[m
[32m+[m[32m       "                                                                  (&#x27;onehot&#x27;,\n",[m
[32m+[m[32m       "                                                                   OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),\n",[m
[32m+[m[32m       "                                                  [])])),\n",[m
[32m+[m[32m       "                (&#x27;classifier&#x27;, LogisticRegression(max_iter=1000))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n",[m
[32m+[m[32m       "                 ColumnTransformer(transformers=[(&#x27;num&#x27;,\n",[m
[32m+[m[32m       "                                                  Pipeline(steps=[(&#x27;imputer&#x27;,\n",[m
[32m+[m[32m       "                                                                   SimpleImputer()),\n",[m
[32m+[m[32m       "                                                                  (&#x27;scaler&#x27;,\n",[m
[32m+[m[32m       "                                                                   StandardScaler())]),\n",[m
[32m+[m[32m       "                                                  [&#x27;PassengerId&#x27;, &#x27;Age&#x27;,\n",[m
[32m+[m[32m       "                                                   &#x27;SibSp&#x27;, &#x27;Parch&#x27;, &#x27;Fare&#x27;]),\n",[m
[32m+[m[32m       "                                                 (&#x27;cat&#x27;,\n",[m
[32m+[m[32m       "                                                  Pipeline(steps=[(&#x27;imputer&#x27;,\n",[m
[32m+[m[32m       "                                                                   SimpleImputer(strategy=&#x27;most_frequent&#x27;)),\n",[m
[32m+[m[32m       "                                                                  (&#x27;onehot&#x27;,\n",[m
[32m+[m[32m       "                                                                   OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),\n",[m
[32m+[m[32m       "                                                  [])])),\n",[m
[32m+[m[32m       "                (&#x27;classifier&#x27;, LogisticRegression(max_iter=1000))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">preprocessor: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(transformers=[(&#x27;num&#x27;,\n",[m
[32m+[m[32m       "                                 Pipeline(steps=[(&#x27;imputer&#x27;, SimpleImputer()),\n",[m
[32m+[m[32m       "                                                 (&#x27;scaler&#x27;, StandardScaler())]),\n",[m
[32m+[m[32m       "                                 [&#x27;PassengerId&#x27;, &#x27;Age&#x27;, &#x27;SibSp&#x27;, &#x27;Parch&#x27;,\n",[m
[32m+[m[32m       "                                  &#x27;Fare&#x27;]),\n",[m
[32m+[m[32m       "                                (&#x27;cat&#x27;,\n",[m
[32m+[m[32m       "                                 Pipeline(steps=[(&#x27;imputer&#x27;,\n",[m
[32m+[m[32m       "                                                  SimpleImputer(strategy=&#x27;most_frequent&#x27;)),\n",[m
[32m+[m[32m       "                                                 (&#x27;onehot&#x27;,\n",[m
[32m+[m[32m       "                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),\n",[m
[32m+[m[32m       "                                 [])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">num</label><div class=\"sk-toggleable__content\"><pre>[&#x27;PassengerId&#x27;, &#x27;Age&#x27;, &#x27;SibSp&#x27;, &#x27;Parch&#x27;, &#x27;Fare&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SimpleImputer</label><div class=\"sk-toggleable__content\"><pre>SimpleImputer()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">cat</label><div class=\"sk-toggleable__content\"><pre>[]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SimpleImputer</label><div class=\"sk-toggleable__content\"><pre>SimpleImputer(strategy=&#x27;most_frequent&#x27;)</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=1000)</pre></div></div></div></div></div></div></div>"[m
[32m+[m[32m      ],[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "Pipeline(steps=[('preprocessor',\n",[m
[32m+[m[32m       "                 ColumnTransformer(transformers=[('num',\n",[m
[32m+[m[32m       "                                                  Pipeline(steps=[('imputer',\n",[m
[32m+[m[32m       "                                                                   SimpleImputer()),\n",[m
[32m+[m[32m       "                                                                  ('scaler',\n",[m
[32m+[m[32m       "                                                                   StandardScaler())]),\n",[m
[32m+[m[32m       "                                                  ['PassengerId', 'Age',\n",[m
[32m+[m[32m       "                                                   'SibSp', 'Parch', 'Fare']),\n",[m
[32m+[m[32m       "                                                 ('cat',\n",[m
[32m+[m[32m       "                                                  Pipeline(steps=[('imputer',\n",[m
[32m+[m[32m       "                                                                   SimpleImputer(strategy='most_frequent')),\n",[m
[32m+[m[32m       "                                                                  ('onehot',\n",[m
[32m+[m[32m       "                                                                   OneHotEncoder(handle_unknown='ignore'))]),\n",[m
[32m+[m[32m       "                                                  [])])),\n",[m
[32m+[m[32m       "                ('classifier', LogisticRegression(max_iter=1000))])"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 196,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "model.fit(X_train, y_train)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 202,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cv = StratifiedKFold(n_splits=5, shuffle=True) \n",[m
[32m+[m[32m    "y_pred_cv = cross_val_predict(model, X, y, cv=cv, method='predict_proba')[:, 1]\n",[m
[32m+[m[32m    "\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 204,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "ROC AUC from Cross-Validation: 0.69\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "fpr_cv, tpr_cv, _ = metrics.roc_curve(y, y_pred_cv)\n",[m
[32m+[m[32m    "roc_auc_cv = metrics.auc(fpr_cv, tpr_cv)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "print(f'ROC AUC from Cross-Validation: {roc_auc_cv:.2f}')\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 206,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "y_pred = model.predict_proba(X_test)[:, 1]\n",[m
[32m+[m[32m    "fpr, tpr, _ = metrics.roc_curve(y_test, y_pred)\n",[m
[32m+[m[32m    "roc_auc = metrics.auc(fpr, tpr)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 210,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "image/png": "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T58+zeWsC57jx49n+huQU7/fCiHYlkdERESFU4HqI0RERESkDRZCREREVGixECIiIqJCi4UQERERFVoshIiIiKjQYiFEREREhRYLISIiIiq0WAgRkZo1a9bAyspK7jSyzc3NDXPnzs10nalTp6JatWq5kg8R5W0shIgKoN69e0OhUKR73L9/X+7UsGbNGrWcnJyc4O3tjZCQEJ3s/9KlSxg4cKD0XKFQYOfOnWrrjBkzBkePHtXJ8TLy4et0cHBAmzZtcOvWLa33k58LU6K8joUQUQHVokULhIWFqT3c3d3lTgtA6qSuYWFheP78OTZs2IDr16+jbdu2SElJ+eR9Fy1aFKamppmuY25urtXs1Nn139e5b98+xMTEoHXr1khMTMzxYxNR1rAQIiqglEolHB0d1R76+vqYM2cOPvvsM5iZmaF48eL45ptv1GY1/9CNGzfQqFEjFClSBBYWFvDw8MDly5el5efOnUP9+vVhYmKC4sWLY/jw4YiJick0N4VCAUdHRzg5OaFRo0aYMmUK/vrrL6nFasmSJShVqhSMjIxQrlw5rF+/Xm37qVOnokSJElAqlXB2dsbw4cOlZf+9NObm5gYA6NChAxQKhfT8v5fGDh06BGNjY7x9+1btGMOHD0eDBg109jo9PT0xatQoPH78GP/884+0Tmbn48SJE+jTpw+ioqKklqWpU6cCABITEzFu3DgUK1YMZmZmqFWrFk6cOJFpPkSUHgshokJGT08P8+fPx19//YW1a9fi2LFjGDduXIbrd+/eHS4uLrh06RKuXLmC8ePHw9DQEADw559/onnz5ujYsSNu3ryJoKAgnDlzBsOGDdMqJxMTEwBAUlISduzYgREjRmD06NH466+/MGjQIPTp0wfHjx8HAGzduhW//fYbli1bhnv37mHnzp347LPPNO730qVLAICAgACEhYVJz/+rSZMmsLKywrZt26RYSkoKNm/ejO7du+vsdb59+xYbNmwAAOn9AzI/H15eXpg7d67UshQWFoYxY8YAAPr06YOzZ89i06ZNuHnzJrp06YIWLVrg3r17Wc6JiIACOfs8UWHXq1cvoa+vL8zMzKRH586dNa67efNmYWtrKz0PCAgQlpaW0vMiRYqINWvWaNy2R48eYuDAgWqx06dPCz09PREXF6dxmw/3HxoaKmrXri1cXFxEQkKC8PLyEgMGDFDbpkuXLqJVq1ZCCCFmz54typYtKxITEzXu39XVVfz222/ScwBix44dautMmTJFVK1aVXo+fPhw0bhxY+n5oUOHhJGRkYiMjPyk1wlAmJmZCVNTU2km7bZt22pcP83HzocQQty/f18oFArx7NkztfiXX34pJkyYkOn+iUidgbxlGBHllEaNGmHJkiXSczMzMwDA8ePHMXPmTNy+fRvR0dFITk5GfHw8YmJipHX+y8/PD/3798f69evRpEkTdOnSBaVKlQIAXLlyBffv30dgYKC0vhACKpUKISEhqFChgsbcoqKiYG5uDiEEYmNjUaNGDWzfvh1GRka4c+eOWmdnAKhbty7mzZsHAOjSpQvmzp2LkiVLokWLFmjVqhXatGkDA4Ps/znr3r076tSpg+fPn8PZ2RmBgYFo1aoVrK2tP+l1FilSBFevXkVycjJOnjyJX3/9FUuXLlVbR9vzAQBXr16FEAJly5ZViyckJORK3yeigoSFEFEBZWZmhtKlS6vFHj9+jFatWmHw4MGYPn06bGxscObMGfTr1w9JSUka9zN16lT4+vpi3759OHDgAKZMmYJNmzahQ4cOUKlUGDRokFofnTQlSpTIMLe0AkFPTw8ODg7pfvAVCoXacyGEFCtevDj++ecfBAcH48iRI/jmm2/w66+/4uTJk2qXnLRRs2ZNlCpVCps2bcKQIUOwY8cOBAQESMuz+zr19PSkc1C+fHmEh4fDx8cHp06dApC985GWj76+Pq5cuQJ9fX21Zebm5lq9dqLCjoUQUSFy+fJlJCcnY/bs2dDTS+0iuHnz5o9uV7ZsWZQtWxajRo1Ct27dEBAQgA4dOqBGjRq4detWuoLrY/5bIHyoQoUKOHPmDHr27CnFzp07p9bqYmJigrZt26Jt27YYOnQoypcvjz///BM1atRItz9DQ8MsjUbz9fVFYGAgXFxcoKenh9atW0vLsvs6PzRq1CjMmTMHO3bsQIcOHbJ0PoyMjNLlX716daSkpODly5eoV6/eJ+VEVNixszRRIVKqVCkkJydjwYIFePjwIdavX5/uUs1/xcXFYdiwYThx4gQeP36Ms2fP4tKlS1JR8t133+H8+fMYOnQorl+/jnv37mH37t349ttvs53j2LFjsWbNGixduhT37t3DnDlzsH37dqmT8Jo1a7Bq1Sr89ddf0mswMTGBq6urxv25ubnh6NGjCA8Px5s3bzI8bvfu3XH16lX8+OOP6Ny5M4yNjaVlunqdFhYW6N+/P6ZMmQIhRJbOh5ubG96/f4+jR4/i9evXiI2NRdmyZdG9e3f07NkT27dvR0hICC5duoSff/4Z+/fv1yonokJPzg5KRJQzevXqJdq1a6dx2Zw5c4STk5MwMTERzZs3F+vWrRMAxJs3b4QQ6p1zExISRNeuXUXx4sWFkZGRcHZ2FsOGDVPrIHzx4kXRtGlTYW5uLszMzESVKlXEjz/+mGFumjr/fmjx4sWiZMmSwtDQUJQtW1asW7dOWrZjxw5Rq1YtYWFhIczMzETt2rXFkSNHpOUfdpbevXu3KF26tDAwMBCurq5CiPSdpdN8/vnnAoA4duxYumW6ep2PHz8WBgYGIigoSAjx8fMhhBCDBw8Wtra2AoCYMmWKEEKIxMREMXnyZOHm5iYMDQ2Fo6Oj6NChg7h582aGORFRegohhJC3FCMiIiKSBy+NERERUaHFQoiIiIgKLRZCREREVGixECIiIqJCi4UQERERFVoshIiIiKjQYiFEREREhRYLISIiIiq0WAgRERFRocVCiIiIiAotFkJERERUaLEQIiIiokLr/wD97Lwgfk5BjwAAAABJRU5ErkJggg==",[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<Figure size 640x480 with 1 Axes>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "display_data"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "plt.figure()\n",[m
[32m+[m[32m    "lw = 2\n",[m
[32m+[m[32m    "plt.plot(fpr, tpr, color='darkorange', lw=lw, label='ROC curve (area = %0.2f)' % roc_auc)\n",[m
[32m+[m[32m    "plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\n",[m
[32m+[m[32m    "plt.xlim([0.0, 1.0])\n",[m
[32m+[m[32m    "plt.ylim([0.0, 1.0])\n",[m
[32m+[m[32m    "plt.xlabel('False Positive Rate')\n",[m
[32m+[m[32m    "plt.ylabel('True Positive Rate')\n",[m
[32m+[m[32m    "plt.title('Receiver Operating Characteristic (ROC) Curve')\n",[m
[32m+[m[32m    "plt.legend(loc=\"lower right\")\n",[m
[32m+[m[32m    "plt.show()\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 212,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Accuracy Score: 0.69\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "print(f'Accuracy Score: {metrics.accuracy_score(y_test, model.predict(X_test)):.2f}')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "RERADKgNFq9T"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "---\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "---\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "> > > > > > > > > © 2024 Institute of Data\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "---\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "---\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "colab": {[m
[32m+[m[32m   "provenance": [][m
[32m+[m[32m  },[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Python 3 (ipykernel)",[m
[32m+[m[32m   "language": "python",[m
[32m+[m[32m   "name": "python3"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": {[m
[32m+[m[32m    "name": "ipython",[m
[32m+[m[32m    "version": 3[m
[32m+[m[32m   },[m
[32m+[m[32m   "file_extension": ".py",[m
[32m+[m[32m   "mimetype": "text/x-python",[m
[32m+[m[32m   "name": "python",[m
[32m+[m[32m   "nbconvert_exporter": "python",[m
[32m+[m[32m   "pygments_lexer": "ipython3",[m
[32m+[m[32m   "version": "3.11.7"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 4[m
[32m+[m[32m}[m
[1mdiff --git a/IOD_Lab_5_1_1.ipynb b/IOD_Lab_5_1_1.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..a1236c5[m
[1m--- /dev/null[m
[1m+++ b/IOD_Lab_5_1_1.ipynb[m
[36m@@ -0,0 +1,1945 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "XebDJ3UnS3n3"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "<div>\n",[m
[32m+[m[32m    "<img src=https://www.institutedata.com/wp-content/uploads/2019/10/iod_h_tp_primary_c.svg width=\"300\">\n",[m
[32m+[m[32m    "</div>"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "e_-HjrL6S3n5"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Lab 5.1.1\n",[m
[32m+[m[32m    "# *Evaluating Classification Models*\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "In this lab you will be practicing evaluating classification models (Logistic Regression in particular) on a \"Breast Cancer\" data."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "ExecuteTime": {[m
[32m+[m[32m     "end_time": "2019-05-06T06:09:10.987137Z",[m
[32m+[m[32m     "start_time": "2019-05-06T06:09:08.585560Z"[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "1zMTIA2vS3n8"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "import numpy as np\n",[m
[32m+[m[32m    "import matplotlib.pyplot as plt\n",[m
[32m+[m[32m    "from sklearn import svm\n",[m
[32m+[m[32m    "from sklearn.datasets import make_blobs\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "%matplotlib inline"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "NK8vl9V2YFtm"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 1. Load Data\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "From UCI's Machine Learning Repository: https://archive.ics.uci.edu/dataset/17/breast+cancer+wisconsin+diagnostic\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Features are computed from a digitized image of a fine needle aspirate (FNA) of a breast mass. They describe characteristics of the cell nuclei present in the image. n the 3-dimensional space is that described in: [K. P. Bennett and O. L. Mangasarian: \"Robust Linear Programming Discrimination of Two Linearly Inseparable Sets\", Optimization Methods and Software 1, 1992, 23-34].\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "This database is also available through the UW CS ftp server: ftp ftp.cs.wisc.edu cd math-prog/cpo-dataset/machine-learn/WDBC/\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Attribute Information:\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "1) ID number 2) Diagnosis (M = malignant, B = benign) 3-32)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Ten real-valued features are computed for each cell nucleus:\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    a) radius (mean of distances from center to points on the perimeter)\n",[m
[32m+[m[32m    "    b) texture (standard deviation of gray-scale values)\n",[m
[32m+[m[32m    "    c) perimeter\n",[m
[32m+[m[32m    "    d) area\n",[m
[32m+[m[32m    "    e) smoothness (local variation in radius lengths)\n",[m
[32m+[m[32m    "    f) compactness (perimeter^2 / area - 1.0)\n",[m
[32m+[m[32m    "    g) concavity (severity of concave portions of the contour)\n",[m
[32m+[m[32m    "    h) concave points (number of concave portions of the contour)\n",[m
[32m+[m[32m    "    i) symmetry\n",[m
[32m+[m[32m    "    j) fractal dimension (\"coastline approximation\" - 1)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "The mean, standard error and \"worst\" or largest (mean of the three largest values) of these features were computed for each image, resulting in 30 features. For instance, field 3 is Mean Radius, field 13 is Radius SE, field 23 is Worst Radius.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "All feature values are recoded with four significant digits.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Missing attribute values: none\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Class distribution: 357 benign, 212 malignant"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 37,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "ExecuteTime": {[m
[32m+[m[32m     "end_time": "2019-05-06T06:10:11.257429Z",[m
[32m+[m[32m     "start_time": "2019-05-06T06:10:10.461467Z"[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "Vobco1MLYFtn"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "import pandas as pd\n",[m
[32m+[m[32m    "import numpy as np\n",[m
[32m+[m[32m    "import matplotlib.pyplot as plt\n",[m
[32m+[m[32m    "from sklearn.model_selection import train_test_split\n",[m
[32m+[m[32m    "from sklearn.linear_model import LogisticRegression\n",[m
[32m+[m[32m    "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",[m
[32m+[m[32m    "from sklearn.metrics import confusion_matrix\n",[m
[32m+[m[32m    "from sklearn.metrics import roc_curve, roc_auc_score\n",[m
[32m+[m[32m    "\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 5,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "ExecuteTime": {[m
[32m+[m[32m     "end_time": "2019-05-06T06:10:13.050415Z",[m
[32m+[m[32m     "start_time": "2019-05-06T06:10:13.046425Z"[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "YMdRWshHYFtq"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "breast_cancer_csv = 'breast-cancer-wisconsin-data.csv'\n",[m
[32m+[m[32m    "df = pd.read_csv(breast_cancer_csv)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "sN3r0f1qYFtt"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 2. EDA\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Explore dataset. Check for nulls. Make the target column binary."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 8,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/html": [[m
[32m+[m[32m       "<div>\n",[m
[32m+[m[32m       "<style scoped>\n",[m
[32m+[m[32m       "    .dataframe tbody tr th:only-of-type {\n",[m
[32m+[m[32m       "        vertical-align: middle;\n",[m
[32m+[m[32m       "    }\n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "    .dataframe tbody tr th {\n",[m
[32m+[m[32m       "        vertical-align: top;\n",[m
[32m+[m[32m       "    }\n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "    .dataframe thead th {\n",[m
[32m+[m[32m       "        text-align: right;\n",[m
[32m+[m[32m       "    }\n",[m
[32m+[m[32m       "</style>\n",[m
[32m+[m[32m       "<table border=\"1\" class=\"dataframe\">\n",[m
[32m+[m[32m       "  <thead>\n",[m
[32m+[m[32m       "    <tr style=\"text-align: right;\">\n",[m
[32m+[m[32m       "      <th></th>\n",[m
[32m+[m[32m       "      <th>id</th>\n",[m
[32m+[m[32m       "      <th>diagnosis</th>\n",[m
[32m+[m[32m       "      <th>radius_mean</th>\n",[m
[32m+[m[32m       "      <th>texture_mean</th>\n",[m
[32m+[m[32m       "      <th>perimeter_mean</th>\n",[m
[32m+[m[32m       "      <th>area_mean</th>\n",[m
[32m+[m[32m       "      <th>smoothness_mean</th>\n",[m
[32m+[m[32m       "      <th>compactness_mean</th>\n",[m
[32m+[m[32m       "      <th>concavity_mean</th>\n",[m
[32m+[m[32m       "      <th>concave points_mean</th>\n",[m
[32m+[m[32m       "      <th>...</th>\n",[m
[32m+[m[32m       "      <th>texture_worst</th>\n",[m
[32m+[m[32m       "      <th>perimeter_worst</th>\n",[m
[32m+[m[32m       "      <th>area_worst</th>\n",[m
[32m+[m[32m       "      <th>smoothness_worst</th>\n",[m
[32m+[m[32m       "      <th>compactness_worst</th>\n",[m
[32m+[m[32m       "      <th>concavity_worst</th>\n",[m
[32m+[m[32m       "      <th>concave points_worst</th>\n",[m
[32m+[m[32m       "      <th>symmetry_worst</th>\n",[m
[32m+[m[32m       "      <th>fractal_dimension_worst</th>\n",[m
[32m+[m[32m       "      <th>Unnamed: 32</th>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "  </thead>\n",[m
[32m+[m[32m       "  <tbody>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>0</th>\n",[m
[32m+[m[32m       "      <td>842302</td>\n",[m
[32m+[m[32m       "      <td>M</td>\n",[m
[32m+[m[32m       "      <td>17.99</td>\n",[m
[32m+[m[32m       "      <td>10.38</td>\n",[m
[32m+[m[32m       "      <td>122.80</td>\n",[m
[32m+[m[32m       "      <td>1001.0</td>\n",[m
[32m+[m[32m       "      <td>0.11840</td>\n",[m
[32m+[m[32m       "      <td>0.27760</td>\n",[m
[32m+[m[32m       "      <td>0.3001</td>\n",[m
[32m+[m[32m       "      <td>0.14710</td>\n",[m
[32m+[m[32m       "      <td>...</td>\n",[m
[32m+[m[32m       "      <td>17.33</td>\n",[m
[32m+[m[32m       "      <td>184.60</td>\n",[m
[32m+[m[32m       "      <td>2019.0</td>\n",[m
[32m+[m[32m       "      <td>0.1622</td>\n",[m
[32m+[m[32m       "      <td>0.6656</td>\n",[m
[32m+[m[32m       "      <td>0.7119</td>\n",[m
[32m+[m[32m       "      <td>0.2654</td>\n",[m
[32m+[m[32m       "      <td>0.4601</td>\n",[m
[32m+[m[32m       "      <td>0.11890</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>1</th>\n",[m
[32m+[m[32m       "      <td>842517</td>\n",[m
[32m+[m[32m       "      <td>M</td>\n",[m
[32m+[m[32m       "      <td>20.57</td>\n",[m
[32m+[m[32m       "      <td>17.77</td>\n",[m
[32m+[m[32m       "      <td>132.90</td>\n",[m
[32m+[m[32m       "      <td>1326.0</td>\n",[m
[32m+[m[32m       "      <td>0.08474</td>\n",[m
[32m+[m[32m       "      <td>0.07864</td>\n",[m
[32m+[m[32m       "      <td>0.0869</td>\n",[m
[32m+[m[32m       "      <td>0.07017</td>\n",[m
[32m+[m[32m       "      <td>...</td>\n",[m
[32m+[m[32m       "      <td>23.41</td>\n",[m
[32m+[m[32m       "      <td>158.80</td>\n",[m
[32m+[m[32m       "      <td>1956.0</td>\n",[m
[32m+[m[32m       "      <td>0.1238</td>\n",[m
[32m+[m[32m       "      <td>0.1866</td>\n",[m
[32m+[m[32m       "      <td>0.2416</td>\n",[m
[32m+[m[32m       "      <td>0.1860</td>\n",[m
[32m+[m[32m       "      <td>0.2750</td>\n",[m
[32m+[m[32m       "      <td>0.08902</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>2</th>\n",[m
[32m+[m[32m       "      <td>84300903</td>\n",[m
[32m+[m[32m       "      <td>M</td>\n",[m
[32m+[m[32m       "      <td>19.69</td>\n",[m
[32m+[m[32m       "      <td>21.25</td>\n",[m
[32m+[m[32m       "      <td>130.00</td>\n",[m
[32m+[m[32m       "      <td>1203.0</td>\n",[m
[32m+[m[32m       "      <td>0.10960</td>\n",[m
[32m+[m[32m       "      <td>0.15990</td>\n",[m
[32m+[m[32m       "      <td>0.1974</td>\n",[m
[32m+[m[32m       "      <td>0.12790</td>\n",[m
[32m+[m[32m       "      <td>...</td>\n",[m
[32m+[m[32m       "      <td>25.53</td>\n",[m
[32m+[m[32m       "      <td>152.50</td>\n",[m
[32m+[m[32m       "      <td>1709.0</td>\n",[m
[32m+[m[32m       "      <td>0.1444</td>\n",[m
[32m+[m[32m       "      <td>0.4245</td>\n",[m
[32m+[m[32m       "      <td>0.4504</td>\n",[m
[32m+[m[32m       "      <td>0.2430</td>\n",[m
[32m+[m[32m       "      <td>0.3613</td>\n",[m
[32m+[m[32m       "      <td>0.08758</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>3</th>\n",[m
[32m+[m[32m       "      <td>84348301</td>\n",[m
[32m+[m[32m       "      <td>M</td>\n",[m
[32m+[m[32m       "      <td>11.42</td>\n",[m
[32m+[m[32m       "      <td>20.38</td>\n",[m
[32m+[m[32m       "      <td>77.58</td>\n",[m
[32m+[m[32m       "      <td>386.1</td>\n",[m
[32m+[m[32m       "      <td>0.14250</td>\n",[m
[32m+[m[32m       "      <td>0.28390</td>\n",[m
[32m+[m[32m       "      <td>0.2414</td>\n",[m
[32m+[m[32m       "      <td>0.10520</td>\n",[m
[32m+[m[32m       "      <td>...</td>\n",[m
[32m+[m[32m       "      <td>26.50</td>\n",[m
[32m+[m[32m       "      <td>98.87</td>\n",[m
[32m+[m[32m       "      <td>567.7</td>\n",[m
[32m+[m[32m       "      <td>0.2098</td>\n",[m
[32m+[m[32m       "      <td>0.8663</td>\n",[m
[32m+[m[32m       "      <td>0.6869</td>\n",[m
[32m+[m[32m       "      <td>0.2575</td>\n",[m
[32m+[m[32m       "      <td>0.6638</td>\n",[m
[32m+[m[32m       "      <td>0.17300</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>4</th>\n",[m
[32m+[m[32m       "      <td>84358402</td>\n",[m
[32m+[m[32m       "      <td>M</td>\n",[m
[32m+[m[32m       "      <td>20.29</td>\n",[m
[32m+[m[32m       "      <td>14.34</td>\n",[m
[32m+[m[32m       "      <td>135.10</td>\n",[m
[32m+[m[32m       "      <td>1297.0</td>\n",[m
[32m+[m[32m       "      <td>0.10030</td>\n",[m
[32m+[m[32m       "      <td>0.13280</td>\n",[m
[32m+[m[32m       "      <td>0.1980</td>\n",[m
[32m+[m[32m       "      <td>0.10430</td>\n",[m
[32m+[m[32m       "      <td>...</td>\n",[m
[32m+[m[32m       "      <td>16.67</td>\n",[m
[32m+[m[32m       "      <td>152.20</td>\n",[m
[32m+[m[32m       "      <td>1575.0</td>\n",[m
[32m+[m[32m       "      <td>0.1374</td>\n",[m
[32m+[m[32m       "      <td>0.2050</td>\n",[m
[32m+[m[32m       "      <td>0.4000</td>\n",[m
[32m+[m[32m       "      <td>0.1625</td>\n",[m
[32m+[m[32m       "      <td>0.2364</td>\n",[m
[32m+[m[32m       "      <td>0.07678</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "  </tbody>\n",[m
[32m+[m[32m       "</table>\n",[m
[32m+[m[32m       "<p>5 rows × 33 columns</p>\n",[m
[32m+[m[32m       "</div>"[m
[32m+[m[32m      ],[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "         id diagnosis  radius_mean  texture_mean  perimeter_mean  area_mean  \\\n",[m
[32m+[m[32m       "0    842302         M        17.99         10.38          122.80     1001.0   \n",[m
[32m+[m[32m       "1    842517         M        20.57         17.77          132.90     1326.0   \n",[m
[32m+[m[32m       "2  84300903         M        19.69         21.25          130.00     1203.0   \n",[m
[32m+[m[32m       "3  84348301         M        11.42         20.38           77.58      386.1   \n",[m
[32m+[m[32m       "4  84358402         M        20.29         14.34          135.10     1297.0   \n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "   smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n",[m
[32m+[m[32m       "0          0.11840           0.27760          0.3001              0.14710   \n",[m
[32m+[m[32m       "1          0.08474           0.07864          0.0869              0.07017   \n",[m
[32m+[m[32m       "2          0.10960           0.15990          0.1974              0.12790   \n",[m
[32m+[m[32m       "3          0.14250           0.28390          0.2414              0.10520   \n",[m
[32m+[m[32m       "4          0.10030           0.13280          0.1980              0.10430   \n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "   ...  texture_worst  perimeter_worst  area_worst  smoothness_worst  \\\n",[m
[32m+[m[32m       "0  ...          17.33           184.60      2019.0            0.1622   \n",[m
[32m+[m[32m       "1  ...          23.41           158.80      1956.0            0.1238   \n",[m
[32m+[m[32m       "2  ...          25.53           152.50      1709.0            0.1444   \n",[m
[32m+[m[32m       "3  ...          26.50            98.87       567.7            0.2098   \n",[m
[32m+[m[32m       "4  ...          16.67           152.20      1575.0            0.1374   \n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "   compactness_worst  concavity_worst  concave points_worst  symmetry_worst  \\\n",[m
[32m+[m[32m       "0             0.6656           0.7119                0.2654          0.4601   \n",[m
[32m+[m[32m       "1             0.1866           0.2416                0.1860          0.2750   \n",[m
[32m+[m[32m       "2             0.4245           0.4504                0.2430          0.3613   \n",[m
[32m+[m[32m       "3             0.8663           0.6869                0.2575          0.6638   \n",[m
[32m+[m[32m       "4             0.2050           0.4000                0.1625          0.2364   \n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "   fractal_dimension_worst  Unnamed: 32  \n",[m
[32m+[m[32m       "0                  0.11890          NaN  \n",[m
[32m+[m[32m       "1                  0.08902          NaN  \n",[m
[32m+[m[32m       "2                  0.08758          NaN  \n",[m
[32m+[m[32m       "3                  0.17300          NaN  \n",[m
[32m+[m[32m       "4                  0.07678          NaN  \n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "[5 rows x 33 columns]"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 8,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "df.head()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 331,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "Index(['id', 'diagnosis', 'radius_mean', 'texture_mean', 'perimeter_mean',\n",[m
[32m+[m[32m       "       'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean',\n",[m
[32m+[m[32m       "       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean',\n",[m
[32m+[m[32m       "       'radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se',\n",[m
[32m+[m[32m       "       'compactness_se', 'concavity_se', 'concave points_se', 'symmetry_se',\n",[m
[32m+[m[32m       "       'fractal_dimension_se', 'radius_worst', 'texture_worst',\n",[m
[32m+[m[32m       "       'perimeter_worst', 'area_worst', 'smoothness_worst',\n",[m
[32m+[m[32m       "       'compactness_worst', 'concavity_worst', 'concave points_worst',\n",[m
[32m+[m[32m       "       'symmetry_worst', 'fractal_dimension_worst', 'Unnamed: 32'],\n",[m
[32m+[m[32m       "      dtype='object')"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 331,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "df.columns"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 333,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/html": [[m
[32m+[m[32m       "<div>\n",[m
[32m+[m[32m       "<style scoped>\n",[m
[32m+[m[32m       "    .dataframe tbody tr th:only-of-type {\n",[m
[32m+[m[32m       "        vertical-align: middle;\n",[m
[32m+[m[32m       "    }\n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "    .dataframe tbody tr th {\n",[m
[32m+[m[32m       "        vertical-align: top;\n",[m
[32m+[m[32m       "    }\n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "    .dataframe thead th {\n",[m
[32m+[m[32m       "        text-align: right;\n",[m
[32m+[m[32m       "    }\n",[m
[32m+[m[32m       "</style>\n",[m
[32m+[m[32m       "<table border=\"1\" class=\"dataframe\">\n",[m
[32m+[m[32m       "  <thead>\n",[m
[32m+[m[32m       "    <tr style=\"text-align: right;\">\n",[m
[32m+[m[32m       "      <th></th>\n",[m
[32m+[m[32m       "      <th>id</th>\n",[m
[32m+[m[32m       "      <th>radius_mean</th>\n",[m
[32m+[m[32m       "      <th>texture_mean</th>\n",[m
[32m+[m[32m       "      <th>perimeter_mean</th>\n",[m
[32m+[m[32m       "      <th>area_mean</th>\n",[m
[32m+[m[32m       "      <th>smoothness_mean</th>\n",[m
[32m+[m[32m       "      <th>compactness_mean</th>\n",[m
[32m+[m[32m       "      <th>concavity_mean</th>\n",[m
[32m+[m[32m       "      <th>concave points_mean</th>\n",[m
[32m+[m[32m       "      <th>symmetry_mean</th>\n",[m
[32m+[m[32m       "      <th>...</th>\n",[m
[32m+[m[32m       "      <th>texture_worst</th>\n",[m
[32m+[m[32m       "      <th>perimeter_worst</th>\n",[m
[32m+[m[32m       "      <th>area_worst</th>\n",[m
[32m+[m[32m       "      <th>smoothness_worst</th>\n",[m
[32m+[m[32m       "      <th>compactness_worst</th>\n",[m
[32m+[m[32m       "      <th>concavity_worst</th>\n",[m
[32m+[m[32m       "      <th>concave points_worst</th>\n",[m
[32m+[m[32m       "      <th>symmetry_worst</th>\n",[m
[32m+[m[32m       "      <th>fractal_dimension_worst</th>\n",[m
[32m+[m[32m       "      <th>Unnamed: 32</th>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "  </thead>\n",[m
[32m+[m[32m       "  <tbody>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>count</th>\n",[m
[32m+[m[32m       "      <td>5.690000e+02</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>...</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>0.0</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>mean</th>\n",[m
[32m+[m[32m       "      <td>3.037183e+07</td>\n",[m
[32m+[m[32m       "      <td>14.127292</td>\n",[m
[32m+[m[32m       "      <td>19.289649</td>\n",[m
[32m+[m[32m       "      <td>91.969033</td>\n",[m
[32m+[m[32m       "      <td>654.889104</td>\n",[m
[32m+[m[32m       "      <td>0.096360</td>\n",[m
[32m+[m[32m       "      <td>0.104341</td>\n",[m
[32m+[m[32m       "      <td>0.088799</td>\n",[m
[32m+[m[32m       "      <td>0.048919</td>\n",[m
[32m+[m[32m       "      <td>0.181162</td>\n",[m
[32m+[m[32m       "      <td>...</td>\n",[m
[32m+[m[32m       "      <td>25.677223</td>\n",[m
[32m+[m[32m       "      <td>107.261213</td>\n",[m
[32m+[m[32m       "      <td>880.583128</td>\n",[m
[32m+[m[32m       "      <td>0.132369</td>\n",[m
[32m+[m[32m       "      <td>0.254265</td>\n",[m
[32m+[m[32m       "      <td>0.272188</td>\n",[m
[32m+[m[32m       "      <td>0.114606</td>\n",[m
[32m+[m[32m       "      <td>0.290076</td>\n",[m
[32m+[m[32m       "      <td>0.083946</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>std</th>\n",[m
[32m+[m[32m       "      <td>1.250206e+08</td>\n",[m
[32m+[m[32m       "      <td>3.524049</td>\n",[m
[32m+[m[32m       "      <td>4.301036</td>\n",[m
[32m+[m[32m       "      <td>24.298981</td>\n",[m
[32m+[m[32m       "      <td>351.914129</td>\n",[m
[32m+[m[32m       "      <td>0.014064</td>\n",[m
[32m+[m[32m       "      <td>0.052813</td>\n",[m
[32m+[m[32m       "      <td>0.079720</td>\n",[m
[32m+[m[32m       "      <td>0.038803</td>\n",[m
[32m+[m[32m       "      <td>0.027414</td>\n",[m
[32m+[m[32m       "      <td>...</td>\n",[m
[32m+[m[32m       "      <td>6.146258</td>\n",[m
[32m+[m[32m       "      <td>33.602542</td>\n",[m
[32m+[m[32m       "      <td>569.356993</td>\n",[m
[32m+[m[32m       "      <td>0.022832</td>\n",[m
[32m+[m[32m       "      <td>0.157336</td>\n",[m
[32m+[m[32m       "      <td>0.208624</td>\n",[m
[32m+[m[32m       "      <td>0.065732</td>\n",[m
[32m+[m[32m       "      <td>0.061867</td>\n",[m
[32m+[m[32m       "      <td>0.018061</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>min</th>\n",[m
[32m+[m[32m       "      <td>8.670000e+03</td>\n",[m
[32m+[m[32m       "      <td>6.981000</td>\n",[m
[32m+[m[32m       "      <td>9.710000</td>\n",[m
[32m+[m[32m       "      <td>43.790000</td>\n",[m
[32m+[m[32m       "      <td>143.500000</td>\n",[m
[32m+[m[32m       "      <td>0.052630</td>\n",[m
[32m+[m[32m       "      <td>0.019380</td>\n",[m
[32m+[m[32m       "      <td>0.000000</td>\n",[m
[32m+[m[32m       "      <td>0.000000</td>\n",[m
[32m+[m[32m       "      <td>0.106000</td>\n",[m
[32m+[m[32m       "      <td>...</td>\n",[m
[32m+[m[32m       "      <td>12.020000</td>\n",[m
[32m+[m[32m       "      <td>50.410000</td>\n",[m
[32m+[m[32m       "      <td>185.200000</td>\n",[m
[32m+[m[32m       "      <td>0.071170</td>\n",[m
[32m+[m[32m       "      <td>0.027290</td>\n",[m
[32m+[m[32m       "      <td>0.000000</td>\n",[m
[32m+[m[32m       "      <td>0.000000</td>\n",[m
[32m+[m[32m       "      <td>0.156500</td>\n",[m
[32m+[m[32m       "      <td>0.055040</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>25%</th>\n",[m
[32m+[m[32m       "      <td>8.692180e+05</td>\n",[m
[32m+[m[32m       "      <td>11.700000</td>\n",[m
[32m+[m[32m       "      <td>16.170000</td>\n",[m
[32m+[m[32m       "      <td>75.170000</td>\n",[m
[32m+[m[32m       "      <td>420.300000</td>\n",[m
[32m+[m[32m       "      <td>0.086370</td>\n",[m
[32m+[m[32m       "      <td>0.064920</td>\n",[m
[32m+[m[32m       "      <td>0.029560</td>\n",[m
[32m+[m[32m       "      <td>0.020310</td>\n",[m
[32m+[m[32m       "      <td>0.161900</td>\n",[m
[32m+[m[32m       "      <td>...</td>\n",[m
[32m+[m[32m       "      <td>21.080000</td>\n",[m
[32m+[m[32m       "      <td>84.110000</td>\n",[m
[32m+[m[32m       "      <td>515.300000</td>\n",[m
[32m+[m[32m       "      <td>0.116600</td>\n",[m
[32m+[m[32m       "      <td>0.147200</td>\n",[m
[32m+[m[32m       "      <td>0.114500</td>\n",[m
[32m+[m[32m       "      <td>0.064930</td>\n",[m
[32m+[m[32m       "      <td>0.250400</td>\n",[m
[32m+[m[32m       "      <td>0.071460</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>50%</th>\n",[m
[32m+[m[32m       "      <td>9.060240e+05</td>\n",[m
[32m+[m[32m       "      <td>13.370000</td>\n",[m
[32m+[m[32m       "      <td>18.840000</td>\n",[m
[32m+[m[32m       "      <td>86.240000</td>\n",[m
[32m+[m[32m       "      <td>551.100000</td>\n",[m
[32m+[m[32m       "      <td>0.095870</td>\n",[m
[32m+[m[32m       "      <td>0.092630</td>\n",[m
[32m+[m[32m       "      <td>0.061540</td>\n",[m
[32m+[m[32m       "      <td>0.033500</td>\n",[m
[32m+[m[32m       "      <td>0.179200</td>\n",[m
[32m+[m[32m       "      <td>...</td>\n",[m
[32m+[m[32m       "      <td>25.410000</td>\n",[m
[32m+[m[32m       "      <td>97.660000</td>\n",[m
[32m+[m[32m       "      <td>686.500000</td>\n",[m
[32m+[m[32m       "      <td>0.131300</td>\n",[m
[32m+[m[32m       "      <td>0.211900</td>\n",[m
[32m+[m[32m       "      <td>0.226700</td>\n",[m
[32m+[m[32m       "      <td>0.099930</td>\n",[m
[32m+[m[32m       "      <td>0.282200</td>\n",[m
[32m+[m[32m       "      <td>0.080040</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>75%</th>\n",[m
[32m+[m[32m       "      <td>8.813129e+06</td>\n",[m
[32m+[m[32m       "      <td>15.780000</td>\n",[m
[32m+[m[32m       "      <td>21.800000</td>\n",[m
[32m+[m[32m       "      <td>104.100000</td>\n",[m
[32m+[m[32m       "      <td>782.700000</td>\n",[m
[32m+[m[32m       "      <td>0.105300</td>\n",[m
[32m+[m[32m       "      <td>0.130400</td>\n",[m
[32m+[m[32m       "      <td>0.130700</td>\n",[m
[32m+[m[32m       "      <td>0.074000</td>\n",[m
[32m+[m[32m       "      <td>0.195700</td>\n",[m
[32m+[m[32m       "      <td>...</td>\n",[m
[32m+[m[32m       "      <td>29.720000</td>\n",[m
[32m+[m[32m       "      <td>125.400000</td>\n",[m
[32m+[m[32m       "      <td>1084.000000</td>\n",[m
[32m+[m[32m       "      <td>0.146000</td>\n",[m
[32m+[m[32m       "      <td>0.339100</td>\n",[m
[32m+[m[32m       "      <td>0.382900</td>\n",[m
[32m+[m[32m       "      <td>0.161400</td>\n",[m
[32m+[m[32m       "      <td>0.317900</td>\n",[m
[32m+[m[32m       "      <td>0.092080</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>max</th>\n",[m
[32m+[m[32m       "      <td>9.113205e+08</td>\n",[m
[32m+[m[32m       "      <td>28.110000</td>\n",[m
[32m+[m[32m       "      <td>39.280000</td>\n",[m
[32m+[m[32m       "      <td>188.500000</td>\n",[m
[32m+[m[32m       "      <td>2501.000000</td>\n",[m
[32m+[m[32m       "      <td>0.163400</td>\n",[m
[32m+[m[32m       "      <td>0.345400</td>\n",[m
[32m+[m[32m       "      <td>0.426800</td>\n",[m
[32m+[m[32m       "      <td>0.201200</td>\n",[m
[32m+[m[32m       "      <td>0.304000</td>\n",[m
[32m+[m[32m       "      <td>...</td>\n",[m
[32m+[m[32m       "      <td>49.540000</td>\n",[m
[32m+[m[32m       "      <td>251.200000</td>\n",[m
[32m+[m[32m       "      <td>4254.000000</td>\n",[m
[32m+[m[32m       "      <td>0.222600</td>\n",[m
[32m+[m[32m       "      <td>1.058000</td>\n",[m
[32m+[m[32m       "      <td>1.252000</td>\n",[m
[32m+[m[32m       "      <td>0.291000</td>\n",[m
[32m+[m[32m       "      <td>0.663800</td>\n",[m
[32m+[m[32m       "      <td>0.207500</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "  </tbody>\n",[m
[32m+[m[32m       "</table>\n",[m
[32m+[m[32m       "<p>8 rows × 32 columns</p>\n",[m
[32m+[m[32m       "</div>"[m
[32m+[m[32m      ],[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "                 id  radius_mean  texture_mean  perimeter_mean    area_mean  \\\n",[m
[32m+[m[32m       "count  5.690000e+02   569.000000    569.000000      569.000000   569.000000   \n",[m
[32m+[m[32m       "mean   3.037183e+07    14.127292     19.289649       91.969033   654.889104   \n",[m
[32m+[m[32m       "std    1.250206e+08     3.524049      4.301036       24.298981   351.914129   \n",[m
[32m+[m[32m       "min    8.670000e+03     6.981000      9.710000       43.790000   143.500000   \n",[m
[32m+[m[32m       "25%    8.692180e+05    11.700000     16.170000       75.170000   420.300000   \n",[m
[32m+[m[32m       "50%    9.060240e+05    13.370000     18.840000       86.240000   551.100000   \n",[m
[32m+[m[32m       "75%    8.813129e+06    15.780000     21.800000      104.100000   782.700000   \n",[m
[32m+[m[32m       "max    9.113205e+08    28.110000     39.280000      188.500000  2501.000000   \n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "       smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n",[m
[32m+[m[32m       "count       569.000000        569.000000      569.000000           569.000000   \n",[m
[32m+[m[32m       "mean          0.096360          0.104341        0.088799             0.048919   \n",[m
[32m+[m[32m       "std           0.014064          0.052813        0.079720             0.038803   \n",[m
[32m+[m[32m       "min           0.052630          0.019380        0.000000             0.000000   \n",[m
[32m+[m[32m       "25%           0.086370          0.064920        0.029560             0.020310   \n",[m
[32m+[m[32m       "50%           0.095870          0.092630        0.061540             0.033500   \n",[m
[32m+[m[32m       "75%           0.105300          0.130400        0.130700             0.074000   \n",[m
[32m+[m[32m       "max           0.163400          0.345400        0.426800             0.201200   \n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "       symmetry_mean  ...  texture_worst  perimeter_worst   area_worst  \\\n",[m
[32m+[m[32m       "count     569.000000  ...     569.000000       569.000000   569.000000   \n",[m
[32m+[m[32m       "mean        0.181162  ...      25.677223       107.261213   880.583128   \n",[m
[32m+[m[32m       "std         0.027414  ...       6.146258        33.602542   569.356993   \n",[m
[32m+[m[32m       "min         0.106000  ...      12.020000        50.410000   185.200000   \n",[m
[32m+[m[32m       "25%         0.161900  ...      21.080000        84.110000   515.300000   \n",[m
[32m+[m[32m       "50%         0.179200  ...      25.410000        97.660000   686.500000   \n",[m
[32m+[m[32m       "75%         0.195700  ...      29.720000       125.400000  1084.000000   \n",[m
[32m+[m[32m       "max         0.304000  ...      49.540000       251.200000  4254.000000   \n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "       smoothness_worst  compactness_worst  concavity_worst  \\\n",[m
[32m+[m[32m       "count        569.000000         569.000000       569.000000   \n",[m
[32m+[m[32m       "mean           0.132369           0.254265         0.272188   \n",[m
[32m+[m[32m       "std            0.022832           0.157336         0.208624   \n",[m
[32m+[m[32m       "min            0.071170           0.027290         0.000000   \n",[m
[32m+[m[32m       "25%            0.116600           0.147200         0.114500   \n",[m
[32m+[m[32m       "50%            0.131300           0.211900         0.226700   \n",[m
[32m+[m[32m       "75%            0.146000           0.339100         0.382900   \n",[m
[32m+[m[32m       "max            0.222600           1.058000         1.252000   \n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "       concave points_worst  symmetry_worst  fractal_dimension_worst  \\\n",[m
[32m+[m[32m       "count            569.000000      569.000000               569.000000   \n",[m
[32m+[m[32m       "mean               0.114606        0.290076                 0.083946   \n",[m
[32m+[m[32m       "std                0.065732        0.061867                 0.018061   \n",[m
[32m+[m[32m       "min                0.000000        0.156500                 0.055040   \n",[m
[32m+[m[32m       "25%                0.064930        0.250400                 0.071460   \n",[m
[32m+[m[32m       "50%                0.099930        0.282200                 0.080040   \n",[m
[32m+[m[32m       "75%                0.161400        0.317900                 0.092080   \n",[m
[32m+[m[32m       "max                0.291000        0.663800                 0.207500   \n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "       Unnamed: 32  \n",[m
[32m+[m[32m       "count          0.0  \n",[m
[32m+[m[32m       "mean           NaN  \n",[m
[32m+[m[32m       "std            NaN  \n",[m
[32m+[m[32m       "min            NaN  \n",[m
[32m+[m[32m       "25%            NaN  \n",[m
[32m+[m[32m       "50%            NaN  \n",[m
[32m+[m[32m       "75%            NaN  \n",[m
[32m+[m[32m       "max            NaN  \n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "[8 rows x 32 columns]"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 333,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "df.describe()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 220,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "<class 'pandas.core.frame.DataFrame'>\n",[m
[32m+[m[32m      "RangeIndex: 569 entries, 0 to 568\n",[m
[32m+[m[32m      "Data columns (total 32 columns):\n",[m
[32m+[m[32m      " #   Column                   Non-Null Count  Dtype  \n",[m
[32m+[m[32m      "---  ------                   --------------  -----  \n",[m
[32m+[m[32m      " 0   target                   0 non-null      float64\n",[m
[32m+[m[32m      " 1   radius_mean              569 non-null    float64\n",[m
[32m+[m[32m      " 2   texture_mean             569 non-null    float64\n",[m
[32m+[m[32m      " 3   perimeter_mean           569 non-null    float64\n",[m
[32m+[m[32m      " 4   area_mean                569 non-null    float64\n",[m
[32m+[m[32m      " 5   smoothness_mean          569 non-null    float64\n",[m
[32m+[m[32m      " 6   compactness_mean         569 non-null    float64\n",[m
[32m+[m[32m      " 7   concavity_mean           569 non-null    float64\n",[m
[32m+[m[32m      " 8   concave points_mean      569 non-null    float64\n",[m
[32m+[m[32m      " 9   symmetry_mean            569 non-null    float64\n",[m
[32m+[m[32m      " 10  fractal_dimension_mean   569 non-null    float64\n",[m
[32m+[m[32m      " 11  radius_se                569 non-null    float64\n",[m
[32m+[m[32m      " 12  texture_se               569 non-null    float64\n",[m
[32m+[m[32m      " 13  perimeter_se             569 non-null    float64\n",[m
[32m+[m[32m      " 14  area_se                  569 non-null    float64\n",[m
[32m+[m[32m      " 15  smoothness_se            569 non-null    float64\n",[m
[32m+[m[32m      " 16  compactness_se           569 non-null    float64\n",[m
[32m+[m[32m      " 17  concavity_se             569 non-null    float64\n",[m
[32m+[m[32m      " 18  concave points_se        569 non-null    float64\n",[m
[32m+[m[32m      " 19  symmetry_se              569 non-null    float64\n",[m
[32m+[m[32m      " 20  fractal_dimension_se     569 non-null    float64\n",[m
[32m+[m[32m      " 21  radius_worst             569 non-null    float64\n",[m
[32m+[m[32m      " 22  texture_worst            569 non-null    float64\n",[m
[32m+[m[32m      " 23  perimeter_worst          569 non-null    float64\n",[m
[32m+[m[32m      " 24  area_worst               569 non-null    float64\n",[m
[32m+[m[32m      " 25  smoothness_worst         569 non-null    float64\n",[m
[32m+[m[32m      " 26  compactness_worst        569 non-null    float64\n",[m
[32m+[m[32m      " 27  concavity_worst          569 non-null    float64\n",[m
[32m+[m[32m      " 28  concave points_worst     569 non-null    float64\n",[m
[32m+[m[32m      " 29  symmetry_worst           569 non-null    float64\n",[m
[32m+[m[32m      " 30  fractal_dimension_worst  569 non-null    float64\n",[m
[32m+[m[32m      " 31  Unnamed: 32              0 non-null      float64\n",[m
[32m+[m[32m      "dtypes: float64(32)\n",[m
[32m+[m[32m      "memory usage: 142.4 KB\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "df.info()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 10,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "df = df.drop(columns=['Unnamed: 32'], errors='ignore')\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 298,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Remaining Columns:\n",[m
[32m+[m[32m      "Index(['target', 'radius_mean', 'texture_mean', 'perimeter_mean', 'area_mean',\n",[m
[32m+[m[32m      "       'smoothness_mean', 'compactness_mean', 'concavity_mean',\n",[m
[32m+[m[32m      "       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean',\n",[m
[32m+[m[32m      "       'radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se',\n",[m
[32m+[m[32m      "       'compactness_se', 'concavity_se', 'concave points_se', 'symmetry_se',\n",[m
[32m+[m[32m      "       'fractal_dimension_se', 'radius_worst', 'texture_worst',\n",[m
[32m+[m[32m      "       'perimeter_worst', 'area_worst', 'smoothness_worst',\n",[m
[32m+[m[32m      "       'compactness_worst', 'concavity_worst', 'concave points_worst',\n",[m
[32m+[m[32m      "       'symmetry_worst', 'fractal_dimension_worst'],\n",[m
[32m+[m[32m      "      dtype='object')\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "print(\"Remaining Columns:\")\n",[m
[32m+[m[32m    "print(df.columns)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 302,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Missing Values Per Column:\n",[m
[32m+[m[32m      "target                     0\n",[m
[32m+[m[32m      "radius_mean                0\n",[m
[32m+[m[32m      "texture_mean               0\n",[m
[32m+[m[32m      "perimeter_mean             0\n",[m
[32m+[m[32m      "area_mean                  0\n",[m
[32m+[m[32m      "smoothness_mean            0\n",[m
[32m+[m[32m      "compactness_mean           0\n",[m
[32m+[m[32m      "concavity_mean             0\n",[m
[32m+[m[32m      "concave points_mean        0\n",[m
[32m+[m[32m      "symmetry_mean              0\n",[m
[32m+[m[32m      "fractal_dimension_mean     0\n",[m
[32m+[m[32m      "radius_se                  0\n",[m
[32m+[m[32m      "texture_se                 0\n",[m
[32m+[m[32m      "perimeter_se               0\n",[m
[32m+[m[32m      "area_se                    0\n",[m
[32m+[m[32m      "smoothness_se              0\n",[m
[32m+[m[32m      "compactness_se             0\n",[m
[32m+[m[32m      "concavity_se               0\n",[m
[32m+[m[32m      "concave points_se          0\n",[m
[32m+[m[32m      "symmetry_se                0\n",[m
[32m+[m[32m      "fractal_dimension_se       0\n",[m
[32m+[m[32m      "radius_worst               0\n",[m
[32m+[m[32m      "texture_worst              0\n",[m
[32m+[m[32m      "perimeter_worst            0\n",[m
[32m+[m[32m      "area_worst                 0\n",[m
[32m+[m[32m      "smoothness_worst           0\n",[m
[32m+[m[32m      "compactness_worst          0\n",[m
[32m+[m[32m      "concavity_worst            0\n",[m
[32m+[m[32m      "concave points_worst       0\n",[m
[32m+[m[32m      "symmetry_worst             0\n",[m
[32m+[m[32m      "fractal_dimension_worst    0\n",[m
[32m+[m[32m      "dtype: int64\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "print(\"Missing Values Per Column:\")\n",[m
[32m+[m[32m    "print(df.isnull().sum())"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 67,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "df = df.rename(columns={'diagnosis': 'target'})\n",[m
[32m+[m[32m    "df['target'] = df['target'].map({'M': 1, 'B': 0})\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 69,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "[nan]\n",[m
[32m+[m[32m      "   target  radius_mean  texture_mean  perimeter_mean  area_mean  \\\n",[m
[32m+[m[32m      "0     NaN        17.99         10.38          122.80     1001.0   \n",[m
[32m+[m[32m      "1     NaN        20.57         17.77          132.90     1326.0   \n",[m
[32m+[m[32m      "2     NaN        19.69         21.25          130.00     1203.0   \n",[m
[32m+[m[32m      "3     NaN        11.42         20.38           77.58      386.1   \n",[m
[32m+[m[32m      "4     NaN        20.29         14.34          135.10     1297.0   \n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "   smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n",[m
[32m+[m[32m      "0          0.11840           0.27760          0.3001              0.14710   \n",[m
[32m+[m[32m      "1          0.08474           0.07864          0.0869              0.07017   \n",[m
[32m+[m[32m      "2          0.10960           0.15990          0.1974              0.12790   \n",[m
[32m+[m[32m      "3          0.14250           0.28390          0.2414              0.10520   \n",[m
[32m+[m[32m      "4          0.10030           0.13280          0.1980              0.10430   \n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "   symmetry_mean  ...  radius_worst  texture_worst  perimeter_worst  \\\n",[m
[32m+[m[32m      "0         0.2419  ...         25.38          17.33           184.60   \n",[m
[32m+[m[32m      "1         0.1812  ...         24.99          23.41           158.80   \n",[m
[32m+[m[32m      "2         0.2069  ...         23.57          25.53           152.50   \n",[m
[32m+[m[32m      "3         0.2597  ...         14.91          26.50            98.87   \n",[m
[32m+[m[32m      "4         0.1809  ...         22.54          16.67           152.20   \n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "   area_worst  smoothness_worst  compactness_worst  concavity_worst  \\\n",[m
[32m+[m[32m      "0      2019.0            0.1622             0.6656           0.7119   \n",[m
[32m+[m[32m      "1      1956.0            0.1238             0.1866           0.2416   \n",[m
[32m+[m[32m      "2      1709.0            0.1444             0.4245           0.4504   \n",[m
[32m+[m[32m      "3       567.7            0.2098             0.8663           0.6869   \n",[m
[32m+[m[32m      "4      1575.0            0.1374             0.2050           0.4000   \n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "   concave points_worst  symmetry_worst  fractal_dimension_worst  \n",[m
[32m+[m[32m      "0                0.2654          0.4601                  0.11890  \n",[m
[32m+[m[32m      "1                0.1860          0.2750                  0.08902  \n",[m
[32m+[m[32m      "2                0.2430          0.3613                  0.08758  \n",[m
[32m+[m[32m      "3                0.2575          0.6638                  0.17300  \n",[m
[32m+[m[32m      "4                0.1625          0.2364                  0.07678  \n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "[5 rows x 31 columns]\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "print(df['target'].unique())\n",[m
[32m+[m[32m    "print(df.head())"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 97,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "NaNs in target before filling: 0\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "print(\"NaNs in target before filling:\", df['target'].isnull().sum())\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 129,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Remaining rows after dropping NaNs in target: 0\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "df = df.dropna(subset=['target'])\n",[m
[32m+[m[32m    "print(\"Remaining rows after dropping NaNs in target:\", df.shape[0])\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 115,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "<class 'pandas.core.frame.DataFrame'>\n",[m
[32m+[m[32m      "Index: 0 entries\n",[m
[32m+[m[32m      "Data columns (total 31 columns):\n",[m
[32m+[m[32m      " #   Column                   Non-Null Count  Dtype  \n",[m
[32m+[m[32m      "---  ------                   --------------  -----  \n",[m
[32m+[m[32m      " 0   target                   0 non-null      int64  \n",[m
[32m+[m[32m      " 1   radius_mean              0 non-null      float64\n",[m
[32m+[m[32m      " 2   texture_mean             0 non-null      float64\n",[m
[32m+[m[32m      " 3   perimeter_mean           0 non-null      float64\n",[m
[32m+[m[32m      " 4   area_mean                0 non-null      float64\n",[m
[32m+[m[32m      " 5   smoothness_mean          0 non-null      float64\n",[m
[32m+[m[32m      " 6   compactness_mean         0 non-null      float64\n",[m
[32m+[m[32m      " 7   concavity_mean           0 non-null      float64\n",[m
[32m+[m[32m      " 8   concave points_mean      0 non-null      float64\n",[m
[32m+[m[32m      " 9   symmetry_mean            0 non-null      float64\n",[m
[32m+[m[32m      " 10  fractal_dimension_mean   0 non-null      float64\n",[m
[32m+[m[32m      " 11  radius_se                0 non-null      float64\n",[m
[32m+[m[32m      " 12  texture_se               0 non-null      float64\n",[m
[32m+[m[32m      " 13  perimeter_se             0 non-null      float64\n",[m
[32m+[m[32m      " 14  area_se                  0 non-null      float64\n",[m
[32m+[m[32m      " 15  smoothness_se            0 non-null      float64\n",[m
[32m+[m[32m      " 16  compactness_se           0 non-null      float64\n",[m
[32m+[m[32m      " 17  concavity_se             0 non-null      float64\n",[m
[32m+[m[32m      " 18  concave points_se        0 non-null      float64\n",[m
[32m+[m[32m      " 19  symmetry_se              0 non-null      float64\n",[m
[32m+[m[32m      " 20  fractal_dimension_se     0 non-null      float64\n",[m
[32m+[m[32m      " 21  radius_worst             0 non-null      float64\n",[m
[32m+[m[32m      " 22  texture_worst            0 non-null      float64\n",[m
[32m+[m[32m      " 23  perimeter_worst          0 non-null      float64\n",[m
[32m+[m[32m      " 24  area_worst               0 non-null      float64\n",[m
[32m+[m[32m      " 25  smoothness_worst         0 non-null      float64\n",[m
[32m+[m[32m      " 26  compactness_worst        0 non-null      float64\n",[m
[32m+[m[32m      " 27  concavity_worst          0 non-null      float64\n",[m
[32m+[m[32m      " 28  concave points_worst     0 non-null      float64\n",[m
[32m+[m[32m      " 29  symmetry_worst           0 non-null      float64\n",[m
[32m+[m[32m      " 30  fractal_dimension_worst  0 non-null      float64\n",[m
[32m+[m[32m      "dtypes: float64(30), int64(1)\n",[m
[32m+[m[32m      "memory usage: 0.0 bytes\n",[m
[32m+[m[32m      "None\n",[m
[32m+[m[32m      "Remaining rows after filling NaNs: 0\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "print(df.info())\n",[m
[32m+[m[32m    "print(\"Remaining rows after filling NaNs:\", df.shape[0])"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "GosA2UJXYFtu"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 3. Logistic Regression Model\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#### 3.1 Use Logistic Regression\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Use Logistic Regression and examine accuracy score, confusion matrix, classification report for that model."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 141,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "df_features = pd.DataFrame({\n",[m
[32m+[m[32m    "    'radius_mean': [17.99, 20.57, 19.69, 11.42, 20.29],\n",[m
[32m+[m[32m    "    'texture_mean': [10.38, 17.77, 21.25, 20.38, 14.34],\n",[m
[32m+[m[32m    "    # Add other feature columns as needed\n",[m
[32m+[m[32m    "})"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 137,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "df_target = pd.DataFrame({\n",[m
[32m+[m[32m    "    'target': [1, 0, 1, 0, 1]\n",[m
[32m+[m[32m    "})"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 143,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "X = df_features\n",[m
[32m+[m[32m    "y = df_target['target']\n",[m
[32m+[m[32m    "           \n",[m
[32m+[m[32m    "\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 145,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "0\n",[m
[32m+[m[32m      "[]\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "print(df['target'].isnull().sum())\n",[m
[32m+[m[32m    "print(df['target'].unique())"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 147,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "test_size = 0.3  # 30% of the data for testing, 70% for training\n",[m
[32m+[m[32m    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=42)\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 149,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Training features shape: (3, 2)\n",[m
[32m+[m[32m      "Testing features shape: (2, 2)\n",[m
[32m+[m[32m      "Training target shape: (3,)\n",[m
[32m+[m[32m      "Testing target shape: (2,)\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "print(\"Training features shape:\", X_train.shape)\n",[m
[32m+[m[32m    "print(\"Testing features shape:\", X_test.shape)\n",[m
[32m+[m[32m    "print(\"Training target shape:\", y_train.shape)\n",[m
[32m+[m[32m    "print(\"Testing target shape:\", y_test.shape)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 151,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "from sklearn.preprocessing import StandardScaler"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 153,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "scaler = StandardScaler()\n",[m
[32m+[m[32m    "X_train_scaled = scaler.fit_transform(X_train)\n",[m
[32m+[m[32m    "X_test_scaled = scaler.transform(X_test)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 155,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/html": [[m
[32m+[m[32m       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=1000)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=1000)</pre></div></div></div></div></div>"[m
[32m+[m[32m      ],[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "LogisticRegression(max_iter=1000)"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 155,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "model = LogisticRegression(max_iter=1000)\n",[m
[32m+[m[32m    "model.fit(X_train_scaled, y_train)\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 157,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stderr",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "C:\\Users\\gillb\\anaconda3\\Lib\\site-packages\\sklearn\\base.py:432: UserWarning: X has feature names, but LogisticRegression was fitted without feature names\n",[m
[32m+[m[32m      "  warnings.warn(\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "y_pred = model.predict(X_test)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 159,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Accuracy: 0.50\n",[m
[32m+[m[32m      "Confusion Matrix:\n",[m
[32m+[m[32m      "[[0 1]\n",[m
[32m+[m[32m      " [0 1]]\n",[m
[32m+[m[32m      "Classification Report:\n",[m
[32m+[m[32m      "              precision    recall  f1-score   support\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "           0       0.00      0.00      0.00         1\n",[m
[32m+[m[32m      "           1       0.50      1.00      0.67         1\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "    accuracy                           0.50         2\n",[m
[32m+[m[32m      "   macro avg       0.25      0.50      0.33         2\n",[m
[32m+[m[32m      "weighted avg       0.25      0.50      0.33         2\n",[m
[32m+[m[32m      "\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stderr",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "C:\\Users\\gillb\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",[m
[32m+[m[32m      "  _warn_prf(average, modifier, msg_start, len(result))\n",[m
[32m+[m[32m      "C:\\Users\\gillb\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",[m
[32m+[m[32m      "  _warn_prf(average, modifier, msg_start, len(result))\n",[m
[32m+[m[32m      "C:\\Users\\gillb\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",[m
[32m+[m[32m      "  _warn_prf(average, modifier, msg_start, len(result))\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "accuracy = accuracy_score(y_test, y_pred)\n",[m
[32m+[m[32m    "conf_matrix = confusion_matrix(y_test, y_pred)\n",[m
[32m+[m[32m    "class_report = classification_report(y_test, y_pred)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "print(f'Accuracy: {accuracy:.2f}')\n",[m
[32m+[m[32m    "print('Confusion Matrix:')\n",[m
[32m+[m[32m    "print(conf_matrix)\n",[m
[32m+[m[32m    "print('Classification Report:')\n",[m
[32m+[m[32m    "print(class_report)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "GCYINgENYFtw"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 3.2 Calculate the predicted labels and predicted probabilities on the test set."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 161,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "ExecuteTime": {[m
[32m+[m[32m     "end_time": "2019-05-06T03:07:34.783478Z",[m
[32m+[m[32m     "start_time": "2019-05-06T03:07:34.777492Z"[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "sHo6u5jMYFty"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stderr",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "C:\\Users\\gillb\\anaconda3\\Lib\\site-packages\\sklearn\\base.py:432: UserWarning: X has feature names, but LogisticRegression was fitted without feature names\n",[m
[32m+[m[32m      "  warnings.warn(\n",[m
[32m+[m[32m      "C:\\Users\\gillb\\anaconda3\\Lib\\site-packages\\sklearn\\base.py:432: UserWarning: X has feature names, but LogisticRegression was fitted without feature names\n",[m
[32m+[m[32m      "  warnings.warn(\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# predict test class:\n",[m
[32m+[m[32m    "y_pred = model.predict(X_test)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# predicted test probability:\n",[m
[32m+[m[32m    "y_prob = model.predict_proba(X_test)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 163,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "   Actual  Predicted  Probability_of_Class_0  Probability_of_Class_1\n",[m
[32m+[m[32m      "0       0          1                0.000007                0.999993\n",[m
[32m+[m[32m      "1       1          1                0.000003                0.999997\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "predictions_df = pd.DataFrame({\n",[m
[32m+[m[32m    "    'Actual': y_test.reset_index(drop=True),  \n",[m
[32m+[m[32m    "    'Predicted': y_pred,\n",[m
[32m+[m[32m    "    'Probability_of_Class_0': y_prob[:, 0],  # Probability of class 0\n",[m
[32m+[m[32m    "    'Probability_of_Class_1': y_prob[:, 1]   # Probability of class 1\n",[m
[32m+[m[32m    "})\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "print(predictions_df.head())"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "aqOb0ZeoYFt3"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 3.3 Create the confusion matrix for your classifier's performance on the test set.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Convert confusion_matrix to a dataframe.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    columns=['predicted_healthy', 'predicted_cancer']\n",[m
[32m+[m[32m    "    index=['is_healthy', 'is_cancer']"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 165,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "y_test = [0, 1, 0, 1, 0, 1, 0, 1]  \n",[m
[32m+[m[32m    "y_pred = [0, 1, 0, 0, 0, 1, 1, 1]  \n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 167,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "ExecuteTime": {[m
[32m+[m[32m     "end_time": "2019-05-06T06:11:46.809561Z",[m
[32m+[m[32m     "start_time": "2019-05-06T06:11:46.805571Z"[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "qQQ-xS0pYFt5"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# ANSWER\n",[m
[32m+[m[32m    "cm = confusion_matrix(y_test, y_pred)\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 169,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cm_df = pd.DataFrame(cm, \n",[m
[32m+[m[32m    "                     index=['is_healthy', 'is_cancer'], \n",[m
[32m+[m[32m    "                     columns=['predicted_healthy', 'predicted_cancer'])\n",[m
[32m+[m[32m    "\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 171,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "            predicted_healthy  predicted_cancer\n",[m
[32m+[m[32m      "is_healthy                  3                 1\n",[m
[32m+[m[32m      "is_cancer                   1                 3\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "print(cm_df)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "ExecuteTime": {[m
[32m+[m[32m     "end_time": "2019-05-06T03:13:53.991939Z",[m
[32m+[m[32m     "start_time": "2019-05-06T03:13:53.988945Z"[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "ItAGpq10YFt9"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 3.4 Calculate Accuracy\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "**Classification Accuracy:** Overall, how often is the classifier correct?\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    (TP + TN) / float(TP + TN + FP + FN)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 173,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "TN = cm_df.loc['is_healthy', 'predicted_healthy']\n",[m
[32m+[m[32m    "TP = cm_df.loc['is_cancer', 'predicted_cancer']\n",[m
[32m+[m[32m    "FP = cm_df.loc['is_healthy', 'predicted_cancer']\n",[m
[32m+[m[32m    "FN = cm_df.loc['is_cancer', 'predicted_healthy']\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 177,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Confusion Matrix DataFrame:\n",[m
[32m+[m[32m      "             predicted_healthy  predicted_cancer\n",[m
[32m+[m[32m      "is_healthy                  3                 1\n",[m
[32m+[m[32m      "is_cancer                   1                 3\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Accuracy: 0.7500\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "print(\"Confusion Matrix DataFrame:\\n\", cm_df)\n",[m
[32m+[m[32m    "print(f\"\\nAccuracy: {accuracy:.4f}\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "ExecuteTime": {[m
[32m+[m[32m     "end_time": "2019-05-06T03:16:42.304954Z",[m
[32m+[m[32m     "start_time": "2019-05-06T03:16:42.294989Z"[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "XzYMnKx7YFuE"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 3.5 Calculate Classification Error\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "**Classification Error:** Overall, how often is the classifier incorrect?\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Also known as \"Misclassification Rate\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    (FP + FN) / float(TP + TN + FP + FN)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 179,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "classification_error = (FP + FN) / float(TP + TN + FP + FN)\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 181,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Confusion Matrix DataFrame:\n",[m
[32m+[m[32m      "             predicted_healthy  predicted_cancer\n",[m
[32m+[m[32m      "is_healthy                  3                 1\n",[m
[32m+[m[32m      "is_cancer                   1                 3\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Classification Error: 0.2500\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "print(\"Confusion Matrix DataFrame:\\n\", cm_df)\n",[m
[32m+[m[32m    "print(f\"\\nClassification Error: {classification_error:.4f}\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "ExecuteTime": {[m
[32m+[m[32m     "end_time": "2019-05-06T03:19:14.164577Z",[m
[32m+[m[32m     "start_time": "2019-05-06T03:19:14.151614Z"[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "jRqYr1YKYFuK"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 3.6 Calculate Sensitivity\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "**Sensitivity:** When the actual value is positive, how often is the prediction correct?\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Something we want to maximize\n",[m
[32m+[m[32m    "How \"sensitive\" is the classifier to detecting positive instances?\n",[m
[32m+[m[32m    "- Also known as \"True Positive Rate\" or \"Recall\"\n",[m
[32m+[m[32m    "- TP / all positive\n",[m
[32m+[m[32m    "    - all positive = TP + FN\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    sensitivity = TP / float(FN + TP)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 183,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "sensitivity = TP / float(TP + FN)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 185,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Confusion Matrix DataFrame:\n",[m
[32m+[m[32m      "             predicted_healthy  predicted_cancer\n",[m
[32m+[m[32m      "is_healthy                  3                 1\n",[m
[32m+[m[32m      "is_cancer                   1                 3\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Sensitivity: 0.7500\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "print(\"Confusion Matrix DataFrame:\\n\", cm_df)\n",[m
[32m+[m[32m    "print(f\"\\nSensitivity: {sensitivity:.4f}\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "SZ67_HJXYFuR"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 3.7 Calculate Specificity\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "**Specificity:** When the actual value is negative, how often is the prediction correct?\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "- Something we want to maximize. How \"specific\" (or \"selective\") is the classifier in predicting positive instances?\n",[m
[32m+[m[32m    "- TN / all negative\n",[m
[32m+[m[32m    "    - all negative = TN + FP\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    specificity = TN / (TN + FP)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 187,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "specificity = TN / float(TN + FP)\n",[m
[32m+[m[32m    "\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 189,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Confusion Matrix DataFrame:\n",[m
[32m+[m[32m      "             predicted_healthy  predicted_cancer\n",[m
[32m+[m[32m      "is_healthy                  3                 1\n",[m
[32m+[m[32m      "is_cancer                   1                 3\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Specificity: 0.7500\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "print(\"Confusion Matrix DataFrame:\\n\", cm_df)\n",[m
[32m+[m[32m    "print(f\"\\nSpecificity: {specificity:.4f}\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "V0dsG6JsYFuY"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 3.8 Calculate False Positive Rate\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "**False Positive Rate:** When the actual value is negative, how often is the prediction incorrect?\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    false_positive_rate = FP / float(TN + FP)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 193,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "TN = cm_df.loc['is_healthy', 'predicted_healthy']\n",[m
[32m+[m[32m    "FP = cm_df.loc['is_healthy', 'predicted_cancer']\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 195,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "false_positive_rate = FP / float(TN + FP)\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 197,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Confusion Matrix DataFrame:\n",[m
[32m+[m[32m      "             predicted_healthy  predicted_cancer\n",[m
[32m+[m[32m      "is_healthy                  3                 1\n",[m
[32m+[m[32m      "is_cancer                   1                 3\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "False Positive Rate: 0.2500\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "print(\"Confusion Matrix DataFrame:\\n\", cm_df)\n",[m
[32m+[m[32m    "print(f\"\\nFalse Positive Rate: {false_positive_rate:.4f}\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "xwxBJ8BOYFue"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 3.9 Calculate Precision\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "**Precision:** When a positive value is predicted, how often is the prediction correct?\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "How \"precise\" is the classifier when predicting positive instances?\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    precision = TP / float(TP + FP)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 199,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "TP = cm_df.loc['is_cancer', 'predicted_cancer']\n",[m
[32m+[m[32m    "FP = cm_df.loc['is_healthy', 'predicted_cancer']\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 201,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "precision = TP / float(TP + FP)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 203,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Confusion Matrix DataFrame:\n",[m
[32m+[m[32m      "             predicted_healthy  predicted_cancer\n",[m
[32m+[m[32m      "is_healthy                  3                 1\n",[m
[32m+[m[32m      "is_cancer                   1                 3\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Precision: 0.7500\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "print(\"Confusion Matrix DataFrame:\\n\", cm_df)\n",[m
[32m+[m[32m    "print(f\"\\nPrecision: {precision:.4f}\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "ExecuteTime": {[m
[32m+[m[32m     "end_time": "2019-05-06T03:12:41.411567Z",[m
[32m+[m[32m     "start_time": "2019-05-06T03:12:41.408564Z"[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "UWfNwXoxYFul"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 3.10 Create a predicted test probability dataframe with column names 'class_0_pp','class_1_pp'"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 207,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "X = pd.DataFrame({\n",[m
[32m+[m[32m    "    'radius_mean': [17.99, 20.57, 19.69, 11.42, 20.29],\n",[m
[32m+[m[32m    "    'texture_mean': [10.38, 17.77, 21.25, 20.38, 14.34],\n",[m
[32m+[m[32m    "    # Add other feature columns as needed\n",[m
[32m+[m[32m    "})\n",[m
[32m+[m[32m    "y = pd.Series([1, 1, 1, 0, 1])"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 209,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 211,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/html": [[m
[32m+[m[32m       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"[m
[32m+[m[32m      ],[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "LogisticRegression()"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 211,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "model = LogisticRegression()\n",[m
[32m+[m[32m    "model.fit(X_train, y_train)\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 213,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "y_prob = model.predict_proba(X_test)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 215,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "   class_0_pp  class_1_pp\n",[m
[32m+[m[32m      "0    0.015652    0.984348\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "predicted_prob_df = pd.DataFrame(y_prob, columns=['class_0_pp', 'class_1_pp'])\n",[m
[32m+[m[32m    "print(predicted_prob_df)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "lLXy7TrPYFus"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 3.11 The Receiver operating characteristic (ROC) curve\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Plot the ROC curve for Class 1"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 217,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "ExecuteTime": {[m
[32m+[m[32m     "end_time": "2019-05-06T03:12:54.882640Z",[m
[32m+[m[32m     "start_time": "2019-05-06T03:12:54.878653Z"[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "HqZSGS2jYFut"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "from sklearn.metrics import roc_curve, auc\n",[m
[32m+[m[32m    "import numpy as np"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 221,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "y_prob = model.predict_proba(X_test)[:, 1]"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 223,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stderr",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "C:\\Users\\gillb\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_ranking.py:1020: UndefinedMetricWarning: No negative samples in y_true, false positive value should be meaningless\n",[m
[32m+[m[32m      "  warnings.warn(\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "fpr, tpr, _ = roc_curve(y_test, y_prob)\n",[m
[32m+[m[32m    "roc_auc = auc(fpr, tpr)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 225,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "image/png": "",[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<Figure size 640x480 with 1 Axes>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "display_data"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "plt.figure()\n",[m
[32m+[m[32m    "plt.plot(fpr, tpr, color='darkorange', lw=2, label='ROC curve (area = %0.2f)' % roc_auc)\n",[m
[32m+[m[32m    "plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n",[m
[32m+[m[32m    "plt.xlim([0.0, 1.0])\n",[m
[32m+[m[32m    "plt.ylim([0.0, 1.05])\n",[m
[32m+[m[32m    "plt.xlabel('False Positive Rate')\n",[m
[32m+[m[32m    "plt.ylabel('True Positive Rate')\n",[m
[32m+[m[32m    "plt.title('Receiver Operating Characteristic (ROC) Curve for Class 1')\n",[m
[32m+[m[32m    "plt.legend(loc='lower right')\n",[m
[32m+[m[32m    "plt.show()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "jqsZPA5kYFu4"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "**References**\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "[Breast Cancer Wisconsin (Diagnostic) Data Set](https://www.kaggle.com/uciml/breast-cancer-wisconsin-data/downloads/breast-cancer-wisconsin-data.zip/2)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "[Validation curves: plotting scores to evaluate models](https://scikit-learn.org/stable/modules/learning_curve.html#learning-curves)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "RERADKgNFq9T"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "---\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "---\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "> > > > > > > > > © 2024 Institute of Data\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "---\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "---\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "colab": {[m
[32m+[m[32m   "provenance": [][m
[32m+[m[32m  },[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Python 3 (ipykernel)",[m
[32m+[m[32m   "language": "python",[m
[32m+[m[32m   "name": "python3"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": {[m
[32m+[m[32m    "name": "ipython",[m
[32m+[m[32m    "version": 3[m
[32m+[m[32m   },[m
[32m+[m[32m   "file_extension": ".py",[m
[32m+[m[32m   "mimetype": "text/x-python",[m
[32m+[m[32m   "name": "python",[m
[32m+[m[32m   "nbconvert_exporter": "python",[m
[32m+[m[32m   "pygments_lexer": "ipython3",[m
[32m+[m[32m   "version": "3.11.7"[m
[32m+[m[32m  },[m
[32m+[m[32m  "varInspector": {[m
[32m+[m[32m   "cols": {[m
[32m+[m[32m    "lenName": 16,[m
[32m+[m[32m    "lenType": 16,[m
[32m+[m[32m    "lenVar": 40[m
[32m+[m[32m   },[m
[32m+[m[32m   "kernels_config": {[m
[32m+[m[32m    "python": {[m
[32m+[m[32m     "delete_cmd_postfix": "",[m
[32m+[m[32m     "delete_cmd_prefix": "del ",[m
[32m+[m[32m     "library": "var_list.py",[m
[32m+[m[32m     "varRefreshCmd": "print(var_dic_list())"[m
[32m+[m[32m    },[m
[32m+[m[32m    "r": {[m
[32m+[m[32m     "delete_cmd_postfix": ") ",[m
[32m+[m[32m     "delete_cmd_prefix": "rm(",[m
[32m+[m[32m     "library": "var_list.r",[m
[32m+[m[32m     "varRefreshCmd": "cat(var_dic_list()) "[m
[32m+[m[32m    }[m
[32m+[m[32m   },[m
[32m+[m[32m   "types_to_exclude": [[m
[32m+[m[32m    "module",[m
[32m+[m[32m    "function",[m
[32m+[m[32m    "builtin_function_or_method",[m
[32m+[m[32m    "instance",[m
[32m+[m[32m    "_Feature"[m
[32m+[m[32m   ],[m
[32m+[m[32m   "window_display": false[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 4[m
[32m+[m[32m}[m
[1mdiff --git a/IOD_Lab_5_3_1.ipynb b/IOD_Lab_5_3_1.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..91c1cae[m
[1m--- /dev/null[m
[1m+++ b/IOD_Lab_5_3_1.ipynb[m
[36m@@ -0,0 +1,1704 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "XebDJ3UnS3n3"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "<div>\n",[m
[32m+[m[32m    "<img src=https://www.institutedata.com/wp-content/uploads/2019/10/iod_h_tp_primary_c.svg width=\"300\">\n",[m
[32m+[m[32m    "</div>"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "e_-HjrL6S3n5"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Lab 5.3.1\n",[m
[32m+[m[32m    "# *Support Vector Machines*\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "SVMs use linear algebra to find an (n-1)-dimensional boundary that separates classes within an n-dimensional space. In practical terms, this technique provides a conceptually simple way to predict class membership from a set of features.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "The standard (linear) SVM is immediately applicable to linear classification problems. Furthermore, by applying transformations to the feature space it is possible to tackle nonlinear classification problems. These transforms are called *kernels*."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "azVVNUxHYKej"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 1. Load Data\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Features are computed from a digitized image of a fine needle aspirate (FNA) of a breast mass. They describe characteristics of the cell nuclei present in the image. n the 3-dimensional space is that described in: [K. P. Bennett and O. L. Mangasarian: \"Robust Linear Programming Discrimination of Two Linearly Inseparable Sets\", Optimization Methods and Software 1, 1992, 23-34].\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "This database is also available through the UW CS ftp server: ftp ftp.cs.wisc.edu cd math-prog/cpo-dataset/machine-learn/WDBC/\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Also can be found on UCI Machine Learning Repository: https://archive.ics.uci.edu/ml/datasets/Breast+Cancer+Wisconsin+%28Diagnostic%29\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Attribute Information:\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "1) ID number 2) Diagnosis (M = malignant, B = benign) 3-32)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Ten real-valued features are computed for each cell nucleus:\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "a) radius (mean of distances from center to points on the perimeter) b) texture (standard deviation of gray-scale values) c) perimeter d) area e) smoothness (local variation in radius lengths) f) compactness (perimeter^2 / area - 1.0) g) concavity (severity of concave portions of the contour) h) concave points (number of concave portions of the contour) i) symmetry j) fractal dimension (\"coastline approximation\" - 1)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "The mean, standard error and \"worst\" or largest (mean of the three largest values) of these features were computed for each image, resulting in 30 features. For instance, field 3 is Mean Radius, field 13 is Radius SE, field 23 is Worst Radius.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "All feature values are recoded with four significant digits.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Missing attribute values: none\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Class distribution: 357 benign, 212 malignant"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 96,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "import pandas as pd"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 98,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "ExecuteTime": {[m
[32m+[m[32m     "end_time": "2019-05-09T05:13:16.458182Z",[m
[32m+[m[32m     "start_time": "2019-05-09T05:13:16.454244Z"[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "aICmn_7xYKek"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "breast_cancer_csv = 'breast-cancer-wisconsin-data.csv'\n",[m
[32m+[m[32m    "df = pd.read_csv(breast_cancer_csv)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "FPRqG96QYKen"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 2. EDA\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "- Explore dataset. Clean data (if required)\n",[m
[32m+[m[32m    "- Find features to predict class"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 5,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/html": [[m
[32m+[m[32m       "<div>\n",[m
[32m+[m[32m       "<style scoped>\n",[m
[32m+[m[32m       "    .dataframe tbody tr th:only-of-type {\n",[m
[32m+[m[32m       "        vertical-align: middle;\n",[m
[32m+[m[32m       "    }\n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "    .dataframe tbody tr th {\n",[m
[32m+[m[32m       "        vertical-align: top;\n",[m
[32m+[m[32m       "    }\n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "    .dataframe thead th {\n",[m
[32m+[m[32m       "        text-align: right;\n",[m
[32m+[m[32m       "    }\n",[m
[32m+[m[32m       "</style>\n",[m
[32m+[m[32m       "<table border=\"1\" class=\"dataframe\">\n",[m
[32m+[m[32m       "  <thead>\n",[m
[32m+[m[32m       "    <tr style=\"text-align: right;\">\n",[m
[32m+[m[32m       "      <th></th>\n",[m
[32m+[m[32m       "      <th>id</th>\n",[m
[32m+[m[32m       "      <th>diagnosis</th>\n",[m
[32m+[m[32m       "      <th>radius_mean</th>\n",[m
[32m+[m[32m       "      <th>texture_mean</th>\n",[m
[32m+[m[32m       "      <th>perimeter_mean</th>\n",[m
[32m+[m[32m       "      <th>area_mean</th>\n",[m
[32m+[m[32m       "      <th>smoothness_mean</th>\n",[m
[32m+[m[32m       "      <th>compactness_mean</th>\n",[m
[32m+[m[32m       "      <th>concavity_mean</th>\n",[m
[32m+[m[32m       "      <th>concave points_mean</th>\n",[m
[32m+[m[32m       "      <th>...</th>\n",[m
[32m+[m[32m       "      <th>texture_worst</th>\n",[m
[32m+[m[32m       "      <th>perimeter_worst</th>\n",[m
[32m+[m[32m       "      <th>area_worst</th>\n",[m
[32m+[m[32m       "      <th>smoothness_worst</th>\n",[m
[32m+[m[32m       "      <th>compactness_worst</th>\n",[m
[32m+[m[32m       "      <th>concavity_worst</th>\n",[m
[32m+[m[32m       "      <th>concave points_worst</th>\n",[m
[32m+[m[32m       "      <th>symmetry_worst</th>\n",[m
[32m+[m[32m       "      <th>fractal_dimension_worst</th>\n",[m
[32m+[m[32m       "      <th>Unnamed: 32</th>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "  </thead>\n",[m
[32m+[m[32m       "  <tbody>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>0</th>\n",[m
[32m+[m[32m       "      <td>842302</td>\n",[m
[32m+[m[32m       "      <td>M</td>\n",[m
[32m+[m[32m       "      <td>17.99</td>\n",[m
[32m+[m[32m       "      <td>10.38</td>\n",[m
[32m+[m[32m       "      <td>122.80</td>\n",[m
[32m+[m[32m       "      <td>1001.0</td>\n",[m
[32m+[m[32m       "      <td>0.11840</td>\n",[m
[32m+[m[32m       "      <td>0.27760</td>\n",[m
[32m+[m[32m       "      <td>0.3001</td>\n",[m
[32m+[m[32m       "      <td>0.14710</td>\n",[m
[32m+[m[32m       "      <td>...</td>\n",[m
[32m+[m[32m       "      <td>17.33</td>\n",[m
[32m+[m[32m       "      <td>184.60</td>\n",[m
[32m+[m[32m       "      <td>2019.0</td>\n",[m
[32m+[m[32m       "      <td>0.1622</td>\n",[m
[32m+[m[32m       "      <td>0.6656</td>\n",[m
[32m+[m[32m       "      <td>0.7119</td>\n",[m
[32m+[m[32m       "      <td>0.2654</td>\n",[m
[32m+[m[32m       "      <td>0.4601</td>\n",[m
[32m+[m[32m       "      <td>0.11890</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>1</th>\n",[m
[32m+[m[32m       "      <td>842517</td>\n",[m
[32m+[m[32m       "      <td>M</td>\n",[m
[32m+[m[32m       "      <td>20.57</td>\n",[m
[32m+[m[32m       "      <td>17.77</td>\n",[m
[32m+[m[32m       "      <td>132.90</td>\n",[m
[32m+[m[32m       "      <td>1326.0</td>\n",[m
[32m+[m[32m       "      <td>0.08474</td>\n",[m
[32m+[m[32m       "      <td>0.07864</td>\n",[m
[32m+[m[32m       "      <td>0.0869</td>\n",[m
[32m+[m[32m       "      <td>0.07017</td>\n",[m
[32m+[m[32m       "      <td>...</td>\n",[m
[32m+[m[32m       "      <td>23.41</td>\n",[m
[32m+[m[32m       "      <td>158.80</td>\n",[m
[32m+[m[32m       "      <td>1956.0</td>\n",[m
[32m+[m[32m       "      <td>0.1238</td>\n",[m
[32m+[m[32m       "      <td>0.1866</td>\n",[m
[32m+[m[32m       "      <td>0.2416</td>\n",[m
[32m+[m[32m       "      <td>0.1860</td>\n",[m
[32m+[m[32m       "      <td>0.2750</td>\n",[m
[32m+[m[32m       "      <td>0.08902</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>2</th>\n",[m
[32m+[m[32m       "      <td>84300903</td>\n",[m
[32m+[m[32m       "      <td>M</td>\n",[m
[32m+[m[32m       "      <td>19.69</td>\n",[m
[32m+[m[32m       "      <td>21.25</td>\n",[m
[32m+[m[32m       "      <td>130.00</td>\n",[m
[32m+[m[32m       "      <td>1203.0</td>\n",[m
[32m+[m[32m       "      <td>0.10960</td>\n",[m
[32m+[m[32m       "      <td>0.15990</td>\n",[m
[32m+[m[32m       "      <td>0.1974</td>\n",[m
[32m+[m[32m       "      <td>0.12790</td>\n",[m
[32m+[m[32m       "      <td>...</td>\n",[m
[32m+[m[32m       "      <td>25.53</td>\n",[m
[32m+[m[32m       "      <td>152.50</td>\n",[m
[32m+[m[32m       "      <td>1709.0</td>\n",[m
[32m+[m[32m       "      <td>0.1444</td>\n",[m
[32m+[m[32m       "      <td>0.4245</td>\n",[m
[32m+[m[32m       "      <td>0.4504</td>\n",[m
[32m+[m[32m       "      <td>0.2430</td>\n",[m
[32m+[m[32m       "      <td>0.3613</td>\n",[m
[32m+[m[32m       "      <td>0.08758</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>3</th>\n",[m
[32m+[m[32m       "      <td>84348301</td>\n",[m
[32m+[m[32m       "      <td>M</td>\n",[m
[32m+[m[32m       "      <td>11.42</td>\n",[m
[32m+[m[32m       "      <td>20.38</td>\n",[m
[32m+[m[32m       "      <td>77.58</td>\n",[m
[32m+[m[32m       "      <td>386.1</td>\n",[m
[32m+[m[32m       "      <td>0.14250</td>\n",[m
[32m+[m[32m       "      <td>0.28390</td>\n",[m
[32m+[m[32m       "      <td>0.2414</td>\n",[m
[32m+[m[32m       "      <td>0.10520</td>\n",[m
[32m+[m[32m       "      <td>...</td>\n",[m
[32m+[m[32m       "      <td>26.50</td>\n",[m
[32m+[m[32m       "      <td>98.87</td>\n",[m
[32m+[m[32m       "      <td>567.7</td>\n",[m
[32m+[m[32m       "      <td>0.2098</td>\n",[m
[32m+[m[32m       "      <td>0.8663</td>\n",[m
[32m+[m[32m       "      <td>0.6869</td>\n",[m
[32m+[m[32m       "      <td>0.2575</td>\n",[m
[32m+[m[32m       "      <td>0.6638</td>\n",[m
[32m+[m[32m       "      <td>0.17300</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>4</th>\n",[m
[32m+[m[32m       "      <td>84358402</td>\n",[m
[32m+[m[32m       "      <td>M</td>\n",[m
[32m+[m[32m       "      <td>20.29</td>\n",[m
[32m+[m[32m       "      <td>14.34</td>\n",[m
[32m+[m[32m       "      <td>135.10</td>\n",[m
[32m+[m[32m       "      <td>1297.0</td>\n",[m
[32m+[m[32m       "      <td>0.10030</td>\n",[m
[32m+[m[32m       "      <td>0.13280</td>\n",[m
[32m+[m[32m       "      <td>0.1980</td>\n",[m
[32m+[m[32m       "      <td>0.10430</td>\n",[m
[32m+[m[32m       "      <td>...</td>\n",[m
[32m+[m[32m       "      <td>16.67</td>\n",[m
[32m+[m[32m       "      <td>152.20</td>\n",[m
[32m+[m[32m       "      <td>1575.0</td>\n",[m
[32m+[m[32m       "      <td>0.1374</td>\n",[m
[32m+[m[32m       "      <td>0.2050</td>\n",[m
[32m+[m[32m       "      <td>0.4000</td>\n",[m
[32m+[m[32m       "      <td>0.1625</td>\n",[m
[32m+[m[32m       "      <td>0.2364</td>\n",[m
[32m+[m[32m       "      <td>0.07678</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "  </tbody>\n",[m
[32m+[m[32m       "</table>\n",[m
[32m+[m[32m       "<p>5 rows × 33 columns</p>\n",[m
[32m+[m[32m       "</div>"[m
[32m+[m[32m      ],[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "         id diagnosis  radius_mean  texture_mean  perimeter_mean  area_mean  \\\n",[m
[32m+[m[32m       "0    842302         M        17.99         10.38          122.80     1001.0   \n",[m
[32m+[m[32m       "1    842517         M        20.57         17.77          132.90     1326.0   \n",[m
[32m+[m[32m       "2  84300903         M        19.69         21.25          130.00     1203.0   \n",[m
[32m+[m[32m       "3  84348301         M        11.42         20.38           77.58      386.1   \n",[m
[32m+[m[32m       "4  84358402         M        20.29         14.34          135.10     1297.0   \n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "   smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n",[m
[32m+[m[32m       "0          0.11840           0.27760          0.3001              0.14710   \n",[m
[32m+[m[32m       "1          0.08474           0.07864          0.0869              0.07017   \n",[m
[32m+[m[32m       "2          0.10960           0.15990          0.1974              0.12790   \n",[m
[32m+[m[32m       "3          0.14250           0.28390          0.2414              0.10520   \n",[m
[32m+[m[32m       "4          0.10030           0.13280          0.1980              0.10430   \n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "   ...  texture_worst  perimeter_worst  area_worst  smoothness_worst  \\\n",[m
[32m+[m[32m       "0  ...          17.33           184.60      2019.0            0.1622   \n",[m
[32m+[m[32m       "1  ...          23.41           158.80      1956.0            0.1238   \n",[m
[32m+[m[32m       "2  ...          25.53           152.50      1709.0            0.1444   \n",[m
[32m+[m[32m       "3  ...          26.50            98.87       567.7            0.2098   \n",[m
[32m+[m[32m       "4  ...          16.67           152.20      1575.0            0.1374   \n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "   compactness_worst  concavity_worst  concave points_worst  symmetry_worst  \\\n",[m
[32m+[m[32m       "0             0.6656           0.7119                0.2654          0.4601   \n",[m
[32m+[m[32m       "1             0.1866           0.2416                0.1860          0.2750   \n",[m
[32m+[m[32m       "2             0.4245           0.4504                0.2430          0.3613   \n",[m
[32m+[m[32m       "3             0.8663           0.6869                0.2575          0.6638   \n",[m
[32m+[m[32m       "4             0.2050           0.4000                0.1625          0.2364   \n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "   fractal_dimension_worst  Unnamed: 32  \n",[m
[32m+[m[32m       "0                  0.11890          NaN  \n",[m
[32m+[m[32m       "1                  0.08902          NaN  \n",[m
[32m+[m[32m       "2                  0.08758          NaN  \n",[m
[32m+[m[32m       "3                  0.17300          NaN  \n",[m
[32m+[m[32m       "4                  0.07678          NaN  \n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "[5 rows x 33 columns]"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 5,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "df.head()\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 4,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<bound method DataFrame.info of            id diagnosis  radius_mean  texture_mean  perimeter_mean  area_mean  \\\n",[m
[32m+[m[32m       "0      842302         M        17.99         10.38          122.80     1001.0   \n",[m
[32m+[m[32m       "1      842517         M        20.57         17.77          132.90     1326.0   \n",[m
[32m+[m[32m       "2    84300903         M        19.69         21.25          130.00     1203.0   \n",[m
[32m+[m[32m       "3    84348301         M        11.42         20.38           77.58      386.1   \n",[m
[32m+[m[32m       "4    84358402         M        20.29         14.34          135.10     1297.0   \n",[m
[32m+[m[32m       "..        ...       ...          ...           ...             ...        ...   \n",[m
[32m+[m[32m       "564    926424         M        21.56         22.39          142.00     1479.0   \n",[m
[32m+[m[32m       "565    926682         M        20.13         28.25          131.20     1261.0   \n",[m
[32m+[m[32m       "566    926954         M        16.60         28.08          108.30      858.1   \n",[m
[32m+[m[32m       "567    927241         M        20.60         29.33          140.10     1265.0   \n",[m
[32m+[m[32m       "568     92751         B         7.76         24.54           47.92      181.0   \n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "     smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n",[m
[32m+[m[32m       "0            0.11840           0.27760         0.30010              0.14710   \n",[m
[32m+[m[32m       "1            0.08474           0.07864         0.08690              0.07017   \n",[m
[32m+[m[32m       "2            0.10960           0.15990         0.19740              0.12790   \n",[m
[32m+[m[32m       "3            0.14250           0.28390         0.24140              0.10520   \n",[m
[32m+[m[32m       "4            0.10030           0.13280         0.19800              0.10430   \n",[m
[32m+[m[32m       "..               ...               ...             ...                  ...   \n",[m
[32m+[m[32m       "564          0.11100           0.11590         0.24390              0.13890   \n",[m
[32m+[m[32m       "565          0.09780           0.10340         0.14400              0.09791   \n",[m
[32m+[m[32m       "566          0.08455           0.10230         0.09251              0.05302   \n",[m
[32m+[m[32m       "567          0.11780           0.27700         0.35140              0.15200   \n",[m
[32m+[m[32m       "568          0.05263           0.04362         0.00000              0.00000   \n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "     ...  texture_worst  perimeter_worst  area_worst  smoothness_worst  \\\n",[m
[32m+[m[32m       "0    ...          17.33           184.60      2019.0           0.16220   \n",[m
[32m+[m[32m       "1    ...          23.41           158.80      1956.0           0.12380   \n",[m
[32m+[m[32m       "2    ...          25.53           152.50      1709.0           0.14440   \n",[m
[32m+[m[32m       "3    ...          26.50            98.87       567.7           0.20980   \n",[m
[32m+[m[32m       "4    ...          16.67           152.20      1575.0           0.13740   \n",[m
[32m+[m[32m       "..   ...            ...              ...         ...               ...   \n",[m
[32m+[m[32m       "564  ...          26.40           166.10      2027.0           0.14100   \n",[m
[32m+[m[32m       "565  ...          38.25           155.00      1731.0           0.11660   \n",[m
[32m+[m[32m       "566  ...          34.12           126.70      1124.0           0.11390   \n",[m
[32m+[m[32m       "567  ...          39.42           184.60      1821.0           0.16500   \n",[m
[32m+[m[32m       "568  ...          30.37            59.16       268.6           0.08996   \n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "     compactness_worst  concavity_worst  concave points_worst  symmetry_worst  \\\n",[m
[32m+[m[32m       "0              0.66560           0.7119                0.2654          0.4601   \n",[m
[32m+[m[32m       "1              0.18660           0.2416                0.1860          0.2750   \n",[m
[32m+[m[32m       "2              0.42450           0.4504                0.2430          0.3613   \n",[m
[32m+[m[32m       "3              0.86630           0.6869                0.2575          0.6638   \n",[m
[32m+[m[32m       "4              0.20500           0.4000                0.1625          0.2364   \n",[m
[32m+[m[32m       "..                 ...              ...                   ...             ...   \n",[m
[32m+[m[32m       "564            0.21130           0.4107                0.2216          0.2060   \n",[m
[32m+[m[32m       "565            0.19220           0.3215                0.1628          0.2572   \n",[m
[32m+[m[32m       "566            0.30940           0.3403                0.1418          0.2218   \n",[m
[32m+[m[32m       "567            0.86810           0.9387                0.2650          0.4087   \n",[m
[32m+[m[32m       "568            0.06444           0.0000                0.0000          0.2871   \n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "     fractal_dimension_worst  Unnamed: 32  \n",[m
[32m+[m[32m       "0                    0.11890          NaN  \n",[m
[32m+[m[32m       "1                    0.08902          NaN  \n",[m
[32m+[m[32m       "2                    0.08758          NaN  \n",[m
[32m+[m[32m       "3                    0.17300          NaN  \n",[m
[32m+[m[32m       "4                    0.07678          NaN  \n",[m
[32m+[m[32m       "..                       ...          ...  \n",[m
[32m+[m[32m       "564                  0.07115          NaN  \n",[m
[32m+[m[32m       "565                  0.06637          NaN  \n",[m
[32m+[m[32m       "566                  0.07820          NaN  \n",[m
[32m+[m[32m       "567                  0.12400          NaN  \n",[m
[32m+[m[32m       "568                  0.07039          NaN  \n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "[569 rows x 33 columns]>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 4,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "df.info"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 100,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/html": [[m
[32m+[m[32m       "<div>\n",[m
[32m+[m[32m       "<style scoped>\n",[m
[32m+[m[32m       "    .dataframe tbody tr th:only-of-type {\n",[m
[32m+[m[32m       "        vertical-align: middle;\n",[m
[32m+[m[32m       "    }\n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "    .dataframe tbody tr th {\n",[m
[32m+[m[32m       "        vertical-align: top;\n",[m
[32m+[m[32m       "    }\n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "    .dataframe thead th {\n",[m
[32m+[m[32m       "        text-align: right;\n",[m
[32m+[m[32m       "    }\n",[m
[32m+[m[32m       "</style>\n",[m
[32m+[m[32m       "<table border=\"1\" class=\"dataframe\">\n",[m
[32m+[m[32m       "  <thead>\n",[m
[32m+[m[32m       "    <tr style=\"text-align: right;\">\n",[m
[32m+[m[32m       "      <th></th>\n",[m
[32m+[m[32m       "      <th>id</th>\n",[m
[32m+[m[32m       "      <th>radius_mean</th>\n",[m
[32m+[m[32m       "      <th>texture_mean</th>\n",[m
[32m+[m[32m       "      <th>perimeter_mean</th>\n",[m
[32m+[m[32m       "      <th>area_mean</th>\n",[m
[32m+[m[32m       "      <th>smoothness_mean</th>\n",[m
[32m+[m[32m       "      <th>compactness_mean</th>\n",[m
[32m+[m[32m       "      <th>concavity_mean</th>\n",[m
[32m+[m[32m       "      <th>concave points_mean</th>\n",[m
[32m+[m[32m       "      <th>symmetry_mean</th>\n",[m
[32m+[m[32m       "      <th>...</th>\n",[m
[32m+[m[32m       "      <th>texture_worst</th>\n",[m
[32m+[m[32m       "      <th>perimeter_worst</th>\n",[m
[32m+[m[32m       "      <th>area_worst</th>\n",[m
[32m+[m[32m       "      <th>smoothness_worst</th>\n",[m
[32m+[m[32m       "      <th>compactness_worst</th>\n",[m
[32m+[m[32m       "      <th>concavity_worst</th>\n",[m
[32m+[m[32m       "      <th>concave points_worst</th>\n",[m
[32m+[m[32m       "      <th>symmetry_worst</th>\n",[m
[32m+[m[32m       "      <th>fractal_dimension_worst</th>\n",[m
[32m+[m[32m       "      <th>Unnamed: 32</th>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "  </thead>\n",[m
[32m+[m[32m       "  <tbody>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>count</th>\n",[m
[32m+[m[32m       "      <td>5.690000e+02</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>...</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>569.000000</td>\n",[m
[32m+[m[32m       "      <td>0.0</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>mean</th>\n",[m
[32m+[m[32m       "      <td>3.037183e+07</td>\n",[m
[32m+[m[32m       "      <td>14.127292</td>\n",[m
[32m+[m[32m       "      <td>19.289649</td>\n",[m
[32m+[m[32m       "      <td>91.969033</td>\n",[m
[32m+[m[32m       "      <td>654.889104</td>\n",[m
[32m+[m[32m       "      <td>0.096360</td>\n",[m
[32m+[m[32m       "      <td>0.104341</td>\n",[m
[32m+[m[32m       "      <td>0.088799</td>\n",[m
[32m+[m[32m       "      <td>0.048919</td>\n",[m
[32m+[m[32m       "      <td>0.181162</td>\n",[m
[32m+[m[32m       "      <td>...</td>\n",[m
[32m+[m[32m       "      <td>25.677223</td>\n",[m
[32m+[m[32m       "      <td>107.261213</td>\n",[m
[32m+[m[32m       "      <td>880.583128</td>\n",[m
[32m+[m[32m       "      <td>0.132369</td>\n",[m
[32m+[m[32m       "      <td>0.254265</td>\n",[m
[32m+[m[32m       "      <td>0.272188</td>\n",[m
[32m+[m[32m       "      <td>0.114606</td>\n",[m
[32m+[m[32m       "      <td>0.290076</td>\n",[m
[32m+[m[32m       "      <td>0.083946</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>std</th>\n",[m
[32m+[m[32m       "      <td>1.250206e+08</td>\n",[m
[32m+[m[32m       "      <td>3.524049</td>\n",[m
[32m+[m[32m       "      <td>4.301036</td>\n",[m
[32m+[m[32m       "      <td>24.298981</td>\n",[m
[32m+[m[32m       "      <td>351.914129</td>\n",[m
[32m+[m[32m       "      <td>0.014064</td>\n",[m
[32m+[m[32m       "      <td>0.052813</td>\n",[m
[32m+[m[32m       "      <td>0.079720</td>\n",[m
[32m+[m[32m       "      <td>0.038803</td>\n",[m
[32m+[m[32m       "      <td>0.027414</td>\n",[m
[32m+[m[32m       "      <td>...</td>\n",[m
[32m+[m[32m       "      <td>6.146258</td>\n",[m
[32m+[m[32m       "      <td>33.602542</td>\n",[m
[32m+[m[32m       "      <td>569.356993</td>\n",[m
[32m+[m[32m       "      <td>0.022832</td>\n",[m
[32m+[m[32m       "      <td>0.157336</td>\n",[m
[32m+[m[32m       "      <td>0.208624</td>\n",[m
[32m+[m[32m       "      <td>0.065732</td>\n",[m
[32m+[m[32m       "      <td>0.061867</td>\n",[m
[32m+[m[32m       "      <td>0.018061</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>min</th>\n",[m
[32m+[m[32m       "      <td>8.670000e+03</td>\n",[m
[32m+[m[32m       "      <td>6.981000</td>\n",[m
[32m+[m[32m       "      <td>9.710000</td>\n",[m
[32m+[m[32m       "      <td>43.790000</td>\n",[m
[32m+[m[32m       "      <td>143.500000</td>\n",[m
[32m+[m[32m       "      <td>0.052630</td>\n",[m
[32m+[m[32m       "      <td>0.019380</td>\n",[m
[32m+[m[32m       "      <td>0.000000</td>\n",[m
[32m+[m[32m       "      <td>0.000000</td>\n",[m
[32m+[m[32m       "      <td>0.106000</td>\n",[m
[32m+[m[32m       "      <td>...</td>\n",[m
[32m+[m[32m       "      <td>12.020000</td>\n",[m
[32m+[m[32m       "      <td>50.410000</td>\n",[m
[32m+[m[32m       "      <td>185.200000</td>\n",[m
[32m+[m[32m       "      <td>0.071170</td>\n",[m
[32m+[m[32m       "      <td>0.027290</td>\n",[m
[32m+[m[32m       "      <td>0.000000</td>\n",[m
[32m+[m[32m       "      <td>0.000000</td>\n",[m
[32m+[m[32m       "      <td>0.156500</td>\n",[m
[32m+[m[32m       "      <td>0.055040</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>25%</th>\n",[m
[32m+[m[32m       "      <td>8.692180e+05</td>\n",[m
[32m+[m[32m       "      <td>11.700000</td>\n",[m
[32m+[m[32m       "      <td>16.170000</td>\n",[m
[32m+[m[32m       "      <td>75.170000</td>\n",[m
[32m+[m[32m       "      <td>420.300000</td>\n",[m
[32m+[m[32m       "      <td>0.086370</td>\n",[m
[32m+[m[32m       "      <td>0.064920</td>\n",[m
[32m+[m[32m       "      <td>0.029560</td>\n",[m
[32m+[m[32m       "      <td>0.020310</td>\n",[m
[32m+[m[32m       "      <td>0.161900</td>\n",[m
[32m+[m[32m       "      <td>...</td>\n",[m
[32m+[m[32m       "      <td>21.080000</td>\n",[m
[32m+[m[32m       "      <td>84.110000</td>\n",[m
[32m+[m[32m       "      <td>515.300000</td>\n",[m
[32m+[m[32m       "      <td>0.116600</td>\n",[m
[32m+[m[32m       "      <td>0.147200</td>\n",[m
[32m+[m[32m       "      <td>0.114500</td>\n",[m
[32m+[m[32m       "      <td>0.064930</td>\n",[m
[32m+[m[32m       "      <td>0.250400</td>\n",[m
[32m+[m[32m       "      <td>0.071460</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>50%</th>\n",[m
[32m+[m[32m       "      <td>9.060240e+05</td>\n",[m
[32m+[m[32m       "      <td>13.370000</td>\n",[m
[32m+[m[32m       "      <td>18.840000</td>\n",[m
[32m+[m[32m       "      <td>86.240000</td>\n",[m
[32m+[m[32m       "      <td>551.100000</td>\n",[m
[32m+[m[32m       "      <td>0.095870</td>\n",[m
[32m+[m[32m       "      <td>0.092630</td>\n",[m
[32m+[m[32m       "      <td>0.061540</td>\n",[m
[32m+[m[32m       "      <td>0.033500</td>\n",[m
[32m+[m[32m       "      <td>0.179200</td>\n",[m
[32m+[m[32m       "      <td>...</td>\n",[m
[32m+[m[32m       "      <td>25.410000</td>\n",[m
[32m+[m[32m       "      <td>97.660000</td>\n",[m
[32m+[m[32m       "      <td>686.500000</td>\n",[m
[32m+[m[32m       "      <td>0.131300</td>\n",[m
[32m+[m[32m       "      <td>0.211900</td>\n",[m
[32m+[m[32m       "      <td>0.226700</td>\n",[m
[32m+[m[32m       "      <td>0.099930</td>\n",[m
[32m+[m[32m       "      <td>0.282200</td>\n",[m
[32m+[m[32m       "      <td>0.080040</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>75%</th>\n",[m
[32m+[m[32m       "      <td>8.813129e+06</td>\n",[m
[32m+[m[32m       "      <td>15.780000</td>\n",[m
[32m+[m[32m       "      <td>21.800000</td>\n",[m
[32m+[m[32m       "      <td>104.100000</td>\n",[m
[32m+[m[32m       "      <td>782.700000</td>\n",[m
[32m+[m[32m       "      <td>0.105300</td>\n",[m
[32m+[m[32m       "      <td>0.130400</td>\n",[m
[32m+[m[32m       "      <td>0.130700</td>\n",[m
[32m+[m[32m       "      <td>0.074000</td>\n",[m
[32m+[m[32m       "      <td>0.195700</td>\n",[m
[32m+[m[32m       "      <td>...</td>\n",[m
[32m+[m[32m       "      <td>29.720000</td>\n",[m
[32m+[m[32m       "      <td>125.400000</td>\n",[m
[32m+[m[32m       "      <td>1084.000000</td>\n",[m
[32m+[m[32m       "      <td>0.146000</td>\n",[m
[32m+[m[32m       "      <td>0.339100</td>\n",[m
[32m+[m[32m       "      <td>0.382900</td>\n",[m
[32m+[m[32m       "      <td>0.161400</td>\n",[m
[32m+[m[32m       "      <td>0.317900</td>\n",[m
[32m+[m[32m       "      <td>0.092080</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "    <tr>\n",[m
[32m+[m[32m       "      <th>max</th>\n",[m
[32m+[m[32m       "      <td>9.113205e+08</td>\n",[m
[32m+[m[32m       "      <td>28.110000</td>\n",[m
[32m+[m[32m       "      <td>39.280000</td>\n",[m
[32m+[m[32m       "      <td>188.500000</td>\n",[m
[32m+[m[32m       "      <td>2501.000000</td>\n",[m
[32m+[m[32m       "      <td>0.163400</td>\n",[m
[32m+[m[32m       "      <td>0.345400</td>\n",[m
[32m+[m[32m       "      <td>0.426800</td>\n",[m
[32m+[m[32m       "      <td>0.201200</td>\n",[m
[32m+[m[32m       "      <td>0.304000</td>\n",[m
[32m+[m[32m       "      <td>...</td>\n",[m
[32m+[m[32m       "      <td>49.540000</td>\n",[m
[32m+[m[32m       "      <td>251.200000</td>\n",[m
[32m+[m[32m       "      <td>4254.000000</td>\n",[m
[32m+[m[32m       "      <td>0.222600</td>\n",[m
[32m+[m[32m       "      <td>1.058000</td>\n",[m
[32m+[m[32m       "      <td>1.252000</td>\n",[m
[32m+[m[32m       "      <td>0.291000</td>\n",[m
[32m+[m[32m       "      <td>0.663800</td>\n",[m
[32m+[m[32m       "      <td>0.207500</td>\n",[m
[32m+[m[32m       "      <td>NaN</td>\n",[m
[32m+[m[32m       "    </tr>\n",[m
[32m+[m[32m       "  </tbody>\n",[m
[32m+[m[32m       "</table>\n",[m
[32m+[m[32m       "<p>8 rows × 32 columns</p>\n",[m
[32m+[m[32m       "</div>"[m
[32m+[m[32m      ],[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "                 id  radius_mean  texture_mean  perimeter_mean    area_mean  \\\n",[m
[32m+[m[32m       "count  5.690000e+02   569.000000    569.000000      569.000000   569.000000   \n",[m
[32m+[m[32m       "mean   3.037183e+07    14.127292     19.289649       91.969033   654.889104   \n",[m
[32m+[m[32m       "std    1.250206e+08     3.524049      4.301036       24.298981   351.914129   \n",[m
[32m+[m[32m       "min    8.670000e+03     6.981000      9.710000       43.790000   143.500000   \n",[m
[32m+[m[32m       "25%    8.692180e+05    11.700000     16.170000       75.170000   420.300000   \n",[m
[32m+[m[32m       "50%    9.060240e+05    13.370000     18.840000       86.240000   551.100000   \n",[m
[32m+[m[32m       "75%    8.813129e+06    15.780000     21.800000      104.100000   782.700000   \n",[m
[32m+[m[32m       "max    9.113205e+08    28.110000     39.280000      188.500000  2501.000000   \n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "       smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n",[m
[32m+[m[32m       "count       569.000000        569.000000      569.000000           569.000000   \n",[m
[32m+[m[32m       "mean          0.096360          0.104341        0.088799             0.048919   \n",[m
[32m+[m[32m       "std           0.014064          0.052813        0.079720             0.038803   \n",[m
[32m+[m[32m       "min           0.052630          0.019380        0.000000             0.000000   \n",[m
[32m+[m[32m       "25%           0.086370          0.064920        0.029560             0.020310   \n",[m
[32m+[m[32m       "50%           0.095870          0.092630        0.061540             0.033500   \n",[m
[32m+[m[32m       "75%           0.105300          0.130400        0.130700             0.074000   \n",[m
[32m+[m[32m       "max           0.163400          0.345400        0.426800             0.201200   \n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "       symmetry_mean  ...  texture_worst  perimeter_worst   area_worst  \\\n",[m
[32m+[m[32m       "count     569.000000  ...     569.000000       569.000000   569.000000   \n",[m
[32m+[m[32m       "mean        0.181162  ...      25.677223       107.261213   880.583128   \n",[m
[32m+[m[32m       "std         0.027414  ...       6.146258        33.602542   569.356993   \n",[m
[32m+[m[32m       "min         0.106000  ...      12.020000        50.410000   185.200000   \n",[m
[32m+[m[32m       "25%         0.161900  ...      21.080000        84.110000   515.300000   \n",[m
[32m+[m[32m       "50%         0.179200  ...      25.410000        97.660000   686.500000   \n",[m
[32m+[m[32m       "75%         0.195700  ...      29.720000       125.400000  1084.000000   \n",[m
[32m+[m[32m       "max         0.304000  ...      49.540000       251.200000  4254.000000   \n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "       smoothness_worst  compactness_worst  concavity_worst  \\\n",[m
[32m+[m[32m       "count        569.000000         569.000000       569.000000   \n",[m
[32m+[m[32m       "mean           0.132369           0.254265         0.272188   \n",[m
[32m+[m[32m       "std            0.022832           0.157336         0.208624   \n",[m
[32m+[m[32m       "min            0.071170           0.027290         0.000000   \n",[m
[32m+[m[32m       "25%            0.116600           0.147200         0.114500   \n",[m
[32m+[m[32m       "50%            0.131300           0.211900         0.226700   \n",[m
[32m+[m[32m       "75%            0.146000           0.339100         0.382900   \n",[m
[32m+[m[32m       "max            0.222600           1.058000         1.252000   \n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "       concave points_worst  symmetry_worst  fractal_dimension_worst  \\\n",[m
[32m+[m[32m       "count            569.000000      569.000000               569.000000   \n",[m
[32m+[m[32m       "mean               0.114606        0.290076                 0.083946   \n",[m
[32m+[m[32m       "std                0.065732        0.061867                 0.018061   \n",[m
[32m+[m[32m       "min                0.000000        0.156500                 0.055040   \n",[m
[32m+[m[32m       "25%                0.064930        0.250400                 0.071460   \n",[m
[32m+[m[32m       "50%                0.099930        0.282200                 0.080040   \n",[m
[32m+[m[32m       "75%                0.161400        0.317900                 0.092080   \n",[m
[32m+[m[32m       "max                0.291000        0.663800                 0.207500   \n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "       Unnamed: 32  \n",[m
[32m+[m[32m       "count          0.0  \n",[m
[32m+[m[32m       "mean           NaN  \n",[m
[32m+[m[32m       "std            NaN  \n",[m
[32m+[m[32m       "min            NaN  \n",[m
[32m+[m[32m       "25%            NaN  \n",[m
[32m+[m[32m       "50%            NaN  \n",[m
[32m+[m[32m       "75%            NaN  \n",[m
[32m+[m[32m       "max            NaN  \n",[m
[32m+[m[32m       "\n",[m
[32m+[m[32m       "[8 rows x 32 columns]"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 100,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "df.describe()\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 6,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "id                           0\n",[m
[32m+[m[32m       "diagnosis                    0\n",[m
[32m+[m[32m       "radius_mean                  0\n",[m
[32m+[m[32m       "texture_mean                 0\n",[m
[32m+[m[32m       "perimeter_mean               0\n",[m
[32m+[m[32m       "area_mean                    0\n",[m
[32m+[m[32m       "smoothness_mean              0\n",[m
[32m+[m[32m       "compactness_mean             0\n",[m
[32m+[m[32m       "concavity_mean               0\n",[m
[32m+[m[32m       "concave points_mean          0\n",[m
[32m+[m[32m       "symmetry_mean                0\n",[m
[32m+[m[32m       "fractal_dimension_mean       0\n",[m
[32m+[m[32m       "radius_se                    0\n",[m
[32m+[m[32m       "texture_se                   0\n",[m
[32m+[m[32m       "perimeter_se                 0\n",[m
[32m+[m[32m       "area_se                      0\n",[m
[32m+[m[32m       "smoothness_se                0\n",[m
[32m+[m[32m       "compactness_se               0\n",[m
[32m+[m[32m       "concavity_se                 0\n",[m
[32m+[m[32m       "concave points_se            0\n",[m
[32m+[m[32m       "symmetry_se                  0\n",[m
[32m+[m[32m       "fractal_dimension_se         0\n",[m
[32m+[m[32m       "radius_worst                 0\n",[m
[32m+[m[32m       "texture_worst                0\n",[m
[32m+[m[32m       "perimeter_worst              0\n",[m
[32m+[m[32m       "area_worst                   0\n",[m
[32m+[m[32m       "smoothness_worst             0\n",[m
[32m+[m[32m       "compactness_worst            0\n",[m
[32m+[m[32m       "concavity_worst              0\n",[m
[32m+[m[32m       "concave points_worst         0\n",[m
[32m+[m[32m       "symmetry_worst               0\n",[m
[32m+[m[32m       "fractal_dimension_worst      0\n",[m
[32m+[m[32m       "Unnamed: 32                569\n",[m
[32m+[m[32m       "dtype: int64"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 6,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "df.isnull().sum()\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 102,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "df = df.drop(columns=['Unnamed: 32'])"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 9,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "df_numeric = df.drop(columns=['id', 'diagnosis'])  \n",[m
[32m+[m[32m    "corr_matrix = df_numeric.corr()\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 11,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "image/png": "",[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<Figure size 1200x1000 with 2 Axes>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "display_data"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "import seaborn as sns\n",[m
[32m+[m[32m    "import matplotlib.pyplot as plt\n",[m
[32m+[m[32m    "plt.figure(figsize=(12, 10))\n",[m
[32m+[m[32m    "sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)\n",[m
[32m+[m[32m    "plt.title('Correlation Matrix Heatmap')\n",[m
[32m+[m[32m    "plt.show()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "Omwx5vVbYKeo"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 3. Logistic Regression Model\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#### 3.1 Use Logistic Regression\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Use Logistic Regression and examine accuracy score, confusion matrix, classification report for that model.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "- Define Target, Predictors\n",[m
[32m+[m[32m    "- Train-Test Split\n",[m
[32m+[m[32m    "- Evaluate Model"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 13,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "X = df.drop(columns=['id', 'diagnosis'])\n",[m
[32m+[m[32m    "y = df['diagnosis']\n",[m
[32m+[m[32m    "y = y.map({'M': 1, 'B': 0})"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 15,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "from sklearn.model_selection import train_test_split\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Split the data\n",[m
[32m+[m[32m    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 17,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stderr",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "C:\\Users\\gillb\\anaconda3\\Lib\\site-packages\\sklearn\\linear_model\\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",[m
[32m+[m[32m      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",[m
[32m+[m[32m      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",[m
[32m+[m[32m      "Please also refer to the documentation for alternative solver options:\n",[m
[32m+[m[32m      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",[m
[32m+[m[32m      "  n_iter_i = _check_optimize_result(\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/html": [[m
[32m+[m[32m       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=1000)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=1000)</pre></div></div></div></div></div>"[m
[32m+[m[32m      ],[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "LogisticRegression(max_iter=1000)"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 17,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "from sklearn.linear_model import LogisticRegression\n",[m
[32m+[m[32m    "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Initialize the model\n",[m
[32m+[m[32m    "model = LogisticRegression(max_iter=1000)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Fit the model\n",[m
[32m+[m[32m    "model.fit(X_train, y_train)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 19,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "y_pred = model.predict(X_test)\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 21,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Accuracy Score: 0.9649\n",[m
[32m+[m[32m      "Confusion Matrix:\n",[m
[32m+[m[32m      "[[106   2]\n",[m
[32m+[m[32m      " [  4  59]]\n",[m
[32m+[m[32m      "Classification Report:\n",[m
[32m+[m[32m      "              precision    recall  f1-score   support\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "           0       0.96      0.98      0.97       108\n",[m
[32m+[m[32m      "           1       0.97      0.94      0.95        63\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "    accuracy                           0.96       171\n",[m
[32m+[m[32m      "   macro avg       0.97      0.96      0.96       171\n",[m
[32m+[m[32m      "weighted avg       0.96      0.96      0.96       171\n",[m
[32m+[m[32m      "\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Evaluate the model\n",[m
[32m+[m[32m    "accuracy = accuracy_score(y_test, y_pred)\n",[m
[32m+[m[32m    "print(f'Accuracy Score: {accuracy:.4f}')\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "conf_matrix = confusion_matrix(y_test, y_pred)\n",[m
[32m+[m[32m    "print('Confusion Matrix:')\n",[m
[32m+[m[32m    "print(conf_matrix)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "class_report = classification_report(y_test, y_pred)\n",[m
[32m+[m[32m    "print('Classification Report:')\n",[m
[32m+[m[32m    "print(class_report)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "Mogg_w8vYKep"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 4. Support Vector Machine\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#### 4.1 Use Support Vector Machine\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Use Support Vector Machine and examine accuracy score, confusion matrix, classification report for that model.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "- Define Target, Predictors\n",[m
[32m+[m[32m    "- Train-Test Split\n",[m
[32m+[m[32m    "- Evaluate Model"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 23,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "from sklearn.svm import SVC\n",[m
[32m+[m[32m    "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",[m
[32m+[m[32m    "X = df.drop(columns=['id', 'diagnosis'])\n",[m
[32m+[m[32m    "y = df['diagnosis']\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Encode target variable: M = 1, B = 0\n",[m
[32m+[m[32m    "y = y.map({'M': 1, 'B': 0})"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 25,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/html": [[m
[32m+[m[32m       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(kernel=&#x27;linear&#x27;, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(kernel=&#x27;linear&#x27;, random_state=42)</pre></div></div></div></div></div>"[m
[32m+[m[32m      ],[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "SVC(kernel='linear', random_state=42)"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 25,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",[m
[32m+[m[32m    "model = SVC(kernel='linear', random_state=42)\n",[m
[32m+[m[32m    "model.fit(X_train, y_train)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 27,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "y_pred = model.predict(X_test)\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 29,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Accuracy Score: 0.9649\n",[m
[32m+[m[32m      "Confusion Matrix:\n",[m
[32m+[m[32m      "[[106   2]\n",[m
[32m+[m[32m      " [  4  59]]\n",[m
[32m+[m[32m      "Classification Report:\n",[m
[32m+[m[32m      "              precision    recall  f1-score   support\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "           0       0.96      0.98      0.97       108\n",[m
[32m+[m[32m      "           1       0.97      0.94      0.95        63\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "    accuracy                           0.96       171\n",[m
[32m+[m[32m      "   macro avg       0.97      0.96      0.96       171\n",[m
[32m+[m[32m      "weighted avg       0.96      0.96      0.96       171\n",[m
[32m+[m[32m      "\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "accuracy = accuracy_score(y_test, y_pred)\n",[m
[32m+[m[32m    "print(f'Accuracy Score: {accuracy:.4f}')\n",[m
[32m+[m[32m    "conf_matrix = confusion_matrix(y_test, y_pred)\n",[m
[32m+[m[32m    "print('Confusion Matrix:')\n",[m
[32m+[m[32m    "print(conf_matrix)\n",[m
[32m+[m[32m    "print('Classification Report:')\n",[m
[32m+[m[32m    "print(class_report)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "fdzQkTb7YKeq"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 5. Naive Bayes\n",[m
[32m+[m[32m    "#### 5.1 Use Naive Bayes\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Use Naive Bayes and examine accuracy score, confusion matrix, classification report for that model.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "- Define Target, Predictors\n",[m
[32m+[m[32m    "- Train-Test Split\n",[m
[32m+[m[32m    "- Evaluate Model"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 31,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "from sklearn.naive_bayes import GaussianNB\n",[m
[32m+[m[32m    "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",[m
[32m+[m[32m    "X = df.drop(columns=['id', 'diagnosis'])\n",[m
[32m+[m[32m    "y = df['diagnosis']\n",[m
[32m+[m[32m    "y = y.map({'M': 1, 'B': 0})"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 35,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Accuracy Score: 0.9415\n",[m
[32m+[m[32m      "Confusion Matrix:\n",[m
[32m+[m[32m      "[[104   4]\n",[m
[32m+[m[32m      " [  6  57]]\n",[m
[32m+[m[32m      "Classification Report:\n",[m
[32m+[m[32m      "              precision    recall  f1-score   support\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "           0       0.95      0.96      0.95       108\n",[m
[32m+[m[32m      "           1       0.93      0.90      0.92        63\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "    accuracy                           0.94       171\n",[m
[32m+[m[32m      "   macro avg       0.94      0.93      0.94       171\n",[m
[32m+[m[32m      "weighted avg       0.94      0.94      0.94       171\n",[m
[32m+[m[32m      "\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "y_pred = model.predict(X_test)\n",[m
[32m+[m[32m    "accuracy = accuracy_score(y_test, y_pred)\n",[m
[32m+[m[32m    "print(f'Accuracy Score: {accuracy:.4f}')\n",[m
[32m+[m[32m    "conf_matrix = confusion_matrix(y_test, y_pred)\n",[m
[32m+[m[32m    "print('Confusion Matrix:')\n",[m
[32m+[m[32m    "print(conf_matrix)\n",[m
[32m+[m[32m    "class_report = classification_report(y_test, y_pred)\n",[m
[32m+[m[32m    "print('Classification Report:')\n",[m
[32m+[m[32m    "print(class_report)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "VoGxthaeYKer"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 6 Gridsearch optimal parameters for Logistic Regression and SVM models\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Is there any difference between accuracy score of Logistic Regression and SVM? Use grid search to find optimal parameter for both these models.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "> Hyper-parameters are parameters that are not directly learnt within estimators. In scikit-learn they are passed as arguments to the constructor of the estimator classes. Typical examples include C, kernel and gamma for Support Vector Classifier, alpha for Lasso, etc.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "> It is possible and recommended to search the hyper-parameter space for the best cross validation score.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "> https://scikit-learn.org/stable/modules/grid_search.html#grid-search\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "**Note:** It'll take time to execute this. After running the cell, wait for result."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "UeqrbsyNYKes"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 6.1 Find Best Estimator For Logistic Regression\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Find out how these parameters effect model. Find out the best estimator, score."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 37,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "ExecuteTime": {[m
[32m+[m[32m     "end_time": "2019-05-09T05:40:29.397881Z",[m
[32m+[m[32m     "start_time": "2019-05-09T05:40:29.392602Z"[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "UkQ9RBQZYKet"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "lr_params = {\n",[m
[32m+[m[32m    "    'penalty': ['l1','l2'],\n",[m
[32m+[m[32m    "    'C': [1, 10, 100],'solver': ['liblinear']  # 'liblinear' supports 'l1' penalty, 'lbfgs' does not\n",[m
[32m+[m[32m    "}\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "ExecuteTime": {[m
[32m+[m[32m     "end_time": "2019-05-09T05:23:14.036840Z",[m
[32m+[m[32m     "start_time": "2019-05-09T05:23:14.032847Z"[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "ioLgY3bxYKev"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 6.2 Find Best Estimator For SVM\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Find out how these parameters effect model. Find out the best estimator, score."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 41,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "ExecuteTime": {[m
[32m+[m[32m     "end_time": "2019-05-09T05:40:31.617090Z",[m
[32m+[m[32m     "start_time": "2019-05-09T05:40:31.612996Z"[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "vgi61VpWYKew"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "svc_params = {\n",[m
[32m+[m[32m    "    'C': [1, 10, 100],\n",[m
[32m+[m[32m    "    'gamma': [0.001, 0.0001],\n",[m
[32m+[m[32m    "    'kernel': ['linear','rbf']\n",[m
[32m+[m[32m    "}"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "ExecuteTime": {[m
[32m+[m[32m     "end_time": "2019-05-09T05:23:59.157703Z",[m
[32m+[m[32m     "start_time": "2019-05-09T05:23:59.153713Z"[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "HrS04DfuYKez"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 6.3 Plot the ROC curve for the SVM, Logistic Regressions and Naive Bayes on the same plot\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Find out which model performs better."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 43,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "import numpy as np\n",[m
[32m+[m[32m    "from sklearn.model_selection import train_test_split\n",[m
[32m+[m[32m    "from sklearn.linear_model import LogisticRegression\n",[m
[32m+[m[32m    "from sklearn.metrics import roc_curve, auc\n",[m
[32m+[m[32m    "import matplotlib.pyplot as plt"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 45,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stderr",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "C:\\Users\\gillb\\anaconda3\\Lib\\site-packages\\sklearn\\linear_model\\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",[m
[32m+[m[32m      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",[m
[32m+[m[32m      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",[m
[32m+[m[32m      "Please also refer to the documentation for alternative solver options:\n",[m
[32m+[m[32m      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",[m
[32m+[m[32m      "  n_iter_i = _check_optimize_result(\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/html": [[m
[32m+[m[32m       "<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=1000)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=1000)</pre></div></div></div></div></div>"[m
[32m+[m[32m      ],[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "LogisticRegression(max_iter=1000)"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 45,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "model = LogisticRegression(max_iter=1000)\n",[m
[32m+[m[32m    "model.fit(X_train, y_train)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 47,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "y_pred_proba = model.predict_proba(X_test)[:, 1]\n",[m
[32m+[m[32m    "fpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)\n",[m
[32m+[m[32m    "roc_auc = auc(fpr, tpr)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 56,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "ExecuteTime": {[m
[32m+[m[32m     "end_time": "2019-05-09T05:28:56.671590Z",[m
[32m+[m[32m     "start_time": "2019-05-09T05:28:56.421258Z"[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "q9TBM2axYKe0",[m
[32m+[m[32m    "outputId": "8f525757-6f7f-4a8b-d154-235ae82cfdf6"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stderr",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "image/png": "",[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<Figure size 800x800 with 1 Axes>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "display_data"[m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "image/png": "",[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<Figure size 640x480 with 1 Axes>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "display_data"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "plt.figure(figsize=[8,8])\n",[m
[32m+[m[32m    "plt.xlim([-0.05, 1.0])\n",[m
[32m+[m[32m    "plt.ylim([-0.05, 1.05])\n",[m
[32m+[m[32m    "plt.xlabel('False Positive Rate', fontsize=18)\n",[m
[32m+[m[32m    "plt.ylabel('True Positive Rate', fontsize=18)\n",[m
[32m+[m[32m    "plt.title('Receiver Operating Characteristic: M', fontsize=18)\n",[m
[32m+[m[32m    "plt.legend(loc=\"lower right\")\n",[m
[32m+[m[32m    "plt.show()\n",[m
[32m+[m[32m    "for i in range(0, len(fpr), max(1, len(fpr) // 10)):  # Adjust step size for readability\n",[m
[32m+[m[32m    "    plt.text(fpr[i], tpr[i], f'({fpr[i]:.2f}, {tpr[i]:.2f})', fontsize=10, color='red')\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "plt.grid(True)\n",[m
[32m+[m[32m    "plt.show()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "WrSrz3AAYKe3"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 7. [BONUS] Learning Curve\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "A learning curve compares the validation and training performance of an estimator for varying amounts of training data. If both the validation and training score converge to a value that is too low, we will not benefit much from more training data.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Plot \"learning curves\" for the best models of each. This is a great way see how training/testing size affects the scores. Look at the documentation for how to use this function in sklearn.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "http://scikit-learn.org/stable/modules/learning_curve.html#learning-curves"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 81,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "ExecuteTime": {[m
[32m+[m[32m     "end_time": "2019-05-09T05:22:19.657638Z",[m
[32m+[m[32m     "start_time": "2019-05-09T05:22:19.653657Z"[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "3Zleg5E-YKe4"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# https://scikit-learn.org/stable/auto_examples/model_selection/plot_learning_curve.html#sphx-glr-auto-examples-model-selection-plot-learning-curve-py"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 104,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "from sklearn.model_selection import learning_curve\n",[m
[32m+[m[32m    "from sklearn.metrics import accuracy_score\n",[m
[32m+[m[32m    "import matplotlib.pyplot as plt\n",[m
[32m+[m[32m    "from sklearn.model_selection import learning_curve\n",[m
[32m+[m[32m    "from sklearn.preprocessing import StandardScaler\n",[m
[32m+[m[32m    "from sklearn.svm import SVC\n",[m
[32m+[m[32m    "import numpy as np"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 108,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Index(['id', 'diagnosis', 'radius_mean', 'texture_mean', 'perimeter_mean',\n",[m
[32m+[m[32m      "       'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean',\n",[m
[32m+[m[32m      "       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean',\n",[m
[32m+[m[32m      "       'radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se',\n",[m
[32m+[m[32m      "       'compactness_se', 'concavity_se', 'concave points_se', 'symmetry_se',\n",[m
[32m+[m[32m      "       'fractal_dimension_se', 'radius_worst', 'texture_worst',\n",[m
[32m+[m[32m      "       'perimeter_worst', 'area_worst', 'smoothness_worst',\n",[m
[32m+[m[32m      "       'compactness_worst', 'concavity_worst', 'concave points_worst',\n",[m
[32m+[m[32m      "       'symmetry_worst', 'fractal_dimension_worst'],\n",[m
[32m+[m[32m      "      dtype='object')\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "print(df.columns)\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 110,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "df = df.drop(columns=['id']) "[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 112,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "X = df.drop(columns=['diagnosis'])\n",[m
[32m+[m[32m    "y = df['diagnosis']"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 114,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "y = y.map({'M': 1, 'B': 0})\n",[m
[32m+[m[32m    "if y.isnull().sum() > 0:\n",[m
[32m+[m[32m    "    \n",[m
[32m+[m[32m    "    imputer = SimpleImputer(strategy='most_frequent')\n",[m
[32m+[m[32m    "    y = y.values.reshape(-1, 1)  \n",[m
[32m+[m[32m    "    y = imputer.fit_transform(y).ravel()  \n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 116,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "if X.isnull().sum().sum() > 0:\n",[m
[32m+[m[32m    "    # Impute missing values if any\n",[m
[32m+[m[32m    "    imputer = SimpleImputer(strategy='mean')\n",[m
[32m+[m[32m    "    X = imputer.fit_transform(X)\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "if y.isnull().sum() > 0:\n",[m
[32m+[m[32m    "    # Impute missing values if any\n",[m
[32m+[m[32m    "    imputer = SimpleImputer(strategy='most_frequent')\n",[m
[32m+[m[32m    "    y = y.values.reshape(-1, 1)  \n",[m
[32m+[m[32m    "    y = imputer.fit_transform(y).ravel()\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 118,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "scaler = StandardScaler()\n",[m
[32m+[m[32m    "X_scaled = scaler.fit_transform(X)\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 120,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 122,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "models = {\n",[m
[32m+[m[32m    "    'SVM': SVC(kernel='linear', probability=True, random_state=42),\n",[m
[32m+[m[32m    "    'Logistic Regression': LogisticRegression(random_state=42),\n",[m
[32m+[m[32m    "    'Naive Bayes': GaussianNB()\n",[m
[32m+[m[32m    "}\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 126,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "image/png": "",[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<Figure size 1800x1200 with 3 Axes>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "display_data"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "plt.figure(figsize=(18, 12))\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for i, (name, model) in enumerate(models.items(), 1):\n",[m
[32m+[m[32m    "    plt.subplot(3, 1, i)\n",[m
[32m+[m[32m    "    \n",[m
[32m+[m[32m    "    train_sizes, train_scores, valid_scores = learning_curve(\n",[m
[32m+[m[32m    "        model, X_scaled, y, cv=5, n_jobs=-1, train_sizes=[0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\n",[m
[32m+[m[32m    "    )"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 132,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "[<matplotlib.lines.Line2D at 0x1fedeca30d0>]"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 132,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "image/png": "",[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<Figure size 640x480 with 1 Axes>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "display_data"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "train_mean = train_scores.mean(axis=1)\n",[m
[32m+[m[32m    "train_std = train_scores.std(axis=1)\n",[m
[32m+[m[32m    "valid_mean = valid_scores.mean(axis=1)\n",[m
[32m+[m[32m    "valid_std = valid_scores.std(axis=1)\n",[m
[32m+[m[32m    "plt.plot(train_sizes, train_mean, 'o-', color='blue', label='Training score')\n",[m
[32m+[m[32m    "plt.plot(train_sizes, valid_mean, 'o-', color='red', label='Validation score')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 136,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stderr",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAnYAAAHWCAYAAAD6oMSKAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAABvJklEQVR4nO3deXxU1d0G8OfOmsmeEEgChEVEFlmUTZbiDogbam1pqSgKIuJGsa3yqlVcCtiKICoVRVCrQq1KtaVC3FCKyiKgQEVQJCwJgZBkss1+3j9O7iyZSTKTTDLb8/18hiR37tzcmRsyT845v3MUIYQAEREREcU8TaRPgIiIiIjCg8GOiIiIKE4w2BERERHFCQY7IiIiojjBYEdEREQUJxjsiIiIiOIEgx0RERFRnGCwIyIiIooTDHZEREREcYLBjigCVq9eDUVRsH379kifSsguvPBCXHjhhRH7/i6XC6+99houvfRS5OTkQK/Xo1OnTrjyyivx/vvvw+VyRezcWuvRRx9F//79fZ6DoihQFAULFy702781P0effvopFEXBp59+2ppTDtlPP/3kfk7qLT09HYMHD8aSJUvgdDrb9XxaY+rUqbjmmmsifRpEPnSRPgEiii3PP/98xL63xWLBNddcg40bN+JXv/oVli9fjry8PJw8eRIffPABfvGLX2Dt2rWYNGlSxM6xpY4fP44nn3wSq1evhkbj/zf3woULMXPmTGRnZ4fl+w0ZMgRffPEF+vfvH5bjhequu+7ClClTAAAVFRV477338Nvf/hZHjhzBU089FZFzCtUjjzyCvn374uOPP8bFF18c6dMhAsBgR5TQhBCwWCwwmUxBPyZSQQAA5s6diw0bNuCVV17BjTfe6HPfddddh9///veoq6sLy/eqra1FcnJyWI4VjKVLlyIzMxPXXXed332XXnopPv30UzzxxBNhCz3p6ekYOXJkWI7VEt26dfP5/pdddhn27NmDN998M2aCXa9evXDZZZdh4cKFDHYUNdgVSxTFDhw4gClTpqBTp04wGo3o168fnnvuOZ99LBYL7r33XpxzzjnIyMhAdnY2Ro0ahX/+859+x1MUBXfeeSf++te/ol+/fjAajXjllVfcXXqffPIJbr/9duTk5KBDhw647rrrcPz4cZ9jNOyKVbvW/vKXv2Dx4sXo2bMnUlNTMWrUKHz55Zd+5/Diiy/irLPOgtFoRP/+/fHGG29g2rRp6NGjR5OvRUlJCV566SVMmDDBL9SpevfujUGDBgHwdFP+9NNPPvsE6oK88MILMWDAAHz22WcYPXo0kpOTccstt+Caa65B9+7dA3bvnnfeeRgyZIj7ayEEnn/+eZxzzjkwmUzIysrC9ddfjx9//LHJ5wUANpsNK1euxJQpUwK21vXp0wfTp0/Hc889h8OHDzd5rO3bt+NXv/oVevToAZPJhB49euDXv/613+Mavg5LliyBoig4ePCg3zHvu+8+GAwGnDp1yr3tww8/xCWXXIL09HQkJydjzJgx+Oijj5p9rk3JyMiAXq/32bZ27VqMHz8e+fn5MJlM6NevH+6//37U1NS493nttdegKAq++OILv2M++uij0Ov1Pj/HwZz7yZMnMXPmTBQUFMBoNKJjx44YM2YMPvzwQ5/9pk6dig8//BA//PBDq547Ubgw2BFFqX379mH48OHYs2cPnnrqKfzrX//CFVdcgbvvvhvz589372e1WnH69Gn87ne/w7p16/Dmm2/iZz/7Ga677jq8+uqrfsddt24dli9fjj/+8Y/YsGEDxo4d675vxowZ0Ov1eOONN/Dkk0/i008/xQ033BDU+T733HMoLCzEkiVL8Prrr6OmpgaXX345Kisr3fusWLECM2fOxKBBg/DOO+/gwQcfxPz584Ma5/XJJ5/Abre32Zim4uJi3HDDDZgyZQrWr1+P2bNn45ZbbkFRURE+/vhjn32/++47bN26FTfffLN722233YY5c+bg0ksvxbp16/D8889j7969GD16NE6cONHk9/7qq69QVlaGiy66qNF9HnnkEWi1Wjz00ENNHuunn35Cnz59sGTJEmzYsAGLFi1CcXExhg8f7hPMGrrhhhtgMBiwevVqn+1OpxN/+9vfcNVVVyEnJwcA8Le//Q3jx49Heno6XnnlFfz9739HdnY2JkyYEHS4c7lccDgccDgcKCsrw8svv4wPPvgAU6dO9dnvwIEDuPzyy7Fy5Up88MEHmDNnDv7+97/jqquucu8zefJk5OXl+f3R43A48MILL+Daa69F586dQzr3qVOnYt26dfjjH/+IjRs34qWXXsKll16KsrIyn+9x4YUXQgiB9evXB/W8idqcIKJ2t2rVKgFAbNu2rdF9JkyYILp27SoqKyt9tt95550iKSlJnD59OuDjHA6HsNvtYvr06eLcc8/1uQ+AyMjI8Husej6zZ8/22f7kk08KAKK4uNi97YILLhAXXHCB++tDhw4JAGLgwIHC4XC4t2/dulUAEG+++aYQQgin0yny8vLEeeed5/M9Dh8+LPR6vejevXujr4UQQixcuFAAEB988EGT+zV8TocOHfLZ/sknnwgA4pNPPvF5TgDERx995LOv3W4Xubm5YsqUKT7b//CHPwiDwSBOnTolhBDiiy++EADEU0895bPfkSNHhMlkEn/4wx+aPNdFixYJAKKkpMTvPgDijjvuEEII8cADDwiNRiN2797t8xyb+jlyOByiurpapKSkiKVLlzb5Olx33XWia9euwul0uretX79eABDvv/++EEKImpoakZ2dLa666iqf7+N0OsXgwYPFiBEjmnyu6s9LoNu0adN8foYacrlcwm63i02bNgkA7tdBCCEefvhhYTAYxIkTJ9zb1q5dKwCITZs2hXzuqampYs6cOU0+F1WXLl3E5MmTg9qXqK2xxY4oClksFnz00Ue49tprkZyc7G7ZcDgcuPzyy2GxWHy6Od966y2MGTMGqamp0Ol00Ov1WLlyJf73v//5Hfviiy9GVlZWwO979dVX+3ytdms21/0HAFdccQW0Wm2jj92/fz9KSkrwy1/+0udx3bp1w5gxY5o9flvLysryGyel0+lwww034J133nG3PDqdTrz22muYNGkSOnToAAD417/+BUVRcMMNN/hcq7y8PAwePLjZFsnjx49DURR3i1hj/vCHPyA7Oxv33Xdfo/tUV1fjvvvuw5lnngmdTgedTofU1FTU1NQE/HnwdvPNN+Po0aM+3Y2rVq1CXl4eJk6cCADYsmULTp8+jZtuusnnubpcLlx22WXYtm2bTzdpY+655x5s27YN27ZtwyeffII//elP+Pvf/45f//rXPvv9+OOPmDJlCvLy8qDVaqHX63HBBRcAgM/zuf322wHIrn7Vs88+i4EDB+L8888P+dxHjBiB1atX4/HHH8eXX34Ju93e6HPp1KkTjh071uxzJmoPDHZEUaisrAwOhwPLli2DXq/3uV1++eUA4O5We+edd/DLX/4SXbp0wd/+9jd88cUX2LZtG2655RZYLBa/Y+fn5zf6fdWgojIajQAQVEFCc49Vu7Byc3P9HhtoW0PdunUDABw6dKjZfVuisddFfR3XrFkDANiwYQOKi4t9umFPnDgBIQRyc3P9rteXX37ZZBcoIF8jvV7vE4wDSU9Px4MPPogPPvgAn3zyScB9pkyZgmeffRYzZszAhg0bsHXrVmzbtg0dO3Zs9jpOnDgR+fn5WLVqFQCgvLwc7733Hm688Ub3uandytdff73fc120aBGEEDh9+nST3wcAunbtimHDhmHYsGG48MILMW/ePDz00EN46623sGHDBgAypI4dOxZfffUVHn/8cXz66afYtm0b3nnnHffrpsrNzcXkyZPxwgsvwOl04ptvvsHnn3+OO++8071PKOe+du1a3HTTTXjppZcwatQoZGdn48Ybb0RJSYnfc0lKSgpb0Q5Ra7EqligKZWVlQavVYurUqbjjjjsC7tOzZ08AcsxQz549sXbtWiiK4r7farUGfJz3Pu1JDX6BxpsFerNs6KKLLoJer8e6deswa9asZvdPSkoC4P86NBayGntd+vfvjxEjRmDVqlW47bbbsGrVKnTu3Bnjx49375OTkwNFUfD555+7A623QNu85eTkwGazoaamBikpKU3ue/vtt2Pp0qW477773K1UqsrKSvzrX//Cww8/jPvvv9+9XR2H2Rz1Z+6ZZ55BRUUF3njjDVitVp8Qq7YqLlu2rNGq2mCCeiBqK+/u3bsxYcIEfPzxxzh+/Dg+/fRTdysdIKdHCeSee+7Ba6+9hn/+85/44IMPkJmZid/85jctOvecnBwsWbIES5YsQVFREd577z3cf//9KC0txQcffODzmNOnTzdb/EPUXhjsiKJQcnIyLrroIuzcuRODBg2CwWBodF9FUWAwGHyCSUlJScCq2Ejq06cP8vLy8Pe//x1z5851by8qKsKWLVvcg9sbk5eXhxkzZmD58uV49dVXA1bG/vDDD6ipqcGgQYPcb7TffPMN+vTp497nvffeC/ncb775Ztx+++3YvHkz3n//fcydO9ende3KK6/EwoULcezYMb+u5mD07dvXff5quGmMwWDA448/jt/85jd+XbeKokAI4RckX3rppaAn/r355pvx5JNP4s0338Tq1asxatQo9/kBwJgxY5CZmYl9+/b5tIaFw65duwDIrk3AE7YbPp8XXngh4OOHDh2K0aNHY9GiRdizZw9mzpzpE5Rbeu7dunXDnXfeiY8++gj//e9/fe5zOBw4cuSIuyWdKNIY7Igi6OOPP/abjgMALr/8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pk6dimHDhmHUqFFYsWIFioqKMGvWLADAvHnzcOzYMbz66qsAgKuuugq33norli9f7u6KnTNnDkaMGIHOnTsDkIUdI0eORO/evWE2m/HMM89g165deO6551ryVKNXba2siA3H/HVJSa0/DhEREUVci4JdRkYGfvzxR/To0cNn+8GDB5ESQkCYPHkyysrK8Oijj6K4uBgDBgzA+vXr0b17dwByvjzvOe2mTZuGqqoqPPvss7j33nuRmZmJiy++GIsWLXLvU1FRgZkzZ6KkpAQZGRk499xz8dlnn2HEiBEtearRq6pKhrsOHVp3HHXFiXid54+IiCiBtCjYXX311ZgzZw7effdd9OrVC4AMdffeey+uvvrqkI41e/ZszJ49O+B9q1ev9tt211134a677mr0eE8//TSefvrpkM4hJlVUyC7U1q4UUVcH5OdzxQkiIqI40KLBWX/+85+RkpKCvn37omfPnujZsyf69u2LDh064C9/+Uu4z5EacrmAEyfCM++c08kVJ4iIiOJEi7tit2zZgsLCQuzevRsmkwmDBw/G2LFjw31+FEh1tbxlZbXuOE4nV5wgIiKKIyG12H311VfuKUMURcH48ePRqVMn/OUvf8HPf/5zzJw502faEGojZrOcnDhAJW9IrFYWThAREcWRkILdI488gm+++cb99bfffotbb70V48aNw/3334/3338fCxYsCPtJUgNlZXKViNayWGRrHQsniIiI4kJIwW7Xrl245JJL3F+vWbMGI0aMwIsvvoi5c+fimWeeCXqtWGohux04dSo8rWx1dbI7l4UTREREcSGkYFdeXu6ztuumTZtw2WWXub8ePnw4jhw5Er6zI3/qNCfhCHYsnCAiIoorIQW73NxcHDp0CIBcEuzrr7/2Wee1qqqKM1C3NbMZcDha3xWrFk5wfB0REVHcCCnYXXbZZbj//vvx+eefY968eUhOTvaphP3mm2/c89pRGyktbX3RBOApnGBFLBERUdwIqdnn8ccfx3XXXYcLLrgAqampeOWVV2AwGNz3v/zyyxg/fnzYT5LqWSxyYuJwja9j4QQREVFcCSnYdezYEZ9//jkqKyuRmpoKrVbrc/9bb72F1NTUsJ4geTGbPQUPrWWxAJ07s3CCiIgojrR4guJAsrOzW3Uy1IzKSkAIOTautVwuFk4QERHFmTAkBGoXQshlxEym1h/L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9pvTrrKyEm+//TaWLl0a8JgVFRWYOXMmSkpKkJGRgXPPPRefffYZRowY0ebPJ2ysViA7O9JnQURERDEm4sUTs2fPxuzZswPet3r1ar9tGRkZTQ4ifPrpp/H000+H6/QiQwjOX0dEREQhi/iSYtSAwwHodAx2REREFDIGu2ijrjjBpcSIiIgoRAx20aaujitOEBERUYsw2EUbFk4QERFRCzHYRRshZIsdERERUYgY7KKJWjjB8XVERETUAgx20aSujoUTRERE1GIMdtHEYmHhBBEREbUYg100YeEEERERtQKDXTRh4QQRERG1AoNdtGDhBBEREbUSg120YOEEERERtRKDXbRg4QQRERG1EoNdtLBagQ4dIn0WREREFMMY7KKFEEBKSqTPgoiIiGIYg100YOEEERERhQGDXTRg4QQRERGFAYNdNGDhBBEREYUBg100YOEEERERhQGDXTRwuVg4QURERK3GYBdpDgeg13N8HREREbUag12kWSyAycRgR0RERK3GYBdpLJwgIiKiMGGwiwbZ2ZE+AyIiIooDDHaRZjSycIKIiIjCgsEu0jgxMREREYUJg12kmUxssSMiIqKwYLCLtNRUOd0JERERUSsx2EWSorBwgoiIiMKGwS6STCbZYkdEREQUBrpIn0BC69NHVsUSERERhQGDXSSZTJE+AyIiIooj7IolIiIiihMMdkRERERxgsGOiIiIKE4w2BERERHFCQY7IiIiojjBYEdEREQUJxjsiIiIiOIEgx0RERFRnGCwIyIiIooTDHZEREREcYLBjoiIiChOMNgRERERxQkGOyIiIqI4wWBHREREFCd0kT6BaCSEAACYzeYIn0lisNvtqK2thdlshl6vj/TpUBvhdU4MvM6Jgde5fal5RM0nTWGwC6CqqgoAUFBQEOEzISIiIpKqqqqQkZHR5D6KCCb+JRiXy4Xjx48jLS0NiqJE+nTintlsRkFBAY4cOYL09PRInw61EV7nxMDrnBh4nduXEAJVVVXo3LkzNJqmR9GxxS4AjUaDrl27Rvo0Ek56ejp/QSQAXufEwOucGHid209zLXUqFk8QERERxQkGOyIiIqI4wWBHEWc0GvHwww/DaDRG+lSoDfE6JwZe58TA6xy9WDxBREREFCfYYkdEREQUJxjsiIiIiOIEgx0RERFRnGCwozbz2Wef4aqrrkLnzp2hKArWrVvnc78QAo888gg6d+4Mk8mECy+8EHv37vXZx2q14q677kJOTg5SUlJw9dVX4+jRo+34LKgpCxYswPDhw5GWloZOnTrhmmuuwf79+3324XWOfcuXL8egQYPcc5aNGjUK//nPf9z38xrHnwULFkBRFMyZM8e9jdc5NjDYUZupqanB4MGD8eyzzwa8/8knn8TixYvx7LPPYtu2bcjLy8O4cePcS7oBwJw5c/Duu+9izZo12Lx5M6qrq3HllVfC6XS219OgJmzatAl33HEHvvzySxQWFsLhcGD8+PGoqalx78PrHPu6du2KhQsXYvv27di+fTsuvvhiTJo0yf2mzmscX7Zt24YVK1Zg0KBBPtt5nWOEIGoHAMS7777r/trlcom8vDyxcOFC9zaLxSIyMjLEX//6VyGEEBUVFUKv14s1a9a49zl27JjQaDTigw8+aLdzp+CVlpYKAGLTpk1CCF7neJaVlSVeeuklXuM4U1VVJXr37i0KCwvFBRdcIO655x4hBP8vxxK22FFEHDp0CCUlJRg/frx7m9FoxAUXXIAtW7YAAHbs2AG73e6zT+fOnTFgwAD3PhRdKisrAQDZ2dkAeJ3jkdPpxJo1a1BTU4NRo0bxGseZO+64A1dccQUuvfRSn+28zrGDa8VSRJSUlAAAcnNzfbbn5ubi8OHD7n0MBgOysrL89lEfT9FDCIG5c+fiZz/7GQYMGACA1zmefPvttxg1ahQsFgtSU1Px7rvvon///u43bF7j2LdmzRp8/fXX2LZtm999/L8cOxjsKKIURfH5Wgjht62hYPah9nfnnXfim2++webNm/3u43WOfX369MGuXbtQUVGBt99+GzfddBM2bdrkvp/XOLYdOXIE99xzDzZu3IikpKRG9+N1jn7siqWIyMvLAwC/v+JKS0vdfxHm5eXBZrOhvLy80X0oOtx1111477338Mknn6Br167u7bzO8cNgMODMM8/EsGHDsGDBAgwePBhLly7lNY4TO3bsQGlpKYYOHQqdTgedTodNmzbhmWeegU6nc18nXufox2BHEdGzZ0/k5eWhsLDQvc1ms2HTpk0YPXo0AGDo0KHQ6/U++xQXF2PPnj3ufSiyhBC488478c477+Djjz9Gz549fe7ndY5fQghYrVZe4zhxySWX4Ntvv8WuXbvct2HDhuE3v/kNdu3ahTPOOIPXOVZEqGiDEkBVVZXYuXOn2LlzpwAgFi9eLHbu3CkOHz4shBBi4cKFIiMjQ7zzzjvi22+/Fb/+9a9Ffn6+MJvN7mPMmjVLdO3aVXz44Yfi66+/FhdffLEYPHiwcDgckXpa5OX2228XGRkZ4tNPPxXFxcXuW21trXsfXufYN2/ePPHZZ5+JQ4cOiW+++Ub83//9n9BoNGLjxo1CCF7jeOVdFSsEr3OsYLCjNvPJJ58IAH63m266SQghy+cffvhhkZeXJ4xGozj//PPFt99+63OMuro6ceedd4rs7GxhMpnElVdeKYqKiiLwbCiQQNcXgFi1apV7H17n2HfLLbeI7t27C4PBIDp27CguueQSd6gTgtc4XjUMdrzOsUERQojItBUSERERUThxjB0RERFRnGCwIyIiIooTDHZEREREcYLBjoiIiChOMNgRERERxQkGOyIiIqI4wWBHREREFCcY7IiIiIjiBIMdEcWdCy+8EHPmzAl6/59++gmKomDXrl1tdk7RaPXq1cjMzIz0aRBRGDHYEVHEKIrS5G3atGktOu4777yDxx57LOj9CwoKUFxcjAEDBrTo+4Xi7bffxnnnnYeMjAykpaXh7LPPxr333hvSMRRFwbp165rd75NPPsFFF12E7OxsJCcno3fv3rjpppvgcDgAAJMnT8b333/fkqdBRFFKF+kTIKLEVVxc7P587dq1+OMf/4j9+/e7t5lMJp/97XY79Hp9s8fNzs4O6Ty0Wi3y8vJCekxLfPjhh/jVr36FP/3pT7j66quhKAr27duHjz76KOzfa+/evZg4cSLuvvtuLFu2DCaTCQcOHMA//vEPuFwuAPL1bfgaE1GMi/RitUREQgixatUqkZGR4f760KFDAoBYu3atuOCCC4TRaBQvv/yyOHXqlPjVr34lunTpIkwmkxgwYIB44403fI7VcPHy7t27iyeeeELcfPPNIjU1VRQUFIgXXnjB73vt3LlTCCHEJ598IgCIDz/8UAwdOlSYTCYxatQo8d133/l8n8cee0x07NhRpKamiunTp4v77rtPDB48uNHneM8994gLL7yw2dfivffeE0OGDBFGo1H07NlTPPLII8Jut7ufCwD3rXv37gGP8fTTT4sePXo0+X0avuYNj63eVEePHhW//OUvRWZmpsjOzhZXX321OHToULPPh4jaD7tiiSiq3Xfffbj77rvxv//9DxMmTIDFYsHQoUPxr3/9C3v27MHMmTMxdepUfPXVV00e56mnnsKwYcOwc+dOzJ49G7fffju+++67Jh/zwAMP4KmnnsL27duh0+lwyy23uO97/fXX8cQTT2DRokXYsWMHunXrhuXLlzd5vLy8POzduxd79uxpdJ8NGzbghhtuwN133419+/bhhRdewOrVq/HEE08AALZt2wYAWLVqFYqLi91fB/pexcXF+Oyzz5o8J2/btm1DcXExiouLcfToUYwcORJjx44FANTW1uKiiy5CamoqPvvsM2zevBmpqam47LLLYLPZgv4eRNTGIp0siYiEaLzFbsmSJc0+9vLLLxf33nuv++tALXY33HCD+2uXyyU6deokli9f7vO9ArXYqf79738LAKKurk4IIcR5550n7rjjDp/zGDNmTJMtdtXV1eLyyy93t7RNnjxZrFy5UlgsFvc+Y8eOFX/60598Hvfaa6+J/Px899cAxLvvvtvka+JwOMS0adMEAJGXlyeuueYasWzZMlFZWenep+Fr7u3uu+8W3bt3F6WlpUIIIVauXCn69OkjXC6Xex+r1SpMJpPYsGFDk+dCRO2HLXZEFNWGDRvm87XT6cQTTzyBQYMGoUOHDkhNTcXGjRtRVFTU5HEGDRrk/lxRFOTl5aG0tDTox+Tn5wOA+zH79+/HiBEjfPZv+HVDKSkp+Pe//42DBw/iwQcfRGpqKu69916MGDECtbW1AIAdO3bg0UcfRWpqqvt26623ori42L1PMLRaLVatWoWjR4/iySefROfOnfHEE0/g7LPP9hnbGMiKFSuwcuVK/POf/0THjh3d53Xw4EGkpaW5zys7OxsWiwU//PBD0OdFRG2LxRNEFNVSUlJ8vn7qqafw9NNPY8mSJRg4cCBSUlIwZ86cZrsDGxZdKIriLiII5jGKogCAz2PUbSohRJPHU/Xq1Qu9evXCjBkz8MADD+Css87C2rVrcfPNN8PlcmH+/Pm47rrr/B6XlJQU1PG9denSBVOnTsXUqVPx+OOP46yzzsJf//pXzJ8/P+D+n376Ke666y68+eabGDx4sHu7y+XC0KFD8frrr/s9Rg1/RBR5DHZEFFM+//xzTJo0CTfccAMAGTgOHDiAfv36tet59OnTB1u3bsXUqVPd27Zv3x7ycXr06IHk5GTU1NQAAIYMGYL9+/fjzDPPbPQxer0eTqcz5O+VlZWF/Px89/dq6ODBg/j5z3+O//u///MLlkOGDMHatWvRqVMnpKenh/y9iah9MNgRUUw588wz8fbbb2PLli3IysrC4sWLUVJS0u7B7q677sKtt96KYcOGYfTo0Vi7di2++eYbnHHGGY0+5pFHHkFtbS0uv/xydO/eHRUVFXjmmWdgt9sxbtw4AMAf//hHXHnllSgoKMAvfvELaDQafPPNN/j222/x+OOPA5Bh8KOPPsKYMWNgNBqRlZXl971eeOEF7Nq1C9deey169eoFi8WCV199FXv37sWyZcv89q+rq8NVV12Fc845BzNnzkRJSYn7vry8PPzmN7/Bn//8Z0yaNAmPPvoounbtiqKiIrzzzjv4/e9/j65du7b2JSWiMOAYOyKKKQ899BCGDBmCCRMm4MILL0ReXh6uueaadj+P3/zmN5g3bx5+97vfYciQITh06BCmTZvWZHfpBRdcgB9//BE33ngj+vbti4kTJ6KkpAQbN25Enz59AAATJkzAv/71LxQWFmL48OEYOXIkFi9ejO7du7uP89RTT6GwsBAFBQU499xzA36vESNGoLq6GrNmzcLZZ5+NCy64AF9++SXWrVuHCy64wG//EydO4LvvvsPHH3+Mzp07Iz8/330DgOTkZHz22Wfo1q0brrvuOvTr1w+33HIL6urq2IJHFEUUEeygECIiatK4ceOQl5eH1157LdKnQkQJil2xREQtUFtbi7/+9a+YMGECtFot3nzzTXz44YcoLCyM9KkRUQJjix0RUQuoY9K+/vprWK1W9OnTBw8++GDAalYiovbCYEdEREQUJ1g8QURERBQnGOyIiIiI4gSDHREREVGcYLAjIiIiihMMdkRERERxgsGOiIiIKE4w2BERERHFCQY7IiIiojjBYEdEREQUJ/4fbuktjqdO5LwAAAAASUVORK5CYII=",[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<Figure size 640x480 with 1 Axes>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "display_data"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "plt.fill_between(train_sizes, train_mean - train_std, train_mean + train_std, alpha=0.2, color='blue')\n",[m
[32m+[m[32m    "plt.fill_between(train_sizes, valid_mean - valid_std, valid_mean + valid_std, alpha=0.2, color='red')\n",[m
[32m+[m[32m    "    \n",[m
[32m+[m[32m    "plt.title(f'Learning Curve ({name})')\n",[m
[32m+[m[32m    "plt.xlabel('Training Set Size')\n",[m
[32m+[m[32m    "plt.ylabel('Score')\n",[m
[32m+[m[32m    "plt.legend(loc='best')\n",[m
[32m+[m[32m    "plt.grid(True)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "plt.tight_layout()\n",[m
[32m+[m[32m    "plt.show()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "tE8SgkpSYKe7"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "**References**\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "[Breast Cancer Wisconsin (Diagnostic) Data Set](https://www.kaggle.com/uciml/breast-cancer-wisconsin-data/downloads/breast-cancer-wisconsin-data.zip/2)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "[Validation curves: plotting scores to evaluate models](https://scikit-learn.org/stable/modules/learning_curve.html#learning-curves)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "[In-Depth: Support Vector Machines](https://jakevdp.github.io/PythonDataScienceHandbook/05.07-support-vector-machines.html)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "[Understanding Support Vector Machine algorithm from examples (along with code)](https://www.analyticsvidhya.com/blog/2017/09/understaing-support-vector-machine-example-code/)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "[Tuning the hyper-parameters of an estimator](https://scikit-learn.org/stable/modules/grid_search.html#grid-search)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "RERADKgNFq9T"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "---\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "---\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "> > > > > > > > > © 2024 Institute of Data\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "---\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "---\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "colab": {[m
[32m+[m[32m   "provenance": [][m
[32m+[m[32m  },[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Python 3 (ipykernel)",[m
[32m+[m[32m   "language": "python",[m
[32m+[m[32m   "name": "python3"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": {[m
[32m+[m[32m    "name": "ipython",[m
[32m+[m[32m    "version": 3[m
[32m+[m[32m   },[m
[32m+[m[32m   "file_extension": ".py",[m
[32m+[m[32m   "mimetype": "text/x-python",[m
[32m+[m[32m   "name": "python",[m
[32m+[m[32m   "nbconvert_exporter": "python",[m
[32m+[m[32m   "pygments_lexer": "ipython3",[m
[32m+[m[32m   "version": "3.11.7"[m
[32m+[m[32m  },[m
[32m+[m[32m  "varInspector": {[m
[32m+[m[32m   "cols": {[m
[32m+[m[32m    "lenName": 16,[m
[32m+[m[32m    "lenType": 16,[m
[32m+[m[32m    "lenVar": 40[m
[32m+[m[32m   },[m
[32m+[m[32m   "kernels_config": {[m
[32m+[m[32m    "python": {[m
[32m+[m[32m     "delete_cmd_postfix": "",[m
[32m+[m[32m     "delete_cmd_prefix": "del ",[m
[32m+[m[32m     "library": "var_list.py",[m
[32m+[m[32m     "varRefreshCmd": "print(var_dic_list())"[m
[32m+[m[32m    },[m
[32m+[m[32m    "r": {[m
[32m+[m[32m     "delete_cmd_postfix": ") ",[m
[32m+[m[32m     "delete_cmd_prefix": "rm(",[m
[32m+[m[32m     "library": "var_list.r",[m
[32m+[m[32m     "varRefreshCmd": "cat(var_dic_list()) "[m
[32m+[m[32m    }[m
[32m+[m[32m   },[m
[32m+[m[32m   "types_to_exclude": [[m
[32m+[m[32m    "module",[m
[32m+[m[32m    "function",[m
[32m+[m[32m    "builtin_function_or_method",[m
[32m+[m[32m    "instance",[m
[32m+[m[32m    "_Feature"[m
[32m+[m[32m   ],[m
[32m+[m[32m   "window_display": false[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 4[m
[32m+[m[32m}[m
